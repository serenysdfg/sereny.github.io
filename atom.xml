<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sereny</title>
  <subtitle>weicome</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-12T08:31:16.369Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>sereny</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang通过CMD来调用FFmpeg</title>
    <link href="http://yoursite.com/2019/11/12/2019-11-12-golang_cmd_ffmpeg/"/>
    <id>http://yoursite.com/2019/11/12/2019-11-12-golang_cmd_ffmpeg/</id>
    <published>2019-11-12T07:58:00.000Z</published>
    <updated>2019-11-12T08:31:16.369Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在golang中调用FFmpeg，一种方法是使用cgo来使用FFmpeg，这样就可以在go程序里面编写转码语句，进行错误处理等，
但是这样的方法貌似有点复杂，或许得不偿失。</p>
<p>这里使用CMD来直接调用FFmpeg进行转码，在使用较多的复杂参数的情况下，可能反而简单许多。</p>
<hr>
<h1 id="使用记录"><a href="#使用记录" class="headerlink" title="使用记录"></a>使用记录</h1><p><strong>调用：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cmd := exec.Command(&quot;/bin/bash&quot;, &quot;-c&quot;, param)</div><div class="line">cmd.SysProcAttr = &amp;syscall.SysProcAttr&#123;Setpgid: true&#125;</div><div class="line">cmd.start()</div></pre></td></tr></table></figure>
<p>这里的<code>param</code>就是整个FFmpeg转码语句，例如<code>/usr/bin/ffmpeg -i 1.mp4 1.flv</code>。</p>
<p>这里使用<code>Setpgid</code>来设置进程组pid，这样在后面kill时直接杀掉整个进程组，无残留。</p>
<p>另外<code>cmd.start()</code>表示非阻塞，转码开始后就放在后台（因为直播相关，所以会一直转码），等待结束命令。</p>
<p><strong>转码日志记录：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">stdout, err := os.OpenFile(logFile, os.O_CREATE|os.O_WRONLY, 0644)</div><div class="line">cmd.Stderr = stdout</div></pre></td></tr></table></figure>
<p>注意ffmpeg使用的日志输出是<strong>Stderr</strong>，<strong>err</strong>…</p>
<p><strong>停止：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">err := syscall.Kill(-cmd.Process.Pid, syscall.SIGKILL)</div></pre></td></tr></table></figure>
<p>加上一个负号，直接杀掉整个进程组。</p>
<hr>
<p><strong>完整代码：</strong></p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"errors"</span></div><div class="line">    <span class="string">"log"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"os/exec"</span></div><div class="line">	<span class="string">"syscall"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Exec</span><span class="params">(param, logFile <span class="keyword">string</span>)</span> <span class="params">(*exec.Cmd, error)</span></span> &#123;</div><div class="line">	cmd := exec.Command(<span class="string">"/bin/bash"</span>, <span class="string">"-c"</span>, param)</div><div class="line">	cmd.SysProcAttr = &amp;syscall.SysProcAttr&#123;Setpgid: <span class="literal">true</span>&#125;</div><div class="line"></div><div class="line">	stdout, err := os.OpenFile(logFile, os.O_CREATE|os.O_WRONLY, <span class="number">0644</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// ffmpeg 的日志输出用的是 stderr</span></div><div class="line">	cmd.Stderr = stdout</div><div class="line"></div><div class="line">	log.Info(<span class="string">"Exce cmd: %s"</span>, param)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> err := cmd.Start(); err != <span class="literal">nil</span> &#123;</div><div class="line">		_ = stdout.Close()</div><div class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> cmd, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">KillCmd</span><span class="params">(cmd *exec.Cmd)</span> <span class="title">error</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> cmd == <span class="literal">nil</span> || cmd.Process == <span class="literal">nil</span> || cmd.ProcessState == <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> errors.New(<span class="string">"process not found or already stopped"</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	log.Info(<span class="string">"Kill cmd. pid: %d"</span>, cmd.Process.Pid)</div><div class="line"></div><div class="line">	err := syscall.Kill(-cmd.Process.Pid, syscall.SIGKILL)</div><div class="line">	<span class="keyword">if</span> err != err &#123;</div><div class="line">		<span class="keyword">return</span> err</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/1f3ec2f00b03" target="_blank" rel="external">Go语言中Kill子进程的正确姿势</a></p>
]]></content>
    
    <summary type="html">
    
      使用golang直接CMD调用FFmpeg来进行转码
    
    </summary>
    
      <category term="golang" scheme="http://yoursite.com/categories/golang/"/>
    
    
      <category term="live" scheme="http://yoursite.com/tags/live/"/>
    
      <category term="golang" scheme="http://yoursite.com/tags/golang/"/>
    
      <category term="ffmpeg" scheme="http://yoursite.com/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>srs的推拉流压测</title>
    <link href="http://yoursite.com/2019/10/29/2019-10-29-srs_bench-v1/"/>
    <id>http://yoursite.com/2019/10/29/2019-10-29-srs_bench-v1/</id>
    <published>2019-10-29T08:14:00.000Z</published>
    <updated>2019-11-01T11:42:09.732Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>测试单个srs节点的同时推流或拉流的能力。</p>
<p><strong>主机1：</strong></p>
<p>云主机-上海</p>
<p>CPU：Intel(R) Xeon(R) Gold 6161 CPU @ 2.20GHz</p>
<p>MEM：64G</p>
<p><strong>主机2：</strong></p>
<p>云主机-北京</p>
<p>CPU：Intel(R) Xeon(R) Gold 6161 CPU @ 2.20GHz</p>
<p>MEM：64G</p>
<p>测试方法：使用srs自带的<a href="https://github.com/ossrs/srs-bench" target="_blank" rel="external">srs-bench</a>进行测试。</p>
<hr>
<h1 id="带宽测试"><a href="#带宽测试" class="headerlink" title="带宽测试"></a>带宽测试</h1><p>使用iperf3进行测试：</p>
<p>上海：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ iperf3 -s -p 12345 -i 1</div><div class="line"></div><div class="line">-----------------------------------------------------------</div><div class="line">Server listening on 12345</div></pre></td></tr></table></figure>
<p>北京：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">$ iperf3 -c xxx.xxx.xxx.219 -p12345 -i 1 -t 30 </div><div class="line"></div><div class="line">[ ID] Interval           Transfer     Bandwidth       Retr  Cwnd</div><div class="line">[  4]   0.00-1.00   sec  16.0 MBytes   135 Mbits/sec  4174    652 KBytes       </div><div class="line">[  4]   1.00-2.00   sec  21.2 MBytes   178 Mbits/sec  3352   1011 KBytes       </div><div class="line">[  4]   2.00-3.00   sec  26.2 MBytes   220 Mbits/sec  1293   5.66 KBytes       </div><div class="line">[  4]   3.00-4.00   sec  45.0 MBytes   378 Mbits/sec  1368   2.62 MBytes       </div><div class="line">[  4]   4.00-5.00   sec  25.0 MBytes   210 Mbits/sec  2496   1.96 MBytes       </div><div class="line">[  4]   5.00-6.00   sec  42.5 MBytes   357 Mbits/sec  1203   2.60 MBytes       </div><div class="line">[  4]   6.00-7.00   sec  33.8 MBytes   283 Mbits/sec  2117    990 KBytes       </div><div class="line">[  4]   7.00-8.00   sec  33.8 MBytes   283 Mbits/sec    0   1.02 MBytes       </div><div class="line">[  4]   8.00-9.00   sec  35.0 MBytes   294 Mbits/sec   13    824 KBytes       </div><div class="line">[  4]   9.00-10.00  sec  27.5 MBytes   231 Mbits/sec   63    860 KBytes       </div><div class="line">[  4]  10.00-11.00  sec  31.2 MBytes   262 Mbits/sec    0    940 KBytes       </div><div class="line">[  4]  11.00-12.00  sec  31.2 MBytes   262 Mbits/sec    0    998 KBytes       </div><div class="line">[  4]  12.00-13.00  sec  35.0 MBytes   294 Mbits/sec    0   1.01 MBytes       </div><div class="line">[  4]  13.00-14.00  sec  35.0 MBytes   294 Mbits/sec    0   1.04 MBytes       </div><div class="line">[  4]  14.00-15.00  sec  35.0 MBytes   294 Mbits/sec    0   1.05 MBytes       </div><div class="line">[  4]  15.00-16.00  sec  36.2 MBytes   304 Mbits/sec    1   1.07 MBytes       </div><div class="line">[  4]  16.00-17.00  sec  37.5 MBytes   315 Mbits/sec    0   1.10 MBytes       </div><div class="line">[  4]  17.00-18.00  sec  38.8 MBytes   325 Mbits/sec    0   1.13 MBytes       </div><div class="line">[  4]  18.00-19.00  sec  30.0 MBytes   252 Mbits/sec   96    894 KBytes       </div><div class="line">[  4]  19.00-20.00  sec  30.0 MBytes   252 Mbits/sec    1    932 KBytes       </div><div class="line">[  4]  20.00-21.00  sec  31.2 MBytes   262 Mbits/sec    0    956 KBytes       </div><div class="line">[  4]  21.00-22.00  sec  32.5 MBytes   273 Mbits/sec    0    983 KBytes       </div><div class="line">[  4]  22.00-23.00  sec  32.5 MBytes   273 Mbits/sec    0   1008 KBytes       </div><div class="line">[  4]  23.00-24.00  sec  35.0 MBytes   294 Mbits/sec    0   1.01 MBytes       </div><div class="line">[  4]  24.00-25.00  sec  35.0 MBytes   294 Mbits/sec    0   1.03 MBytes       </div><div class="line">[  4]  25.00-26.00  sec  36.2 MBytes   304 Mbits/sec    0   1.06 MBytes       </div><div class="line">[  4]  26.00-27.00  sec  37.5 MBytes   315 Mbits/sec    0   1.15 MBytes       </div><div class="line">[  4]  27.00-28.00  sec  41.2 MBytes   346 Mbits/sec    0   1.27 MBytes       </div><div class="line">[  4]  28.00-29.00  sec  32.5 MBytes   273 Mbits/sec  226   1018 KBytes       </div><div class="line">[  4]  29.00-30.00  sec  36.2 MBytes   304 Mbits/sec    0   1.09 MBytes       </div><div class="line">- - - - - - - - - - - - - - - - - - - - - - - - -</div><div class="line">[ ID] Interval           Transfer     Bandwidth       Retr</div><div class="line">[  4]   0.00-30.00  sec   996 MBytes   279 Mbits/sec  16403             sender</div><div class="line">[  4]   0.00-30.00  sec   993 MBytes   278 Mbits/sec                  receiver</div><div class="line"></div><div class="line">iperf Done.</div></pre></td></tr></table></figure>
<hr>
<p>北京：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ iperf3 -s -p 12345 -i 1</div><div class="line"></div><div class="line">-----------------------------------------------------------</div><div class="line">Server listening on 12345</div></pre></td></tr></table></figure>
<p>上海：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">$ iperf3 -c xxx.xxx.xxx.103 -p12345 -i 1 -t 30</div><div class="line"></div><div class="line">[ ID] Interval           Transfer     Bandwidth       Retr  Cwnd</div><div class="line">[  4]   0.00-1.00   sec  1.48 MBytes  12.4 Mbits/sec    1   56.6 KBytes       </div><div class="line">[  4]   1.00-2.00   sec  2.49 MBytes  20.9 Mbits/sec    1   80.6 KBytes       </div><div class="line">[  4]   2.00-3.00   sec  3.48 MBytes  29.2 Mbits/sec    1    106 KBytes       </div><div class="line">[  4]   3.00-4.00   sec  4.29 MBytes  36.0 Mbits/sec    1    130 KBytes       </div><div class="line">[  4]   4.00-5.00   sec  4.91 MBytes  41.2 Mbits/sec    0    157 KBytes       </div><div class="line">[  4]   5.00-6.00   sec  6.46 MBytes  54.2 Mbits/sec    0    184 KBytes       </div><div class="line">[  4]   6.00-7.00   sec  6.84 MBytes  57.3 Mbits/sec    0    212 KBytes       </div><div class="line">[  4]   7.00-8.00   sec  8.20 MBytes  68.8 Mbits/sec    0    238 KBytes       </div><div class="line">[  4]   8.00-9.00   sec  8.76 MBytes  73.5 Mbits/sec    0    266 KBytes       </div><div class="line">[  4]   9.00-10.00  sec  9.82 MBytes  82.4 Mbits/sec    0    293 KBytes       </div><div class="line">[  4]  10.00-11.00  sec  11.7 MBytes  98.0 Mbits/sec    0    356 KBytes       </div><div class="line">[  4]  11.00-12.00  sec  14.4 MBytes   120 Mbits/sec    0    467 KBytes       </div><div class="line">[  4]  12.00-13.00  sec  19.8 MBytes   166 Mbits/sec    0    602 KBytes       </div><div class="line">[  4]  13.00-14.00  sec  23.8 MBytes   199 Mbits/sec    0    772 KBytes       </div><div class="line">[  4]  14.00-15.00  sec  30.0 MBytes   252 Mbits/sec    0    977 KBytes       </div><div class="line">[  4]  15.00-16.00  sec  37.5 MBytes   315 Mbits/sec    1   1.06 MBytes       </div><div class="line">[  4]  16.00-17.00  sec  38.8 MBytes   325 Mbits/sec    0   1.09 MBytes       </div><div class="line">[  4]  17.00-18.00  sec  40.0 MBytes   336 Mbits/sec    0   1.11 MBytes       </div><div class="line">[  4]  18.00-19.00  sec  36.2 MBytes   304 Mbits/sec  152    846 KBytes       </div><div class="line">[  4]  19.00-20.00  sec  31.2 MBytes   262 Mbits/sec    4    911 KBytes       </div><div class="line">[  4]  20.00-21.00  sec  31.2 MBytes   262 Mbits/sec    0    938 KBytes       </div><div class="line">[  4]  21.00-22.00  sec  33.8 MBytes   283 Mbits/sec    0    964 KBytes       </div><div class="line">[  4]  22.00-23.00  sec  33.8 MBytes   283 Mbits/sec    0    991 KBytes       </div><div class="line">[  4]  23.00-24.00  sec  35.0 MBytes   294 Mbits/sec    0   1018 KBytes       </div><div class="line">[  4]  24.00-25.00  sec  37.5 MBytes   315 Mbits/sec    0   1.02 MBytes       </div><div class="line">[  4]  25.00-26.00  sec  36.2 MBytes   304 Mbits/sec    0   1.05 MBytes       </div><div class="line">[  4]  26.00-27.00  sec  32.5 MBytes   273 Mbits/sec   82    813 KBytes       </div><div class="line">[  4]  27.00-28.00  sec  30.0 MBytes   252 Mbits/sec    0    905 KBytes       </div><div class="line">[  4]  28.00-29.00  sec  33.8 MBytes   283 Mbits/sec    0    973 KBytes       </div><div class="line">[  4]  29.00-30.00  sec  33.8 MBytes   283 Mbits/sec    0   1022 KBytes       </div><div class="line">- - - - - - - - - - - - - - - - - - - - - - - - -</div><div class="line">[ ID] Interval           Transfer     Bandwidth       Retr</div><div class="line">[  4]   0.00-30.00  sec   678 MBytes   189 Mbits/sec  243             sender</div><div class="line">[  4]   0.00-30.00  sec   676 MBytes   189 Mbits/sec                  receiver</div><div class="line"></div><div class="line">iperf Done.</div></pre></td></tr></table></figure>
<p><strong>可以看到TCP稳定时，大概是300M的带宽。</strong></p>
<hr>
<h1 id="rtmp推流测试"><a href="#rtmp推流测试" class="headerlink" title="rtmp推流测试"></a>rtmp推流测试</h1><p>在北京起一个srs服务器，从上海使用srs-bench推流过去。</p>
<p>这里srs服务器和srs-bench都是单核运行的，为了保证srs-bench不会先达到cpu上限，使用两个srs-bench进程来推流。</p>
<p><strong>先推750路流</strong>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ ./objs/sb_rtmp_publish -i doc/source.200kbps.768x320.flv -c 750 -s 10 -r rtmp://xxx.xxx.xxx.103:2019/live/livestream_&#123;i&#125;?vhost=long.test.com</div><div class="line"></div><div class="line">[2019-10-27 15:58:55.938] [report] [16398] threads:750 alive:750 duration:30 tduration:0 nread:0.79 nwrite:137.69 tasks:750 etasks:0 stasks:0 estasks:0</div><div class="line">[2019-10-27 15:59:25.938] [report] [16398] threads:750 alive:750 duration:60 tduration:0 nread:0.39 nwrite:163.65 tasks:750 etasks:0 stasks:0 estasks:0</div><div class="line">[2019-10-27 15:59:55.938] [report] [16398] threads:750 alive:750 duration:90 tduration:0 nread:0.26 nwrite:164.61 tasks:750 etasks:0 stasks:0 estasks:0</div><div class="line">[2019-10-27 16:00:25.938] [report] [16398] threads:750 alive:750 duration:120 tduration:0 nread:0.20 nwrite:172.49 tasks:750 etasks:0 stasks:0 estasks:0</div><div class="line">[2019-10-27 16:00:55.938] [report] [16398] threads:750 alive:750 duration:150 tduration:0 nread:0.16 nwrite:174.96 tasks:750 etasks:0 stasks:0 estasks:0</div><div class="line">[2019-10-27 16:01:25.938] [report] [16398] threads:750 alive:750 duration:180 tduration:0 nread:0.13 nwrite:179.18 tasks:750 etasks:0 stasks:0 estasks:0</div><div class="line">[2019-10-27 16:01:55.938] [report] [16398] threads:750 alive:750 duration:210 tduration:0 nread:0.11 nwrite:184.73 tasks:750 etasks:0 stasks:0 estasks:0</div><div class="line">[2019-10-27 16:02:25.938] [report] [16398] threads:750 alive:750 duration:240 tduration:0 nread:0.10 nwrite:182.79 tasks:750 etasks:0 stasks:0 estasks:0</div><div class="line">[2019-10-27 16:02:55.939] [report] [16398] threads:750 alive:750 duration:270 tduration:0 nread:0.09 nwrite:183.50 tasks:750 etasks:0 stasks:0 estasks:0</div></pre></td></tr></table></figure>
<p><strong>观察服务器cpu占用：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ top</div><div class="line"></div><div class="line">top - 15:57:51 up 243 days,  1:29,  4 users,  load average: 0.35, 0.16, 0.10</div><div class="line">Tasks: 212 total,   2 running, 210 sleeping,   0 stopped,   0 zombie</div><div class="line">%Cpu(s):  2.2 us,  0.5 sy,  0.0 ni, 96.7 id,  0.0 wa,  0.0 hi,  0.6 si,  0.0 st</div><div class="line">KiB Mem : 65807864 total,  2352216 free,  1588392 used, 61867256 buff/cache</div><div class="line">KiB Swap:  4194300 total,  4192468 free,     1832 used. 61573296 avail Mem </div><div class="line"></div><div class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND        </div><div class="line"> 9548 root      20   0  639468 318264   1924 R  50.5  0.5  22:03.87 srs            </div><div class="line"> 9554 root      20   0  437456 221308   1928 S  15.6  0.3  11:34.34 srs            </div><div class="line">   10 root      20   0       0      0      0 S   0.3  0.0 236:57.63 rcu_sched      </div><div class="line">    1 root      20   0  199248   3912   2436 S   0.0  0.0  68:38.96 systemd        </div><div class="line">    2 root      20   0       0      0      0 S   0.0  0.0   0:00.01 kthreadd       </div><div class="line">    3 root      20   0       0      0      0 S   0.0  0.0   1:33.02 ksoftirqd/0    </div><div class="line">    5 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0H   </div><div class="line">    6 root      20   0       0      0      0 S   0.0  0.0   0:03.29 kworker/u32:0</div></pre></td></tr></table></figure>
<p><strong>观察服务器IO占用：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ dstat</div><div class="line"></div><div class="line">----total-cpu-usage---- -dsk/total- -net/total- ---paging-- ---system--</div><div class="line">usr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw </div><div class="line">  2   0  97   0   0   1|   0     0 |  24M  730k|   0     0 |  12k 7223 </div><div class="line">  2   0  97   0   0   1|   0     0 |  23M  715k|   0     0 |  11k 7190 </div><div class="line">  2   1  97   0   0   1|   0   112k|  20M  675k|   0     0 |  11k 7399 </div><div class="line">  2   0  97   0   0   1|   0     0 |  21M  684k|   0     0 |  11k 6847 </div><div class="line">  2   0  97   0   0   1|   0     0 |  23M  695k|   0     0 |  11k 7115 </div><div class="line">  2   0  97   0   0   1|   0     0 |  23M  710k|   0     0 |  11k 7168 </div><div class="line">  2   0  97   0   0   1|   0     0 |  24M  714k|   0     0 |  11k 7377 </div><div class="line">  2   1  97   0   0   1|   0     0 |  27M  743k|   0     0 |  12k 6799 </div><div class="line">  2   0  97   0   0   1|   0    24k|  30M  783k|   0     0 |  13k 7247 </div><div class="line">  2   0  97   0   0   1|   0     0 |  33M  813k|   0     0 |  13k 7354 </div><div class="line">  2   1  97   0   0   1|   0     0 |  36M  833k|   0     0 |  14k 8435 </div><div class="line">  2   0  97   0   0   1|   0     0 |  37M  861k|   0     0 |  14k 7925</div></pre></td></tr></table></figure>
<p><strong>再推250路流，增加到1000路流：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ ./objs/sb_rtmp_publish -i doc/source.200kbps.768x320.flv -c 250 -s 10 -r rtmp://xxx.xxx.xxx.103:2019/live/livestream1_&#123;i&#125;?vhost=long.test.com</div><div class="line"></div><div class="line">[2019-10-27 16:28:10.008] [report] [16481] threads:250 alive:250 duration:1110 tduration:0 nread:0.01 nwrite:62.53 tasks:262 etasks:12 stasks:0 estasks:0</div><div class="line">[2019-10-27 16:28:40.008] [report] [16481] threads:250 alive:250 duration:1140 tduration:0 nread:0.01 nwrite:62.37 tasks:262 etasks:12 stasks:0 estasks:0</div><div class="line">[2019-10-27 16:29:10.008] [report] [16481] threads:250 alive:250 duration:1170 tduration:0 nread:0.01 nwrite:62.39 tasks:262 etasks:12 stasks:0 estasks:0</div></pre></td></tr></table></figure>
<p><strong>观察服务器cpu占用：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">top - 16:26:27 up 243 days,  1:57,  4 users,  load average: 0.84, 0.73, 0.61</div><div class="line">Tasks: 212 total,   1 running, 211 sleeping,   0 stopped,   0 zombie</div><div class="line">%Cpu(s):  3.0 us,  0.5 sy,  0.0 ni, 95.7 id,  0.0 wa,  0.0 hi,  0.8 si,  0.0 st</div><div class="line">KiB Mem : 65807864 total,  2342924 free,  1593668 used, 61871272 buff/cache</div><div class="line">KiB Swap:  4194300 total,  4192468 free,     1832 used. 61567380 avail Mem </div><div class="line"></div><div class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND        </div><div class="line"> 9548 root      20   0  639468 318264   1924 S  69.4  0.5  39:42.44 srs            </div><div class="line">15063 root      20   0  155140   5848   4500 S   1.0  0.0   0:00.03 sshd           </div><div class="line">15065 root      20   0  116496   3088   1648 S   0.7  0.0   0:00.02 bash           </div><div class="line">   10 root      20   0       0      0      0 S   0.3  0.0 237:00.91 rcu_sched      </div><div class="line">   80 root      20   0       0      0      0 S   0.3  0.0 560:22.55 ksoftirqd/14</div></pre></td></tr></table></figure>
<p><strong>观察服务器IO占用：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">----total-cpu-usage---- -dsk/total- -net/total- ---paging-- ---system--</div><div class="line">usr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw </div><div class="line">  3   0  96   0   0   1|   0     0 |  32M  990k|   0     0 |  14k 5548 </div><div class="line">  3   0  96   0   0   1|   0    20k|  31M  994k|   0     0 |  14k 5763 </div><div class="line">  3   0  96   0   0   1|   0     0 |  32M  986k|   0     0 |  14k 5636 </div><div class="line">  3   0  96   0   0   1|   0     0 |  32M  979k|   0     0 |  14k 5777 </div><div class="line">  3   0  96   0   0   1|   0  8192B|  31M  981k|   0     0 |  14k 5762 </div><div class="line">  4   0  95   0   0   1|   0     0 |  32M  989k|   0     0 |  14k 5615 </div><div class="line">  4   1  95   0   0   1|   0  3008k|  33M 1011k|   0     0 |  15k 5571 </div><div class="line">  3   1  96   0   0   1|   0     0 |  35M 1051k|   0     0 |  15k 5471 </div><div class="line">  3   0  96   0   0   1|   0     0 |  37M 1066k|   0     0 |  15k 5289 </div><div class="line">  3   1  95   0   0   1|  44k 4096B|  38M 1079k|   0     0 |  15k 5712 </div><div class="line">  3   0  96   0   0   1|   0     0 |  39M 1086k|   0     0 |  15k 5389</div></pre></td></tr></table></figure>
<p><strong>增加到1200路流：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ ./objs/sb_rtmp_publish -i doc/source.200kbps.768x320.flv -c 200 -s 10 -r rtmp://xxx.xxx.xxx.103:2019/live/livestream2_&#123;i&#125;?vhost=long.test.com</div><div class="line"></div><div class="line">[2019-10-27 16:33:21.150] [report] [16689] threads:200 alive:199 duration:60 tduration:0 nread:0.11 nwrite:39.88 tasks:208 etasks:9 stasks:0 estasks:0</div><div class="line">[2019-10-27 16:33:51.150] [report] [16689] threads:200 alive:200 duration:90 tduration:0 nread:0.08 nwrite:41.05 tasks:219 etasks:19 stasks:0 estasks:0</div><div class="line">[2019-10-27 16:34:21.150] [report] [16689] threads:200 alive:200 duration:120 tduration:0 nread:0.06 nwrite:42.49 tasks:219 etasks:19 stasks:0 estasks:0</div></pre></td></tr></table></figure>
<p><strong>观察服务器cpu占用：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">top - 16:32:01 up 243 days,  2:03,  4 users,  load average: 0.98, 0.85, 0.68</div><div class="line">Tasks: 213 total,   2 running, 211 sleeping,   0 stopped,   0 zombie</div><div class="line">%Cpu(s):  3.5 us,  0.5 sy,  0.0 ni, 95.1 id,  0.0 wa,  0.0 hi,  0.9 si,  0.0 st</div><div class="line">KiB Mem : 65807864 total,  2326480 free,  1607988 used, 61873396 buff/cache</div><div class="line">KiB Swap:  4194300 total,  4192468 free,     1832 used. 61551888 avail Mem </div><div class="line"></div><div class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND        </div><div class="line"> 9548 root      20   0  675468 321256   1924 R  88.4  0.5  44:02.00 srs            </div><div class="line">   10 root      20   0       0      0      0 S   0.3  0.0 237:01.58 rcu_sched      </div><div class="line"> 1060 root      20   0   20.1g 421956  13468 S   0.3  0.6 308:47.03 java           </div><div class="line"> 5359 root      20   0  112800   4328   3300 S   0.3  0.0   9:57.35 sshd           </div><div class="line"> 6052 root      20   0   13220    796    592 S   0.3  0.0 238:27.05 rngd</div></pre></td></tr></table></figure>
<p><strong>观察服务器IO占用：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">----total-cpu-usage---- -dsk/total- -net/total- ---paging-- ---system--</div><div class="line">usr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw </div><div class="line">  3   1  95   0   0   1|   0     0 |  35M 1218k|   0     0 |  16k 3206 </div><div class="line">  3   0  95   0   0   1|   0     0 |  35M 1235k|   0     0 |  17k 3217 </div><div class="line">  3   1  95   0   0   1|   0     0 |  35M 1224k|   0     0 |  17k 3194 </div><div class="line">  4   0  95   0   0   1|   0     0 |  35M 1216k|   0     0 |  17k 3381 </div><div class="line">  4   1  95   0   0   1|   0    52k|  35M 1223k|   0     0 |  17k 3177 </div><div class="line">  4   1  95   0   0   1|   0     0 |  35M 1247k|   0     0 |  17k 3289 </div><div class="line">  4   0  95   0   0   1|   0     0 |  35M 1218k|   0     0 |  17k 3346 </div><div class="line">  3   0  95   0   0   1|   0     0 |  35M 1229k|   0     0 |  17k 3093 </div><div class="line">  4   1  95   0   0   1|   0     0 |  35M 1207k|   0     0 |  17k 3226 </div><div class="line">  3   0  95   0   0   1|   0    60k|  35M 1238k|   0     0 |  17k 3097 </div><div class="line">  4   0  95   0   0   1|   0  8192B|  35M 1209k|   0     0 |  17k 3612 </div><div class="line">  3   1  95   0   0   1|   0     0 |  35M 1219k|   0     0 |  16k 3216</div></pre></td></tr></table></figure>
<p><strong>结论：在推送200kbps的流的情况下，大概在1000路推流时，带宽首先被占满，CPU在70%左右。</strong></p>
<hr>
<h1 id="rtmp拉流测试"><a href="#rtmp拉流测试" class="headerlink" title="rtmp拉流测试"></a>rtmp拉流测试</h1><p><strong>先推一路流上去：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./objs/sb_rtmp_publish -i doc/source.200kbps.768x320.flv -c 1 -s 10 -r rtmp://xxx.xxx.xxx.103:2019/live/livestream?vhost=long.test.com</div></pre></td></tr></table></figure>
<p><strong>直接拉1000路流：</strong>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ ./objs/sb_rtmp_load -c 1000 -s 10 -r rtmp://xxx.xxx.xxx.103:2019/live/livestream?vhost=long.test.com</div><div class="line"></div><div class="line">[2019-10-27 16:42:00.428] [report] [16756] threads:1000 alive:1000 duration:30 tduration:0 nread:172.40 nwrite:0.93 tasks:1000 etasks:0 stasks:0 estasks:0</div><div class="line">[2019-10-27 16:42:30.428] [report] [16756] threads:1000 alive:1000 duration:60 tduration:0 nread:212.69 nwrite:0.46 tasks:1000 etasks:0 stasks:0 estasks:0</div></pre></td></tr></table></figure>
<p><strong>观察服务器cpu占用：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">top - 16:40:27 up 243 days,  2:11,  4 users,  load average: 0.14, 0.42, 0.56</div><div class="line">Tasks: 213 total,   2 running, 211 sleeping,   0 stopped,   0 zombie</div><div class="line">%Cpu(s):  0.5 us,  0.3 sy,  0.0 ni, 98.5 id,  0.0 wa,  0.0 hi,  0.7 si,  0.0 st</div><div class="line">KiB Mem : 65807864 total,  2276144 free,  1648396 used, 61883324 buff/cache</div><div class="line">KiB Swap:  4194300 total,  4192468 free,     1832 used. 61505084 avail Mem </div><div class="line"></div><div class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND        </div><div class="line"> 9548 root      20   0  675468 321276   1944 R  13.6  0.5  47:13.14 srs            </div><div class="line"> 6572 root      20   0 1949000  44236  14768 S   1.7  0.1 955:10.49 containerd     </div><div class="line"> 4921 root      20   0   24576   8708   2380 S   0.3  0.0  85:26.68 srs            </div><div class="line"> 6052 root      20   0   13220    796    592 S   0.3  0.0 238:28.16 rngd           </div><div class="line">    1 root      20   0  199248   3912   2436 S   0.0  0.0  68:39.47 systemd        </div><div class="line">    2 root      20   0       0      0      0 S   0.0  0.0   0:00.01 kthreadd</div></pre></td></tr></table></figure>
<p><strong>观察服务器IO占用：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">----total-cpu-usage---- -dsk/total- -net/total- ---paging-- ---system--</div><div class="line">usr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw </div><div class="line">  0   0  99   0   0   1|   0     0 |1309k   46M|   0     0 |  14k  880 </div><div class="line">  1   0  98   0   0   1|   0     0 |1312k   45M|   0     0 |  14k  913 </div><div class="line">  0   0  99   0   0   1|   0     0 |1167k   44M|   0     0 |  13k  897 </div><div class="line">  1   0  99   0   0   1|   0     0 |1236k   45M|   0     0 |  12k  810 </div><div class="line">  1   0  99   0   0   1|   0   148k|1309k   47M|   0     0 |  13k  911 </div><div class="line">  0   0  99   0   0   1|   0     0 |1296k   45M|   0     0 |  13k  817 </div><div class="line">  0   0  99   0   0   1|   0     0 |1269k   42M|   0     0 |  13k  843 </div><div class="line">  0   0  99   0   0   1|   0     0 |1195k   44M|   0     0 |  12k  894 </div><div class="line">  0   0  99   0   0   1|   0     0 |1192k   42M|   0     0 |  12k  812 </div><div class="line">  1   0  99   0   0   1|   0    20k|1271k   49M|   0     0 |  12k  795 </div><div class="line">  0   0  99   0   0   1|   0     0 |1243k   41M|   0     0 |  13k  949 </div><div class="line">  1   0  98   0   0   1|   0     0 |1320k   48M|   0     0 |  13k  909 </div><div class="line">  0   0  99   0   0   1|   0     0 |1254k   45M|   0     0 |  13k  858</div></pre></td></tr></table></figure>
<p><strong>结论：在拉取200kbps的流的情况下，大概在1000路拉流时，带宽45MB左右，CPU在13%左右，上限决定于带宽</strong></p>
<hr>
<h1 id="flv拉流测试"><a href="#flv拉流测试" class="headerlink" title="flv拉流测试"></a>flv拉流测试</h1><p><strong>先推一路流上去：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./objs/sb_rtmp_publish -i doc/source.200kbps.768x320.flv -c 1 -s 10 -r rtmp://xxx.xxx.xxx.103:2019/live/livestream?vhost=long.test.com</div></pre></td></tr></table></figure>
<p><strong>直接拉1000路流：</strong>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ ./objs/sb_http_load -c 1000 -s 10 -r http://long.test.com:3019/live/livestream.flv</div><div class="line"></div><div class="line">[2019-10-27 18:05:31.713] [report] [17375] threads:1000 alive:1000 duration:240 tduration:0 nread:238.23 nwrite:0.00 tasks:1000 etasks:0 stasks:0 estasks:0</div><div class="line">[2019-10-27 18:06:01.713] [report] [17375] threads:1000 alive:1000 duration:270 tduration:0 nread:242.30 nwrite:0.00 tasks:1000 etasks:0 stasks:0 estasks:0</div><div class="line">[2019-10-27 18:06:31.713] [report] [17375] threads:1000 alive:1000 duration:300 tduration:0 nread:244.52 nwrite:0.00 tasks:1000 etasks:0 stasks:0 estasks:0</div></pre></td></tr></table></figure>
<p><strong>观察服务器cpu占用：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">top - 18:04:10 up 243 days,  3:35,  4 users,  load average: 0.10, 0.17, 0.13</div><div class="line">Tasks: 211 total,   2 running, 209 sleeping,   0 stopped,   0 zombie</div><div class="line">%Cpu(s):  1.2 us,  0.9 sy,  0.0 ni, 97.1 id,  0.0 wa,  0.0 hi,  0.8 si,  0.0 st</div><div class="line">KiB Mem : 65807864 total,  2559192 free,  1223956 used, 62024716 buff/cache</div><div class="line">KiB Swap:  4194300 total,  4192468 free,     1832 used. 61930044 avail Mem </div><div class="line"></div><div class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND        </div><div class="line">18700 root      20   0  340136 107528   2000 R  41.5  0.2   3:15.25 srs            </div><div class="line"> 6572 root      20   0 1949000  43996  14768 S   1.7  0.1 955:25.07 containerd     </div><div class="line">  966 root      20   0  122040   1492    888 S   0.3  0.0 174:11.47 wrapper        </div><div class="line"> 9695 root      20   0  161976   2372   1600 R   0.3  0.0   0:29.07 top            </div><div class="line">    1 root      20   0  199248   3912   2436 S   0.0  0.0  68:40.50 systemd        </div><div class="line">    2 root      20   0       0      0      0 S   0.0  0.0   0:00.01 kthreadd       </div><div class="line">    3 root      20   0       0      0      0 S   0.0  0.0   1:33.02 ksoftirqd/0</div></pre></td></tr></table></figure>
<p><strong>观察服务器IO占用：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">----total-cpu-usage---- -dsk/total- -net/total- ---paging-- ---system--</div><div class="line">usr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw </div><div class="line">  1   1  97   0   0   1|   0     0 |1138k   42M|   0     0 |  13k 1447 </div><div class="line">  1   1  97   0   0   1|   0     0 |1121k   42M|   0     0 |  13k 1417 </div><div class="line">  1   1  97   0   0   1|   0     0 |1108k   41M|   0     0 |  13k 1436 </div><div class="line">  1   1  97   0   0   1|   0    28k|1110k   44M|   0     0 |  13k 1381 </div><div class="line">  1   1  97   0   0   1|   0     0 |1150k   44M|   0     0 |  13k 1300 </div><div class="line">  1   1  97   0   0   1|   0     0 |1190k   42M|   0     0 |  13k 1306 </div><div class="line">  1   1  98   0   0   1|   0     0 |1086k   42M|   0     0 |  13k 1320 </div><div class="line">  1   1  98   0   0   1|   0     0 |1186k   44M|   0     0 |  13k 1298 </div><div class="line">  1   1  98   0   0   1|   0    68k|1181k   41M|   0     0 |  14k 1348 </div><div class="line">  1   1  98   0   0   1|   0     0 | 853k   33M|   0     0 |  11k 1255 </div><div class="line">  1   1  98   0   0   0|   0     0 | 812k   37M|   0     0 |  10k 1149 </div><div class="line">  3   1  96   0   0   0|   0     0 | 876k   41M|   0     0 |  11k 1308</div></pre></td></tr></table></figure>
<p><strong>结论：与rtmp类似，在拉取200kbps的流的情况下，大概在1000路拉流时，带宽43MB左右，CPU在41%左右，上限决定于带宽，
但是这里的CPU使用率显然比rtmp高得多。</strong></p>
<hr>
<h1 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h1><p>无论是推流还是拉流，实际上的瓶颈都在于<strong>带宽</strong>。并且在测试中srs实际上只使用了一个CPU核心，实际上还剩余了大量的CPU资源。</p>
<p><strong>由于srs-bench不支持flv推流测试，所以暂时没有对flv推流进行测试。</strong></p>
<h2 id="——————————————————"><a href="#——————————————————" class="headerlink" title="——————————————————-"></a>——————————————————-</h2><h1 id="2019-11-1补充：局域网测试"><a href="#2019-11-1补充：局域网测试" class="headerlink" title="2019-11-1补充：局域网测试"></a>2019-11-1补充：局域网测试</h1><p>上一次测试限于带宽只有300M，导致测试效果是带宽为瓶颈，这里在局域网中进行测试，有更大的带宽。</p>
<p>VM1：192.168.90.40</p>
<p>VM2：192.168.90.45</p>
<p>主机CPU为i7-8700，频率3.2GHz。</p>
<hr>
<h1 id="带宽测试-1"><a href="#带宽测试-1" class="headerlink" title="带宽测试"></a>带宽测试</h1><p><strong>VM1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ iperf3 -s -p 12345 -i 1</div><div class="line"></div><div class="line">-----------------------------------------------------------</div><div class="line">Server listening on 12345</div><div class="line">-----------------------------------------------------------</div></pre></td></tr></table></figure>
<p><strong>VM2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ iperf3 -c 192.168.90.40 -p12345 -i 1 -t 30</div><div class="line"></div><div class="line">Connecting to host 192.168.90.40, port 12345</div><div class="line">[  4] local 192.168.90.43 port 50380 connected to 192.168.90.40 port 12345</div><div class="line">[ ID] Interval           Transfer     Bandwidth       Retr  Cwnd</div><div class="line">[  4]   0.00-1.00   sec   111 MBytes   932 Mbits/sec    3    402 KBytes       </div><div class="line">[  4]   1.00-2.00   sec   113 MBytes   948 Mbits/sec    0    581 KBytes       </div><div class="line">[  4]   2.00-3.00   sec   111 MBytes   934 Mbits/sec    0    713 KBytes       </div><div class="line">[  4]   3.00-4.00   sec   111 MBytes   933 Mbits/sec    0    826 KBytes       </div><div class="line">[  4]   4.00-5.00   sec   111 MBytes   933 Mbits/sec    0    923 KBytes       </div><div class="line">[  4]   5.00-6.00   sec   111 MBytes   933 Mbits/sec    0   1014 KBytes       </div><div class="line">[  4]   6.00-7.00   sec   111 MBytes   933 Mbits/sec    0   1.07 MBytes       </div><div class="line">[  4]   7.00-8.00   sec   112 MBytes   944 Mbits/sec    0   1.14 MBytes       </div><div class="line">[  4]   8.00-9.00   sec   111 MBytes   933 Mbits/sec    0   1.21 MBytes</div></pre></td></tr></table></figure>
<p>可以看到带宽接近千兆。</p>
<hr>
<h1 id="推拉流测试结果"><a href="#推拉流测试结果" class="headerlink" title="推拉流测试结果"></a>推拉流测试结果</h1><p>CPU为i7-8700，频率3.2GHz;带宽933 Mbits/sec。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>测试项目</th>
<th>单路流大小</th>
<th>推拉流数</th>
<th>CPU使用率</th>
<th>带宽占用   </th>
</tr>
</thead>
<tbody>
<tr>
<td>rtmp推流测试</td>
<td>200kbps</td>
<td>4000</td>
<td>100%</td>
<td>114M     </td>
</tr>
<tr>
<td>rtmp拉流测试</td>
<td>200kbps</td>
<td>4000</td>
<td>20%~40%</td>
<td>114M     </td>
</tr>
<tr>
<td>flv拉流测试</td>
<td>200kbps</td>
<td>4000</td>
<td>60%~80%</td>
<td>114M     </td>
</tr>
<tr>
<td>rtmp推流测试</td>
<td>1000kbps</td>
<td>500</td>
<td>40%~50%</td>
<td>60M~80M     </td>
</tr>
<tr>
<td>rtmp推流测试</td>
<td>1000kbps</td>
<td>1000</td>
<td>75%~80%</td>
<td>114M     </td>
</tr>
<tr>
<td>rtmp拉流测试</td>
<td>1000kbps</td>
<td>500</td>
<td>13%~15%</td>
<td>60M~80M     </td>
</tr>
<tr>
<td>rtmp拉流测试</td>
<td>1000kbps</td>
<td>1000</td>
<td>15%~17%</td>
<td>114M     </td>
</tr>
<tr>
<td>flv拉流测试</td>
<td>1000kbps</td>
<td>500</td>
<td>18%~20%</td>
<td>60M~80M     </td>
</tr>
<tr>
<td>flv拉流测试</td>
<td>1000kbps</td>
<td>1000</td>
<td>45%~50%</td>
<td>114M     </td>
</tr>
</tbody>
</table>
</div>
]]></content>
    
    <summary type="html">
    
      测试srs推拉流的能力瓶颈。
    
    </summary>
    
      <category term="live" scheme="http://yoursite.com/categories/live/"/>
    
    
      <category term="live" scheme="http://yoursite.com/tags/live/"/>
    
      <category term="srs" scheme="http://yoursite.com/tags/srs/"/>
    
  </entry>
  
  <entry>
    <title>srs中ffmpeg配置转码参数的一些介绍</title>
    <link href="http://yoursite.com/2019/10/29/2019-10-29-srs_ffmpeg_transcode_params/"/>
    <id>http://yoursite.com/2019/10/29/2019-10-29-srs_ffmpeg_transcode_params/</id>
    <published>2019-10-29T07:11:00.000Z</published>
    <updated>2019-10-29T08:06:08.069Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="srs-所有转码参数介绍"><a href="#srs-所有转码参数介绍" class="headerlink" title="srs 所有转码参数介绍"></a>srs 所有转码参数介绍</h1><p>srs版本v2</p>
<p>参考来自<a href="https://github.com/ossrs/srs/wiki/v2_CN_FFMPEG" target="_blank" rel="external">srs官方FFMPEG教程</a></p>
<p>首先是原官方文档：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line">listen              1935;</div><div class="line">vhost __defaultVhost__ &#123;</div><div class="line">    # the streaming transcode configs.</div><div class="line">    transcode &#123;</div><div class="line">        # whether the transcode enabled.</div><div class="line">        # if off, donot transcode.</div><div class="line">        # default: off.</div><div class="line">        enabled     on;</div><div class="line">        # the ffmpeg </div><div class="line">        ffmpeg      ./objs/ffmpeg/bin/ffmpeg;</div><div class="line">        # the transcode engine for matched stream.</div><div class="line">        # all matched stream will transcoded to the following stream.</div><div class="line">        # the transcode set name(ie. hd) is optional and not used.</div><div class="line">        engine example &#123;</div><div class="line">            # whether the engine is enabled</div><div class="line">            # default: off.</div><div class="line">            enabled         on;</div><div class="line">            # input format, can be:</div><div class="line">            # off, do not specifies the format, ffmpeg will guess it.</div><div class="line">            # flv, for flv or RTMP stream.</div><div class="line">            # other format, for example, mp4/aac whatever.</div><div class="line">            # default: flv</div><div class="line">            iformat         flv;</div><div class="line">            # ffmpeg filters, follows the main input.</div><div class="line">            vfilter &#123;</div><div class="line">                # the logo input file.</div><div class="line">                i               ./doc/ffmpeg-logo.png;</div><div class="line">                # the ffmpeg complex filter.</div><div class="line">                # for filters, @see: http://ffmpeg.org/ffmpeg-filters.html</div><div class="line">                filter_complex  &apos;overlay=10:10&apos;;</div><div class="line">            &#125;</div><div class="line">            # video encoder name. can be:</div><div class="line">            #       libx264: use h.264(libx264) video encoder.</div><div class="line">            #       copy: donot encoder the video stream, copy it.</div><div class="line">            #       vn: disable video output.</div><div class="line">            vcodec          libx264;</div><div class="line">            # video bitrate, in kbps</div><div class="line">            # @remark 0 to use source video bitrate.</div><div class="line">            # default: 0</div><div class="line">            vbitrate        1500;</div><div class="line">            # video framerate.</div><div class="line">            # @remark 0 to use source video fps.</div><div class="line">            # default: 0</div><div class="line">            vfps            25;</div><div class="line">            # video width, must be even numbers.</div><div class="line">            # @remark 0 to use source video width.</div><div class="line">            # default: 0</div><div class="line">            vwidth          768;</div><div class="line">            # video height, must be even numbers.</div><div class="line">            # @remark 0 to use source video height.</div><div class="line">            # default: 0</div><div class="line">            vheight         320;</div><div class="line">            # the max threads for ffmpeg to used.</div><div class="line">            # default: 1</div><div class="line">            vthreads        12;</div><div class="line">            # x264 profile, @see x264 -help, can be:</div><div class="line">            # high,main,baseline</div><div class="line">            vprofile        main;</div><div class="line">            # x264 preset, @see x264 -help, can be: </div><div class="line">            #       ultrafast,superfast,veryfast,faster,fast</div><div class="line">            #       medium,slow,slower,veryslow,placebo</div><div class="line">            vpreset         medium;</div><div class="line">            # other x264 or ffmpeg video params</div><div class="line">            vparams &#123;</div><div class="line">                # ffmpeg options, @see: http://ffmpeg.org/ffmpeg.html</div><div class="line">                t               100;</div><div class="line">                # 264 params, @see: http://ffmpeg.org/ffmpeg-codecs.html#libx264</div><div class="line">                coder           1;</div><div class="line">                b_strategy      2;</div><div class="line">                bf              3;</div><div class="line">                refs            10;</div><div class="line">            &#125;</div><div class="line">            # audio encoder name. can be:</div><div class="line">            #       libfdk_aac: use aac(libfdk_aac) audio encoder.</div><div class="line">            #       copy: donot encoder the audio stream, copy it.</div><div class="line">            #       an: disable audio output.</div><div class="line">            acodec          libfdk_aac;</div><div class="line">            # audio bitrate, in kbps. [16, 72] for libfdk_aac.</div><div class="line">            # @remark 0 to use source audio bitrate.</div><div class="line">            # default: 0</div><div class="line">            abitrate        70;</div><div class="line">            # audio sample rate. for flv/rtmp, it must be:</div><div class="line">            #       44100,22050,11025,5512</div><div class="line">            # @remark 0 to use source audio sample rate.</div><div class="line">            # default: 0</div><div class="line">            asample_rate    44100;</div><div class="line">            # audio channel, 1 for mono, 2 for stereo.</div><div class="line">            # @remark 0 to use source audio channels.</div><div class="line">            # default: 0</div><div class="line">            achannels       2;</div><div class="line">            # other ffmpeg audio params</div><div class="line">            aparams &#123;</div><div class="line">                # audio params, @see: http://ffmpeg.org/ffmpeg-codecs.html#Audio-Encoders</div><div class="line">                # @remark SRS supported aac profile for HLS is: aac_low, aac_he, aac_he_v2</div><div class="line">                profile:a   aac_low;</div><div class="line">                bsf:a       aac_adtstoasc;</div><div class="line">            &#125;</div><div class="line">            # output format, can be:</div><div class="line">            #       off, do not specifies the format, ffmpeg will guess it.</div><div class="line">            #       flv, for flv or RTMP stream.</div><div class="line">            #       other format, for example, mp4/aac whatever.</div><div class="line">            # default: flv</div><div class="line">            oformat         flv;</div><div class="line">            # output stream. variables:</div><div class="line">            #       [vhost] the input stream vhost.</div><div class="line">            #       [port] the intput stream port.</div><div class="line">            #       [app] the input stream app.</div><div class="line">            #       [stream] the input stream name.</div><div class="line">            #       [engine] the tanscode engine name.</div><div class="line">            output          rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="转码engine配置"><a href="#转码engine配置" class="headerlink" title="转码engine配置"></a>转码engine配置</h1><p>一个 transcode 中可以配置多个 engine 来进行转码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">vhost www.test.com &#123;</div><div class="line">    transcode &#123;</div><div class="line">        engine 360p &#123;</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">        engine 480p &#123;</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">        engine 720p &#123;</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="srs-中可使用的转码参数"><a href="#srs-中可使用的转码参数" class="headerlink" title="srs 中可使用的转码参数"></a>srs 中可使用的转码参数</h1><hr>
<h2 id="整体参数"><a href="#整体参数" class="headerlink" title="整体参数"></a>整体参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"># 输入格式，其中flv表示输入格式为flv或者是RTMP。</div><div class="line">iformat         flv;</div><div class="line"></div><div class="line"># ffmpeg 滤镜</div><div class="line">vfilter &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 视频相关参数</div><div class="line">vcodec          libx264;</div><div class="line">vbitrate        1500;</div><div class="line">vfps            25;</div><div class="line">vwidth          768;</div><div class="line">vheight         320;</div><div class="line">vthreads        12;</div><div class="line">vprofile        main;</div><div class="line">vpreset         medium;</div><div class="line">vparams &#123;</div><div class="line">    t               100;</div><div class="line">    coder           1;</div><div class="line">    b_strategy      2;</div><div class="line">    bf              3;</div><div class="line">    refs            10;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 音频相关参数</div><div class="line">acodec          libfdk_aac;</div><div class="line">abitrate        70;</div><div class="line">asample_rate    44100;</div><div class="line">achannels       2;</div><div class="line">aparams &#123;</div><div class="line">    profile:a   aac_low;</div><div class="line">    bsf:a       aac_adtstoasc;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 输出格式，其中flv表示输出格式为flv或者是RTMP。</div><div class="line">oformat         flv;</div><div class="line"></div><div class="line"># 转码后的输出流</div><div class="line">output          rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine];</div></pre></td></tr></table></figure>
<hr>
<h2 id="视频相关参数"><a href="#视频相关参数" class="headerlink" title="视频相关参数"></a>视频相关参数</h2><p><strong>vcodec：</strong></p>
<p>视频编码器名称，通常使用 libx264。</p>
<p><strong>vbitrate：</strong></p>
<p>视频编码所使用的码率，单位kbps。这里所设置的应该是视频的平均码率。</p>
<p><strong>vfps：</strong></p>
<p>视频帧率。</p>
<p><strong>vwidth：</strong></p>
<p>视频宽度。</p>
<p><strong>vheight：</strong></p>
<p>视频高度。</p>
<p><strong>vthreads：</strong></p>
<p>使用多少个线程来进行转码。开启多个线程需要codec（编解码器）支持才行。</p>
<p><strong>vprofile：</strong></p>
<p>可以简单理解为H264的版本，可以选择high,main,baseline。
暂时知道：压缩率 high &gt; main &gt; baseline。
暂时不知道它与画质有没有直接关系。</p>
<p><a href="https://blog.csdn.net/matrix_laboratory/article/details/72764621" target="_blank" rel="external">H264 Profile对比分析</a></p>
<p><strong>vpreset：</strong></p>
<p>用于调节编码速度和质量的平衡。
可以设置为：ultrafast,superfast,veryfast,faster,fast,medium,slow,slower,veryslow,placebo</p>
<p><strong>vparams：</strong></p>
<p>可以添加一些x264或者视频相关的参数。</p>
<ul>
<li>t：限制从输入文件读取的时长</li>
<li>coder：x264使用，熵编码相关参数。</li>
<li>b_strategy：x264使用，自适应的添加B帧数目，<code>Use only on first-pass</code>。</li>
<li>bf：<code>max number of B frames</code>。</li>
<li>refs：<code>Set reference frames to consider for motion compensation</code>。</li>
</ul>
<p><strong>实际上可以在这个参数中添加各种参数，而这些参数都会被添加在-preset后面。</strong></p>
<hr>
<h2 id="视频滤镜-vfilter"><a href="#视频滤镜-vfilter" class="headerlink" title="视频滤镜 vfilter"></a>视频滤镜 vfilter</h2><p><strong>i：</strong></p>
<p>表示输入，例如加水印时，就需要额外的图片作为输入。</p>
<p>可以有多个输入，并且输入也可以是流的形式，意思是可以支持多路流合并成为一路流。</p>
<p><strong>filter_complex：</strong></p>
<p>也就是FFmpeg的filter_complex，一个<code>filtergraph</code>，支持多个输入流。</p>
<p>使用它可以做各种事情，后面使用举例说明。</p>
<p>详细使用方法可以参考官方文档:<a href="http://ffmpeg.org/ffmpeg-filters.html#Filtergraph-syntax-1" target="_blank" rel="external">4.1 Filtergraph syntax</a></p>
<hr>
<h2 id="音频相关参数"><a href="#音频相关参数" class="headerlink" title="音频相关参数"></a>音频相关参数</h2><p><strong>acodec：</strong></p>
<p>音频编码器，通常使用 libfdk_aac 。</p>
<p><strong>abitrate：</strong></p>
<p>音频码率，单位kbps，<code>[16, 72] for libfdk_aac</code>。</p>
<p><strong>asample_rate：</strong></p>
<p>音频采样率，对于 flv和rtmp，只能设置为 44100,22050,11025,5512。</p>
<p><strong>achannels：</strong></p>
<p>声道，1表示单声道，2表示双声道。</p>
<p><strong>aparams：</strong></p>
<p>可以在里面填一些与音频相关的转码参数，同样的，这些参数会接在<code>achannels</code>(<code>-ac</code>)的后面。</p>
<ul>
<li>profile:a 与h264编码中的profile类似，这里支持 aac_low, aac_he, aac_he_v2 这几种参数的设置。</li>
<li>bsf:a 表示<code>Bitstream Filters</code>，详细参考<a href="http://ffmpeg.org/ffmpeg-all.html#Bitstream-Filters" target="_blank" rel="external">18 Bitstream Filters</a>。</li>
</ul>
<hr>
<h1 id="转码配置举例"><a href="#转码配置举例" class="headerlink" title="转码配置举例"></a>转码配置举例</h1><hr>
<h2 id="改变视频分辨率"><a href="#改变视频分辨率" class="headerlink" title="改变视频分辨率"></a>改变视频分辨率</h2><p><strong>方法一：</strong></p>
<p>使用<code>vwidth</code>和<code>vheight</code>参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">vhost www.transcode.com &#123;</div><div class="line">    transcode &#123;</div><div class="line">        enabled      on;</div><div class="line">        ffmpeg      ./objs/ffmpeg/bin/ffmpeg;</div><div class="line">        engine 1080_60  &#123;</div><div class="line">            enabled         on;</div><div class="line">            vfilter &#123;</div><div class="line">            &#125;</div><div class="line">            vcodec          libx264;</div><div class="line">            vbitrate        5000;</div><div class="line">            vfps            60;</div><div class="line">            vwidth          1920;</div><div class="line">            vheight         1080;</div><div class="line">            vthreads        12;</div><div class="line">            vprofile        main;</div><div class="line">            vpreset         fast;</div><div class="line">            vparams &#123;</div><div class="line">            &#125;</div><div class="line">            acodec          libfdk_aac;</div><div class="line">            abitrate        50;</div><div class="line">            asample_rate    44100;</div><div class="line">            achannels       2;</div><div class="line">            aparams &#123;</div><div class="line">            &#125;</div><div class="line">            output          rtmp://192.168.90.229:2019/persist?vhost=lrm.test.com/long_1080_60;</div><div class="line">        &#125;</div><div class="line">        engine 720_60  &#123;</div><div class="line">            enabled         on;</div><div class="line">            vfilter &#123;</div><div class="line">            &#125;</div><div class="line">            vcodec          libx264;</div><div class="line">            vbitrate        3500;</div><div class="line">            vfps            60;</div><div class="line">            vwidth          1280;</div><div class="line">            vheight         720;</div><div class="line">            vthreads        12;</div><div class="line">            vprofile        main;</div><div class="line">            vpreset         fast;</div><div class="line">            vparams &#123;</div><div class="line">            &#125;</div><div class="line">            acodec          libfdk_aac;</div><div class="line">            abitrate        50;</div><div class="line">            asample_rate    44100;</div><div class="line">            achannels       2;</div><div class="line">            aparams &#123;</div><div class="line">            &#125;</div><div class="line">            output          rtmp://192.168.90.229:2019/persist?vhost=lrm.test.com/long_720_60;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面转码将视频转码成<code>1080P+60fps</code>和<code>720P+60fps</code>。</p>
<p><strong>方法二：</strong></p>
<p>使用<code>filter_complex</code>，在其中使用scale滤镜来缩减分辨率，并将<code>vwidth</code>和<code>vheight</code>设置为0。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">vhost www.transcode.com &#123;</div><div class="line">    transcode &#123;</div><div class="line">        enabled      on;</div><div class="line">        ffmpeg      ./objs/ffmpeg/bin/ffmpeg;</div><div class="line">        engine 720_60  &#123;</div><div class="line">            enabled         on;</div><div class="line">            vfilter &#123;</div><div class="line">                filter_complex  &apos;scale=1280:-1&apos;;</div><div class="line">            &#125;</div><div class="line">            vcodec          libx264;</div><div class="line">            vbitrate        3500;</div><div class="line">            vfps            60;</div><div class="line">            vwidth          0;</div><div class="line">            vheight         0;</div><div class="line">            vthreads        12;</div><div class="line">            vprofile        main;</div><div class="line">            vpreset         fast;</div><div class="line">            vparams &#123;</div><div class="line">            &#125;</div><div class="line">            acodec          libfdk_aac;</div><div class="line">            abitrate        50;</div><div class="line">            asample_rate    44100;</div><div class="line">            achannels       2;</div><div class="line">            aparams &#123;</div><div class="line">            &#125;</div><div class="line">            output          rtmp://192.168.90.229:2019/persist?vhost=lrm.test.com/long_720_60;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>结论：推荐使用方法二。</strong></p>
<p>如果输入视频不是16:9分辨率时，使用方法一转码视频造成画面拉伸，因为它的<code>vwidth</code>和<code>vheight</code>参数反映到FFmpeg中是<code>-s vwidth x vheight</code>，
使用-1时则会报错。而使用方法二则可以使用-1来维持原画面比例。</p>
<hr>
<h2 id="添加水印"><a href="#添加水印" class="headerlink" title="添加水印"></a>添加水印</h2><p>官方例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">vhost __defaultVhost__ &#123;</div><div class="line">    transcode &#123;</div><div class="line">        enabled     on;</div><div class="line">        ffmpeg      ./objs/ffmpeg/bin/ffmpeg;</div><div class="line">        engine ff &#123;</div><div class="line">            enabled         on;</div><div class="line">            vfilter &#123;</div><div class="line">                i               ./doc/ffmpeg-logo.png;</div><div class="line">                filter_complex      &apos;overlay=10:10&apos;;</div><div class="line">            &#125;</div><div class="line">            vcodec          libx264;</div><div class="line">            vbitrate        300;</div><div class="line">            vfps            20;</div><div class="line">            vwidth          768;</div><div class="line">            vheight         320;</div><div class="line">            vthreads        2;</div><div class="line">            vprofile        baseline;</div><div class="line">            vpreset         superfast;</div><div class="line">            vparams &#123;</div><div class="line">            &#125;</div><div class="line">            acodec          libfdk_aac;</div><div class="line">            abitrate        45;</div><div class="line">            asample_rate    44100;</div><div class="line">            achannels       2;</div><div class="line">            aparams &#123;</div><div class="line">            &#125;</div><div class="line">            output          rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现方法，使用<code>vfilter</code>，输入图片并使用滤镜<code>overlay</code>来完成。</p>
<hr>
<h2 id="CBR恒定编码实现"><a href="#CBR恒定编码实现" class="headerlink" title="CBR恒定编码实现"></a>CBR恒定编码实现</h2><p>先来看一下使用<code>bitrate</code>来控制码率的情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">vhost lrm.test.com &#123;</div><div class="line">    transcode &#123;</div><div class="line">        enabled      on;</div><div class="line">        ffmpeg      ./objs/ffmpeg/bin/ffmpeg;</div><div class="line">        engine ff &#123;</div><div class="line">            enabled         on;</div><div class="line">            vfilter &#123;</div><div class="line">                i               ./doc/ffmpeg-logo.png;</div><div class="line">                filter_complex  &apos;[1][0]scale2ref=w=iw/8:h=ow/mdar[scaled][0-out]; [0-out][scaled]overlay=x=main_w/10-w/2:y=main_h/10-h/2[over]; [over]scale=1280:-1&apos;;</div><div class="line">            &#125;</div><div class="line">            vcodec          libx264;</div><div class="line">            vbitrate        3500;</div><div class="line">            vfps            60;</div><div class="line">            vwidth          0;</div><div class="line">            vheight         0;</div><div class="line">            vthreads        12;</div><div class="line">            vprofile        main;</div><div class="line">            vpreset         fast;</div><div class="line">            vparams &#123;</div><div class="line">            &#125;</div><div class="line">            acodec          libfdk_aac;</div><div class="line">            abitrate        50;</div><div class="line">            asample_rate    44100;</div><div class="line">            achannels       2;</div><div class="line">            aparams &#123;</div><div class="line">            &#125;</div><div class="line">            output          rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里将<code>vbitrate</code>设置在3500，也就是我们希望码率可以控制在3500kbps，使用VLC播放器可以看到大概的统计效果：</p>
<p><img src="/images/media/FFmpeg/bitrate-1.png" alt="image" title="使用bitrate控制码率"></p>
<p>参数中虽然可以使用<code>bitrate</code>来指定码率，但是实际上这只是平均码率，但是实际码率还是会<strong>上下波动，并且范围也不小</strong>。</p>
<p>可以使用下面方法来实现<strong>CBR</strong>，也是FFmpeg文档中所述的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">vhost lrm.test.com &#123;</div><div class="line">    transcode &#123;</div><div class="line">        enabled      on;</div><div class="line">        ffmpeg      ./objs/ffmpeg/bin/ffmpeg;</div><div class="line">        engine ff &#123;</div><div class="line">            enabled         on;</div><div class="line">            vfilter &#123;</div><div class="line">                i               ./doc/ffmpeg-logo.png;</div><div class="line">                filter_complex  &apos;[1][0]scale2ref=w=iw/8:h=ow/mdar[scaled][0-out]; [0-out][scaled]overlay=x=main_w/10-w/2:y=main_h/10-h/2[over]; [over]scale=1280:-1&apos;;</div><div class="line">            &#125;</div><div class="line">            vcodec          libx264;</div><div class="line">            vbitrate        3500;</div><div class="line">            vfps            60;</div><div class="line">            vwidth          0;</div><div class="line">            vheight         0;</div><div class="line">            vthreads        12;</div><div class="line">            vprofile        main;</div><div class="line">            vpreset         fast;</div><div class="line">            vparams &#123;</div><div class="line">                maxrate:v     3500k;</div><div class="line">                minrate:v     3500k;</div><div class="line">                bufsize:v     3500k;</div><div class="line">            &#125;</div><div class="line">            acodec          libfdk_aac;</div><div class="line">            abitrate        50;</div><div class="line">            asample_rate    44100;</div><div class="line">            achannels       2;</div><div class="line">            aparams &#123;</div><div class="line">            &#125;</div><div class="line">            output          rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到上面配置中，增加设置<code>maxrate</code>，<code>minrate</code>，<code>bufsize</code>来配合控制视频的码率。</p>
<p><img src="/images/media/FFmpeg/bitrate-2.png" alt="image" title="增加设置`maxrate`，`minrate`，`bufsize`来配合控制视频的码率"></p>
<p>实际效果并不能固定码率，码率仍然在上下波动，但很明显能达到更小的波动范围。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      测试了一下ffmpeg中该如何去配置一些所需的转码配置。
    
    </summary>
    
      <category term="live" scheme="http://yoursite.com/categories/live/"/>
    
    
      <category term="live" scheme="http://yoursite.com/tags/live/"/>
    
      <category term="ffmpeg" scheme="http://yoursite.com/tags/ffmpeg/"/>
    
      <category term="srs" scheme="http://yoursite.com/tags/srs/"/>
    
  </entry>
  
  <entry>
    <title>srs中ffmpeg的按需转码实现方法</title>
    <link href="http://yoursite.com/2019/10/29/2019-10-29-srs_ffmpeg_transcode_as_needed/"/>
    <id>http://yoursite.com/2019/10/29/2019-10-29-srs_ffmpeg_transcode_as_needed/</id>
    <published>2019-10-29T04:50:00.000Z</published>
    <updated>2019-10-29T04:56:33.844Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>使用srs来进行直播流转码时，如果直接配置了转码，则无论有无客户端在拉取转码流，转码都会进行。
需要注意到，转码是一件<strong>非常消耗CPU资源</strong>的事情，所以实现按需转码（只有在转码流被拉取时，才进行转码）是一件非常值得的事情。</p>
<hr>
<h1 id="srs的FFmpeg转码时的推拉流逻辑"><a href="#srs的FFmpeg转码时的推拉流逻辑" class="headerlink" title="srs的FFmpeg转码时的推拉流逻辑"></a>srs的FFmpeg转码时的推拉流逻辑</h1><p>在srs的vhost中，可以配置transcode来使用FFmpeg对流进行转码。</p>
<p>例如下面配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">listen              1935;</div><div class="line">vhost www.transcode.com &#123;</div><div class="line">    transcode &#123;</div><div class="line">        enabled     on;</div><div class="line">        ffmpeg      ./objs/ffmpeg/bin/ffmpeg;</div><div class="line">        engine ff &#123;</div><div class="line">            enabled         on;</div><div class="line">            vcodec          copy;</div><div class="line">            acodec          copy;</div><div class="line">            output          rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假设一路流推送到<code>rtmp://www.transcode.com/testapp/teststream</code>，上面所配置的ffmpeg立即就会对这路流进行转码（即使没有人拉流），
因为它转码的逻辑是<code>拉流到FFmpeg-&gt;转码-&gt;推流到output所定义的地方</code>。</p>
<p>那么上面配置中的写法就表示：</p>
<ol>
<li>从 <code>rtmp://127.0.0.1:1935/testapp?vhost=www.transcode.com/teststream</code> 拉流。</li>
<li>转码。</li>
<li>推流到 <code>rtmp://127.0.0.1:1935/testapp?vhost=www.transcode.com/teststream_ff</code></li>
</ol>
<p>也就是转码后反推了一路流到 <code>www.transcode.com</code>这个vhost下面（由于output可以自定义，所以实际上想推到哪里都可以）。</p>
<p><strong>所以转码一旦开始，就会不断拉流，转码，推流，与有没有人在拉流没有关系，它会持续占用CPU资源。</strong></p>
<hr>
<h1 id="如何实现srs可控的FFmpeg转码"><a href="#如何实现srs可控的FFmpeg转码" class="headerlink" title="如何实现srs可控的FFmpeg转码"></a>如何实现srs可控的FFmpeg转码</h1><p><strong>首先</strong>，如果在一个vhost下同时配置 remote 和 transcode，则会出来不先拉原始流就无法拉取转码流的问题：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">vhost lrm.test.com &#123;</div><div class="line">    mode             remote;</div><div class="line">    origin           192.168.90.229:2019;</div><div class="line">    transcode &#123;</div><div class="line">        enabled     on;</div><div class="line">        ffmpeg      ./objs/ffmpeg/bin/ffmpeg;</div><div class="line">        engine ff &#123;</div><div class="line">            enabled         on;</div><div class="line">            vfilter &#123;</div><div class="line">            &#125;</div><div class="line">            vcodec          libx264;</div><div class="line">            vbitrate        3500;</div><div class="line">            vfps            60;</div><div class="line">            vwidth          1920;</div><div class="line">            vheight         1080;</div><div class="line">            vthreads        2;</div><div class="line">            vprofile        baseline;</div><div class="line">            vpreset         superfast;</div><div class="line">            vparams &#123;</div><div class="line">            &#125;</div><div class="line">            acodec          libfdk_aac;</div><div class="line">            abitrate        45;</div><div class="line">            asample_rate    44100;</div><div class="line">            achannels       2;</div><div class="line">            aparams &#123;</div><div class="line">            &#125;</div><div class="line">            output          rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上面的配置，如果不先拉取<code>rtmp://lrm.test.com/app/streamname</code>的未转码流，则无法拉取<code>rtmp://lrm.test.com/app/streamname_ff</code>的转码流，
并且只要转码一旦<strong>开始</strong>，就<strong>不会停止</strong>。</p>
<p>所以，如果想要实现可控转码，则只能通过需要转码时，再下发转码配置来实现，只通过srs本身来控制貌似不行。</p>
<p><strong>按需转码实现思路：</strong></p>
<ol>
<li>如何知道有用户拉流：<code>用户拉流触发srs的HTTPCallBack</code> -&gt; <code>开启转码</code>。</li>
<li>如何开启转码：在用于转码的srs节点上<code>下发ingest配置从origin拉取原始流</code> -&gt; <code>进行转码后将转码流推回origin</code>。</li>
</ol>
<p>所以这里的关键在于两点：使用<strong>HTTPCallBack</strong>来获知拉流信息;使用<strong>ingest</strong>来拉取原流进行转码，转码操作不会影响srs集群的任何配置。</p>
<p><strong>ingest配置一：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">vhost lrm.test.com &#123;</div><div class="line">    ingest livestream &#123;</div><div class="line">        enabled      on;</div><div class="line">        input &#123;</div><div class="line">            type    stream;</div><div class="line">            url     rtmp://192.168.90.229:2019/persist?vhost=lrm.test.com/long;</div><div class="line">        &#125;</div><div class="line">        ffmpeg      ./objs/ffmpeg/bin/ffmpeg;</div><div class="line">        engine 720_60 &#123;</div><div class="line">            enabled         on;</div><div class="line">            vfilter &#123;</div><div class="line">            &#125;</div><div class="line">            vcodec          libx264;</div><div class="line">            vbitrate        3500;</div><div class="line">            vfps            60;</div><div class="line">            vwidth          0;</div><div class="line">            vheight         0;</div><div class="line">            vthreads        12;</div><div class="line">            vprofile        main;</div><div class="line">            vpreset         fast;</div><div class="line">            vparams &#123;</div><div class="line">                   maxrate:v     3500k;</div><div class="line">                   minrate:v     3500k;</div><div class="line">                   bufsize:v     3500k;</div><div class="line">            &#125;</div><div class="line">            acodec          libfdk_aac;</div><div class="line">            abitrate        50;</div><div class="line">            asample_rate    44100;</div><div class="line">            achannels       2;</div><div class="line">            aparams &#123;</div><div class="line">            &#125;</div><div class="line">            output          rtmp://192.168.90.229:2019/persist?vhost=lrm.test.com/long_720_60;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>ingest配置二：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">vhost lrm.test.com &#123;</div><div class="line">    ingest livestream &#123;</div><div class="line">        enabled      on;</div><div class="line">        input &#123;</div><div class="line">            type    stream;</div><div class="line">            url     rtmp://192.168.90.229:2019/persist?vhost=lrm.test.com/long;</div><div class="line">        &#125;</div><div class="line">        ffmpeg      ./objs/ffmpeg/bin/ffmpeg;</div><div class="line">        engine 1 &#123;</div><div class="line">            enabled         off;</div><div class="line">            output          rtmp://127.0.0.1:2019/persist?vhost=www.transcode.com/long;</div><div class="line">        &#125;</div><div class="line">	    engine 2 &#123;</div><div class="line">	    enabled         off;</div><div class="line">            output          rtmp://127.0.0.1:2019/persist?vhost=www.transcode2.com/long;</div><div class="line"></div><div class="line">	    &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">vhost www.transcode.com &#123;</div><div class="line">    transcode &#123;</div><div class="line">    	enabled      off;</div><div class="line">	    ffmpeg      ./objs/ffmpeg/bin/ffmpeg;</div><div class="line">        engine 720_60 &#123;</div><div class="line">            enabled         on;</div><div class="line">            vfilter &#123;</div><div class="line">            &#125;</div><div class="line">            vcodec          libx264;</div><div class="line">            vbitrate        3500;</div><div class="line">            vfps            60;</div><div class="line">            vwidth          0;</div><div class="line">            vheight         0;</div><div class="line">            vthreads        12;</div><div class="line">            vprofile        main;</div><div class="line">            vpreset         fast;</div><div class="line">            vparams &#123;</div><div class="line">		maxrate:v     3500k;</div><div class="line">		minrate:v     3500k;</div><div class="line">                bufsize:v     3500k;</div><div class="line">            &#125;</div><div class="line">            acodec          libfdk_aac;</div><div class="line">            abitrate        50;</div><div class="line">            asample_rate    44100;</div><div class="line">            achannels       2;</div><div class="line">            aparams &#123;</div><div class="line">            &#125;</div><div class="line">            output          rtmp://192.168.90.229:2019/persist?vhost=lrm.test.com/long_720_60;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">vhost www.transcode2.com &#123;</div><div class="line">    transcode &#123;</div><div class="line">        enabled      on;</div><div class="line">        ffmpeg      ./objs/ffmpeg/bin/ffmpeg;</div><div class="line">        engine 720_60_1 &#123;</div><div class="line">            enabled         on;</div><div class="line">            vfilter &#123;</div><div class="line">                filter_complex  &apos;scale=1280:-1&apos;;</div><div class="line">            &#125;</div><div class="line">            vcodec          libx264;</div><div class="line">            vbitrate        3500;</div><div class="line">            vfps            60;</div><div class="line">            vwidth          0;</div><div class="line">            vheight         0;</div><div class="line">            vthreads        12;</div><div class="line">            vprofile        main;</div><div class="line">            vpreset         fast;</div><div class="line">            vparams &#123;</div><div class="line">                maxrate:v     3500k;</div><div class="line">                minrate:v     3500k;</div><div class="line">                bufsize:v     3500k;</div><div class="line">            &#125;</div><div class="line">            acodec          libfdk_aac;</div><div class="line">            abitrate        50;</div><div class="line">            asample_rate    44100;</div><div class="line">            achannels       2;</div><div class="line">            aparams &#123;</div><div class="line">            &#125;</div><div class="line">            output          rtmp://192.168.90.229:2019/persist?vhost=lrm.test.com/long_720_60_1;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>虽然两种方式其实可以达到一样的效果（方式一中也可以添加多个engine），哪种方便用哪一种。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      介绍一种使用srs实现按需转码的方法。
    
    </summary>
    
      <category term="live" scheme="http://yoursite.com/categories/live/"/>
    
    
      <category term="live" scheme="http://yoursite.com/tags/live/"/>
    
      <category term="srs" scheme="http://yoursite.com/tags/srs/"/>
    
  </entry>
  
  <entry>
    <title>golang中unsafe.Pointer的入门使用</title>
    <link href="http://yoursite.com/2019/09/30/2019-09-30-golang-unsafe_pointer/"/>
    <id>http://yoursite.com/2019/09/30/2019-09-30-golang-unsafe_pointer/</id>
    <published>2019-09-30T08:50:00.000Z</published>
    <updated>2019-10-14T10:16:33.660Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在做<a href="https://leetcode.com/problems/remove-duplicate-letters/" target="_blank" rel="external">316. Remove Duplicate Letters</a>遇到了[]byte转string的问题，
发现可以通过<code>unsafe.Pointer</code>来完成转换，由此产生了对golang中指针操作的兴趣。</p>
<hr>
<h1 id="byte转string"><a href="#byte转string" class="headerlink" title="[]byte转string"></a>[]byte转string</h1><p><strong>首先不通过指针直接转：</strong></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> b []<span class="keyword">byte</span> = []<span class="keyword">byte</span>&#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</div><div class="line">    <span class="keyword">var</span> str <span class="keyword">string</span> = <span class="keyword">string</span>(b)</div><div class="line">    fmt.Println(str)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>abc</p>
</blockquote>
<p>可以看到直接转是可以的，但是直接转整个[]byte会被<strong>复制</strong>一遍再给到string中，不是最高效率的做法。</p>
<p><strong>通过指针来转：</strong></p>
<p>注意如果直接转指针，go语言是不允许的：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> b []<span class="keyword">byte</span> = []<span class="keyword">byte</span>&#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</div><div class="line"><span class="keyword">var</span> str *<span class="keyword">string</span> = (*<span class="keyword">string</span>)(&amp;b)</div></pre></td></tr></table></figure>
<blockquote>
<p>Cannot convert expression of type <em>[]byte to type </em>string</p>
</blockquote>
<p>要想进行指针转换，需要使用unsafe.Pointer来中继：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> b []<span class="keyword">byte</span> = []<span class="keyword">byte</span>&#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</div><div class="line">    <span class="keyword">var</span> str <span class="keyword">string</span> = *(*<span class="keyword">string</span>)(unsafe.Pointer(&amp;b))</div><div class="line">    fmt.Println(str)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>abc</p>
</blockquote>
<p>上面的代码先将[]byte的指针转化为unsafe包中的ArbitraryType类型，然后就可以转化为任意别的类型的指针，
这里就将它转化为<code>*string</code>类型的指针。</p>
<p>因为string和[]byte的底层的c语言结构为：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">String</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">        byte*   str;</div><div class="line">        intgo   len;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span>	<span class="title">Slice</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">	byte*	<span class="built_in">array</span>;</div><div class="line">	uintgo	len;</div><div class="line">	uintgo	cap;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>所以可以直接从切片[]byte转到string也毫无违和感。</p>
<p>这样string与切片[]byte<strong>共用一片内存</strong>，本来go的string是不可变的，这里<strong>竟然</strong>可以使得string内容可变：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> b []<span class="keyword">byte</span> = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">3</span>, <span class="number">10</span>)</div><div class="line">    b[<span class="number">0</span>] = <span class="string">'a'</span></div><div class="line">    b[<span class="number">1</span>] = <span class="string">'b'</span></div><div class="line">    b[<span class="number">2</span>] = <span class="string">'c'</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> str *<span class="keyword">string</span> = (*<span class="keyword">string</span>)(unsafe.Pointer(&amp;b))</div><div class="line">    fmt.Println(*str)</div><div class="line"></div><div class="line">    <span class="comment">//// 直接append</span></div><div class="line">    <span class="comment">// b = append(b, 'd')</span></div><div class="line"></div><div class="line">    <span class="comment">// 先修改len，再赋值</span></div><div class="line">    <span class="keyword">var</span> bp *<span class="keyword">int</span> = (*<span class="keyword">int</span>)(unsafe.Pointer(<span class="keyword">uintptr</span>(unsafe.Pointer(&amp;b)) + unsafe.Sizeof(<span class="number">0</span>)))</div><div class="line">    *bp = <span class="number">4</span></div><div class="line">    b[<span class="number">3</span>] = <span class="string">'d'</span></div><div class="line"></div><div class="line">    fmt.Println(*str)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>abc<br>abcd</p>
</blockquote>
<hr>
<h1 id="string转-byte"><a href="#string转-byte" class="headerlink" title="string转[]byte"></a>string转[]byte</h1><p>同理可以直接转，也可以通过指针转：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> str <span class="keyword">string</span> = <span class="string">"abc"</span></div><div class="line">    <span class="keyword">var</span> b []<span class="keyword">byte</span> = ([]<span class="keyword">byte</span>)(str)</div><div class="line">    fmt.Println(b)</div><div class="line"></div><div class="line">    <span class="keyword">var</span> buf []<span class="keyword">byte</span> = *(*[]<span class="keyword">byte</span>)(unsafe.Pointer(&amp;str))</div><div class="line">    fmt.Println(buf)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>[97 98 99]<br>[97 98 99]</p>
</blockquote>
<p>注意到通过指针转化得到的[]byte切片是不能进行值得修的，因为str是不可修改的。</p>
<p>这里的buf的cap值是不确定的，因为string结构中只有两个属性，没有cap，有一种<strong>骚操作</strong>来转换：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> str <span class="keyword">string</span> = <span class="string">"abc"</span></div><div class="line">    xx := *(*[<span class="number">2</span>]<span class="keyword">uintptr</span>)(unsafe.Pointer(&amp;str))</div><div class="line">    <span class="keyword">var</span> buf []<span class="keyword">byte</span> = *(*[]<span class="keyword">byte</span>)(unsafe.Pointer(&amp;[<span class="number">3</span>]<span class="keyword">uintptr</span>&#123;xx[<span class="number">0</span>], xx[<span class="number">1</span>], xx[<span class="number">1</span>]&#125;))</div><div class="line">    fmt.Println(buf)</div><div class="line">    fmt.Printf(<span class="string">"%p %d %d\n"</span>, buf, <span class="built_in">len</span>(buf), <span class="built_in">cap</span>(buf))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>[97 98 99]<br>0x4c66e4 3 3</p>
</blockquote>
<p>这里把string当作一个<code>[2]uintptr</code>，通过它新建一个<code>[3]uintptr</code>，这样就得到了一个len和cap都为3的[]byte切片。</p>
<hr>
<h1 id="struct赋值"><a href="#struct赋值" class="headerlink" title="struct赋值"></a>struct赋值</h1><p>例子如下：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> V <span class="keyword">struct</span> &#123;</div><div class="line">    i <span class="keyword">int32</span></div><div class="line">    j <span class="keyword">int64</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> v *V = <span class="built_in">new</span>(V)</div><div class="line"></div><div class="line">    <span class="keyword">var</span> i *<span class="keyword">int32</span> = (*<span class="keyword">int32</span>)(unsafe.Pointer(v))</div><div class="line">    *i = <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> j *<span class="keyword">int64</span> = (*<span class="keyword">int64</span>)(unsafe.Pointer(<span class="keyword">uintptr</span>(unsafe.Pointer(v)) + unsafe.Offsetof(v.j)))</div><div class="line">    *j = <span class="number">2</span></div><div class="line"></div><div class="line">    fmt.Println(*v)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>{1 2}</p>
</blockquote>
<p>需要注意到go的struct与c语言一样有<strong>对齐机制</strong>，对于结构体V，它明显是按照<code>int64</code>也就是8字节对齐，
所以上面的代码取j的位置换一种写法也是一样的：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> j *<span class="keyword">int64</span> = (*<span class="keyword">int64</span>)(unsafe.Pointer(<span class="keyword">uintptr</span>(unsafe.Pointer(v)) + <span class="keyword">uintptr</span>(<span class="number">8</span>)))</div></pre></td></tr></table></figure>
<p>另外struct使用的是一块连续内存，可以看到下面的操作：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> V <span class="keyword">struct</span> &#123;</div><div class="line">    i <span class="keyword">int32</span></div><div class="line">    j <span class="keyword">int64</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> v *V = <span class="built_in">new</span>(V)</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> i *<span class="keyword">int32</span> = (*<span class="keyword">int32</span>)(unsafe.Pointer(v))</div><div class="line">    *i = <span class="number">1</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> k *<span class="keyword">int64</span> = (*<span class="keyword">int64</span>)(unsafe.Pointer(<span class="keyword">uintptr</span>(unsafe.Pointer(v)) + <span class="keyword">uintptr</span>(<span class="number">4</span>)))</div><div class="line">    *k = <span class="number">3</span> &lt;&lt; <span class="number">32</span></div><div class="line"></div><div class="line">    fmt.Println(*v)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>{1 3}</p>
</blockquote>
<p>这里的 i，j，k 在内存中的位置是这样的：</p>
<p><img src="/images/golang/unsafe_point-1.png" alt="image" title="i，j，k内存布局"></p>
<p>所以<code>*k = 3 &lt;&lt; 32</code>，这句话相当于把第9个字节变成了<code>1100 0000</code>，需要注意到这里是<strong>小端序</strong>（数据的低字节保存在内存的低地址）。
所以j的值就变成了3。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      使用unsafe.Pointer来进行一些指针操作。
    
    </summary>
    
      <category term="golang" scheme="http://yoursite.com/categories/golang/"/>
    
    
      <category term="golang" scheme="http://yoursite.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>rsyslog + Logrotate进行日志记录并切割压缩</title>
    <link href="http://yoursite.com/2019/09/26/2019-09-26-rsyslog-logrotate/"/>
    <id>http://yoursite.com/2019/09/26/2019-09-26-rsyslog-logrotate/</id>
    <published>2019-09-26T08:10:00.000Z</published>
    <updated>2019-09-30T10:15:43.124Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="目标描述"><a href="#目标描述" class="headerlink" title="目标描述"></a>目标描述</h1><p>Golang程序将日志写入到rsyslog的LOCAL0中。</p>
<p>所以这里要使用rsyslog记录来自LOCAL0的日志，几点需求：</p>
<ol>
<li>日志存储在<code>/xxx/程序名/程序名.log</code>下。</li>
<li>要对日志进行切割，压缩。</li>
</ol>
<p>这里主要需要研究的功能就是：</p>
<ol>
<li><code>rsyslog</code>的日志动态路径。</li>
<li><code>Logrotate</code>的定期日志切割。</li>
<li><code>Logrotate</code>的日志压缩。</li>
</ol>
<p>另外：</p>
<p>这里系统为<strong>Centos7</strong>，不涉及远程日志记录。</p>
<p>关于rsyslog和Logrotate的介绍网上有很多：</p>
<p><a href="https://blog.csdn.net/qq_34556414/article/details/81610534" target="_blank" rel="external">Linux rsyslog服务</a></p>
<p><a href="http://blog.itpub.net/31559985/viewspace-2286286/" target="_blank" rel="external">Rsyslog日志系统</a></p>
<p><a href="https://www.cnblogs.com/clsn/p/8428257.html" target="_blank" rel="external">日志切割之Logrotate</a></p>
<p><a href="https://www.jianshu.com/p/ec7f1626a3d3" target="_blank" rel="external">高效的log工具：Logrotate</a></p>
<hr>
<h1 id="rsyslog的配置"><a href="#rsyslog的配置" class="headerlink" title="rsyslog的配置"></a>rsyslog的配置</h1><hr>
<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>rsyslog的配置文件位于<code>/etc/rsyslog.conf</code>，</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="meta">#</span> Log all the mail messages in one place.</div><div class="line">mail.*                                                  -/var/log/maillog</div><div class="line"></div><div class="line"><span class="meta">#</span> Log cron stuff</div><div class="line">cron.*                                                  /var/log/cron</div><div class="line"></div><div class="line"><span class="meta">#</span> Everybody gets emergency messages</div><div class="line">*.emerg                                                 :omusrmsg:*</div><div class="line"></div><div class="line"><span class="meta">#</span> Save news errors of level crit and higher in a special file.</div><div class="line">uucp,news.crit                                          /var/log/spooler</div><div class="line"></div><div class="line"><span class="meta">#</span> Save boot messages also to boot.log</div><div class="line">local7.*                                                /var/log/boot.log</div><div class="line">...</div></pre></td></tr></table></figure>
<p>上面的配置中，所使用的<code>*</code>就表示通配，例如<code>mail.*</code>就表示来自<code>mail</code>的所有级别日志都记录到
<code>-/var/log/maillog</code>中。<code>*.emerg</code>则表示所有<code>emerg</code>级别以上的日志（其实<code>emerg</code>已经是最高级别）都发送给所有正在登陆的用户。</p>
<p>rsyslog有三种配置格式<code>basic</code>、<code>advanced</code>和<code>obsolete legacy</code>，它们可以在同一个配置文件中混用，但是官方建议尽量避免使用<code>obsolete legacy</code>配置格式，
因为这个不健康，官方原话：<code>Do not use obsolete legacy format. It will make your life miserable.</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> basic</div><div class="line">mail.info /var/log/mail.log</div><div class="line"></div><div class="line"><span class="meta">#</span> advanced</div><div class="line">mail.info action(type="omfile" File="/var/log/mail.log")</div><div class="line"></div><div class="line"><span class="meta">#</span> legacy（下面例子的含义和上面不一样，它定义一个Template）</div><div class="line"><span class="meta">#</span> 总之一般带着 $ 的语句格式都是 legacy</div><div class="line"><span class="meta">$</span>template DynFile,"/var/log/%HOSTNAME%/%programname%.log"</div></pre></td></tr></table></figure>
<p>这里如果要让自己的程序使用rsyslog来记录日志，那么就可以使用<code>LOCAL0~6</code>这些<strong>facility</strong>来进行我们的自定义日志记录，</p>
<hr>
<h2 id="配置日志动态路径"><a href="#配置日志动态路径" class="headerlink" title="配置日志动态路径"></a>配置日志动态路径</h2><p>例如一条在rsyslog接收到一条日志之后，希望它能将根据日志附带的tag信息，
将日志打印到 /logdir/tag/tag.log 文件，这就是动态日志路径。</p>
<p>要达到这个目的，使用rsyslog配置中的<strong>Templates</strong>语法结构即可。</p>
<p><a href="https://www.rsyslog.com/doc/master/configuration/templates.html" target="_blank" rel="external">Templates</a></p>
<p>这里可以使用<code>Templates</code>来定义一段字符串，字符串中可以带有变量，这样就可以达到日志记录位置随日志的tag信息而变化的目的。</p>
<p>修改 /etc/rsyslog.conf :</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">template(name="MyDynFile" type="string" string="/var/log/%programname%/%programname%.log")</div><div class="line"></div><div class="line">local0.*   action(type="omfile" dynaFile="MyDynFile")</div></pre></td></tr></table></figure>
<p>上面的配置中，首先定义了一个<strong>string</strong>类型的Template，然后将local0的所有日志输入到这个路径下的日志文件中，</p>
<p>这里的<code>%programname%</code>即表示：</p>
<blockquote>
<p>the “static” part of the tag, as defined by BSD syslogd. For example, when TAG is “named[12345]”, programname is “named”.</p>
</blockquote>
<p>也就是说这里将日志保存到<code>/var/log/%programname%/%programname%.log</code>路径之下，更多的字段可以参考<a href="https://www.rsyslog.com/doc/master/configuration/properties.html" target="_blank" rel="external">rsyslog Properties</a>。</p>
<p><strong>测试配置：</strong></p>
<p>首先使用命令看配置是否有语法错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /usr/sbin/rsyslogd -f /etc/rsyslog.conf -N1</div></pre></td></tr></table></figure>
<p>重启rsyslog服务：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo systemctl restart rsyslog</div></pre></td></tr></table></figure>
<p>测试配置是否达到预期：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> logger -t test -p local0.info "hello world"</div><div class="line"><span class="meta">$</span> cat /var/log/test/test.log</div><div class="line"></div><div class="line">Sep 23 11:38:32 node1 test: hello world</div></pre></td></tr></table></figure>
<p>可以看到这里动态日志路径配置成功。</p>
<hr>
<h1 id="Logrotate-配置"><a href="#Logrotate-配置" class="headerlink" title="Logrotate 配置"></a>Logrotate 配置</h1><p>上面完成了使用rsyslog来进行日志记录，但是如果不对日志进行切割压缩，日志的大小就会无限增长，不仅将来不好查询，而且占存储空间，
这里可以使用Logrotate来进行日志的切割与压缩。</p>
<p>Logrotate并不是一个一直运行的linux程序，它的自动运行是linux的计划任务cron来实现的，位于<code>/etc/cron.daily/logrotate</code>，
它每天执行一次。</p>
<p>而Logrotate的配置文件则位于<code>/etc/logrotate.conf</code>，这个配置文件里面又包含了目录<code>/etc/logrotate.d/</code>下的所有配置文件，
所有通常在<code>/etc/logrotate.d/</code>目录下来添加自定义的配置文件。</p>
<p><strong>切割日志</strong>：</p>
<ul>
<li>方法一：将原日志文件重命名，重新创建新的日志文件，通知使用此日志的进程使用新的日志文件。对应Logrotate中的<code>create</code>。</li>
<li>方法二：先将原日志文件复制，然后截断原文件，这样不需要通知使用此日志的进程，但两个操作之间有短暂的时间间隙，可能会丢失日志。对应Logrotate中的<code>copytruncate</code>。</li>
<li>方法三：只复制原日志文件。对应Logrotate中的<code>copy</code>。</li>
</ul>
<p>这里之所以有三种切割日志的方法，原因在于当一个程序获取到一个文件句柄并向里面写入数据时，即使此时文件名发生了变化，
也不会影响之前的文件句柄的使用，程序仍然可以通过这个文件句柄写入数据到此文件中，如果不对原程序发出通知，让其重新获取文件句柄，
那么这个日志文件的大小就会继续增长。</p>
<p><strong>压缩日志</strong>：经过日志切割，原日志文件已经重命名，已经没有进程再继续使用它，这时便可以进行任意的操作，想要压缩就可以直接进行压缩。</p>
<p><strong>rotate</strong>：保留日志文件的数量（轮转数量）。例如rotate为3，切割出来日志文件为<code>log.1</code>、<code>log.2</code>和<code>log.3</code>，则下一次再进行切割时，
会将<code>log.3</code>删除，<code>log.2</code>重命名为<code>log.3</code>，<code>log.1</code>重命名为<code>log.2</code>，新切割出来的日志文件命名为<code>log.1</code>。</p>
<hr>
<h2 id="Logrotate的具体配置。"><a href="#Logrotate的具体配置。" class="headerlink" title="Logrotate的具体配置。"></a>Logrotate的具体配置。</h2><p>这里添加一个新的配置文件到<code>/etc/logrotate.d/</code>目录下，内容如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/var/log/*/*.log &#123;</div><div class="line">    create 0644 root root   // 新创建日志文件的权限</div><div class="line">    daily                   // 每天执行一次</div><div class="line">    rotate 65535            // 轮转数量 65535，基本等于存储所有日志</div><div class="line">    size 1M                 // 超过1M才进行切割</div><div class="line">    dateext                 // 使用日期作为后缀</div><div class="line">    dateformat -%Y%m%d.%s   // 定义日期后缀的格式</div><div class="line">    missingok               // 没有找到日志文件也OK</div><div class="line">    notifempty              // not ifempty 如过日志文件为空，则不切割</div><div class="line">    compress                // 切割后进行压缩</div><div class="line">    sharedscripts           // 脚本只执行一次</div><div class="line">    postrotate              // 脚本，用于通知rsyslog使用新的日志文件</div><div class="line">        /bin/kill -HUP `cat /var/run/syslogd.pid 2&gt; /dev/null` 2&gt; /dev/null || true</div><div class="line">    endscript</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里首先配置的路径为<code>/var/log/*/*.log</code>，因为上面rsyslog将LOCAL0的日志记录到了<code>/var/log/%programname%/%programname%.log</code>，
这样便能够通配到所有LOCAL0的日志文件。</p>
<p>注意到这里的最后几句配置：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">postrotate              // 脚本，用于通知rsyslog使用新的日志文件</div><div class="line">    /bin/kill -HUP `cat /var/run/syslogd.pid 2&gt; /dev/null` 2&gt; /dev/null || true</div><div class="line">endscript</div></pre></td></tr></table></figure>
<p>其中夹在<code>postrotate</code>和<code>endscript</code>中间的就是脚本，<code>postrotate</code>表示脚本在rotate之后运行，也就是此时已经将原日志文件重命名，
并且创建了新日志文件，但是还没有对原日志文件进行压缩。脚本中使用<code>kill -HUP</code>来通知rsyslog使用新日志文件，脚本执行完毕后，
Logrotate将对原日志文件使用gzip进行压缩。</p>
<p><strong>这里切割出来的日志文件将保存在与原日志文件同一目录下</strong>，如果想要将切割出来的日志文件保存到别的目录，可以添加下面的配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">olddir   /var/log/old</div></pre></td></tr></table></figure>
<p>这样切割下来的日志文件就会存储在<code>/var/log/old</code>目录之下（old目录需要手动创建）。</p>
<hr>
<h2 id="Logrotate-日志压缩"><a href="#Logrotate-日志压缩" class="headerlink" title="Logrotate 日志压缩"></a>Logrotate 日志压缩</h2><p>默认情况下，Logrotate使用gzip进行压缩，当然也可以配置其它的压缩工具。</p>
<p>如果要使用<code>bzip2</code>来进行压缩，则可以使用下面的配置：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">compress</div><div class="line">compresscmd  /usr/bin/bzip2</div><div class="line">compressext  .bz2</div><div class="line">compressoptions -9</div></pre></td></tr></table></figure>
<p>那么在压缩日志时，就会使用<code>/usr/bin/bzip2 -9</code>来进行压缩。</p>
<p>使用bzip2可以达到更大的压缩比，但是在压缩过程中也会消耗更多的CPU。</p>
<p>同理也可以配置成其它的压缩工具。</p>
<hr>
<h2 id="Logrotate-定期执行"><a href="#Logrotate-定期执行" class="headerlink" title="Logrotate 定期执行"></a>Logrotate 定期执行</h2><p>Logrotate通过cron来定期运行，默认配置在<code>/etc/cron.daily/logrotate</code>，也就是默认每天执行一次。</p>
<p>使用下面命令可以让Logrotate立即执行某一配置，而不用等待计划任务：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 立即执行syslog配置</div><div class="line"><span class="meta">$</span> logrotate /etc/logrotate.d/syslog</div><div class="line"></div><div class="line">// 使用debug模式执行，并不改变和生成任何日志文件</div><div class="line"><span class="meta">$</span> logrotate -d /etc/logrotate.d/syslog</div><div class="line"></div><div class="line">// 强制执行，忽略size参数</div><div class="line"><span class="meta">$</span> logrotate -f /etc/logrotate.d/syslog</div></pre></td></tr></table></figure>
<p>如果想要更灵活的执行时间配置，就可以在cron中来添加，例如想要Logrotate每分钟执行一次，则可以在<code>/etc/crontab</code>中进行配置：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo vim /etc/crontab</div><div class="line"><span class="meta">$</span> cat /etc/crontab</div><div class="line"></div><div class="line">SHELL=/bin/bash</div><div class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</div><div class="line">MAILTO=root</div><div class="line"></div><div class="line"><span class="meta">#</span> For details see man 4 crontabs</div><div class="line"></div><div class="line"><span class="meta">#</span> Example of job definition:</div><div class="line"><span class="meta">#</span> .---------------- minute (0 - 59)</div><div class="line"><span class="meta">#</span> |  .------------- hour (0 - 23)</div><div class="line"><span class="meta">#</span> |  |  .---------- day of month (1 - 31)</div><div class="line"><span class="meta">#</span> |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</div><div class="line"><span class="meta">#</span> |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</div><div class="line"><span class="meta">#</span> |  |  |  |  |</div><div class="line"><span class="meta">#</span> *  *  *  *  * user-name  command to be executed</div><div class="line">*/1  *  *  *  *   root    logrotate /etc/logrotate.d/syslog</div></pre></td></tr></table></figure>
<p>这样就可以使得Logrotate每分钟执行一次。</p>
<hr>
<h1 id="配置总结"><a href="#配置总结" class="headerlink" title="配置总结"></a>配置总结</h1><p><strong>rsyslog：</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span>umask 0000</div><div class="line">template(name="MyDynFile" type="string" string="/data1/log/%programname%/%programname%.log")</div><div class="line">local0.*     action(type="omfile" dynaFile="MyDynFile" dirCreateMode="0755" fileCreateMode="0644" ioBufferSize="64K")</div></pre></td></tr></table></figure>
<p>这里的<code>umask</code>配合<code>dirCreateMode</code>和<code>fileCreateMode</code>来使用，这样便可指定创建出来的文件夹与文件的默认权限。</p>
<p><strong>Logrotate：</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/data1/log/*/*.log &#123;</div><div class="line">    create 0644 root root</div><div class="line">    daily</div><div class="line">    rotate 65535</div><div class="line">    size 1M</div><div class="line">    dateext</div><div class="line">    dateformat -%Y%m%d.%s</div><div class="line">    missingok</div><div class="line">    notifempty</div><div class="line">    compress</div><div class="line">    sharedscripts</div><div class="line">    postrotate</div><div class="line">        /bin/kill -HUP `cat /var/run/syslogd.pid 2&gt; /dev/null` 2&gt; /dev/null || true</div><div class="line">    endscript</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="补充：docker内使用rsyslog-Logrotate"><a href="#补充：docker内使用rsyslog-Logrotate" class="headerlink" title="补充：docker内使用rsyslog + Logrotate"></a>补充：docker内使用rsyslog + Logrotate</h1><p>今天要在docker中配置rsyslog + Logrotate，发现centos7的docker中没有自带rsyslog和cron，并且没有systemd，所以不能通过systemctl来操作服务。</p>
<p>首先需要安装rsyslog和cron：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> yum install -y rsyslog cronie</div></pre></td></tr></table></figure>
<p><strong>非常重要的一点在于：</strong>rsyslog 默认通过 journal 读取日志信息，但CentOS镜像默认并未安装systemd和journald。</p>
<p>首先kill掉正在运行的rsyslog进程，然后修改配置：</p>
<ul>
<li>注释<code>$ModLoad imjournal</code></li>
<li>注释<code>$IMJournalStateFile imjournal.state</code></li>
<li>将<code>$OmitLocalLogging on</code>改为<code>$OmitLocalLogging off</code></li>
<li>将journal的配置删除：<code>rm -rf /etc/rsyslog.d/listen.conf</code></li>
</ul>
<p>启动rsyslog：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># rsyslogd</div></pre></td></tr></table></figure>
<p>启动cron：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># crond</div></pre></td></tr></table></figure>
<hr>
<h1 id="补充：修改rsyslog的日志记录格式"><a href="#补充：修改rsyslog的日志记录格式" class="headerlink" title="补充：修改rsyslog的日志记录格式"></a>补充：修改rsyslog的日志记录格式</h1><p>首先可以看到默认的rsyslog的格式：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Sep 30 17:21:49 localhost test: Hello World!!!</div></pre></td></tr></table></figure>
<p>它所对应的配置格式是：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">template(name="FileFormat" type="string"</div><div class="line">         string= "%TIMESTAMP% %HOSTNAME% %syslogtag%%msg:::sp-if-no-1st-sp%%msg:::drop-last-lf%\n"</div><div class="line">        )</div></pre></td></tr></table></figure>
<p>可以看到其实有点儿丑，为了把它变得好看一点，需要新建一个template来定义它的格式。</p>
<p>官方文档中这部分定义的字段都可以使用:</p>
<ul>
<li><a href="https://www.rsyslog.com/doc/master/configuration/properties.html" target="_blank" rel="external">rsyslog Properties</a></li>
<li><a href="https://www.rsyslog.com/doc/master/configuration/property_replacer.html#property-options" target="_blank" rel="external">The Property Replacer</a></li>
</ul>
<p>这里定义的<code>template</code>如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">template(name="MyOutFmt" type="list") &#123;</div><div class="line">    constant(value="[")</div><div class="line">    property(name="syslogseverity-text")</div><div class="line">    constant(value="]")</div><div class="line"></div><div class="line">    constant(value="[")</div><div class="line">    property(name="timereported" dateformat="year")</div><div class="line">    constant(value="-")</div><div class="line">    property(name="timereported" dateformat="month")</div><div class="line">    constant(value="-")</div><div class="line">    property(name="timereported" dateformat="day")</div><div class="line">    constant(value=" ")</div><div class="line">    property(name="timereported" dateformat="hour")</div><div class="line">    constant(value=":")</div><div class="line">    property(name="timereported" dateformat="minute")</div><div class="line">    constant(value=":")</div><div class="line">    property(name="timereported" dateformat="second")</div><div class="line">    constant(value=" ")</div><div class="line">    property(name="timereported" dateformat="tzoffsdirection")</div><div class="line">    property(name="timereported" dateformat="tzoffshour")</div><div class="line">    property(name="timereported" dateformat="tzoffsmin")</div><div class="line">    constant(value="]")</div><div class="line"></div><div class="line">    constant(value="[")</div><div class="line">    property(name="programname" position.from="1" position.to="32")</div><div class="line">    constant(value="]")</div><div class="line">    constant(value=": ")</div><div class="line">    property(name="msg")</div><div class="line">    constant(value="\n")</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>配置输出文件的<code>template</code>为<code>MyOutFmt</code>：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">local0.*   action(type="omfile" dynaFile="MyDynFile" template="MyOutFmt"  dirCreateMode="0755" fileCreateMode="0644" ioBufferSize="64K")</div></pre></td></tr></table></figure>
<p>测试效果：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> logger -t test -p local0.info 'Hello World!!!'</div><div class="line"><span class="meta">$</span> logger -t test -p local0.warning 'Hello World!!!'</div><div class="line"><span class="meta">$</span> logger -t test -p local0.err 'Hello World!!!'</div><div class="line"></div><div class="line"><span class="meta">$</span> tail -n3 /data1/log/test/test.log</div><div class="line"></div><div class="line">[warning][2019-09-30 18:13:25 +0800][test]: Hello World!!!</div><div class="line">[err][2019-09-30 18:13:31 +0800][test]: Hello World!!!</div><div class="line">[err][2019-09-30 18:14:19 +0800][test]: Hello World!!!</div></pre></td></tr></table></figure>
<p>ok，顺眼多了。</p>
<hr>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.rsyslog.com/" target="_blank" rel="external">The rocket-fast Syslog Server</a></p>
<p><a href="https://linux.die.net/man/8/logrotate" target="_blank" rel="external">logrotate(8) - Linux man page</a></p>
<p><a href="http://www.mamicode.com/info-detail-2685573.html" target="_blank" rel="external">docker容器中使用rsyslogd</a></p>
]]></content>
    
    <summary type="html">
    
      在centos7下使用rsyslog + Logrotate进行日志记录
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="centos" scheme="http://yoursite.com/tags/centos/"/>
    
      <category term="rsyslog" scheme="http://yoursite.com/tags/rsyslog/"/>
    
      <category term="logrotate" scheme="http://yoursite.com/tags/logrotate/"/>
    
  </entry>
  
  <entry>
    <title>srs带ffmpeg的安装</title>
    <link href="http://yoursite.com/2019/09/18/2019-09-18-srs-ffmpeg/"/>
    <id>http://yoursite.com/2019/09/18/2019-09-18-srs-ffmpeg/</id>
    <published>2019-09-18T06:50:00.000Z</published>
    <updated>2019-09-18T06:51:55.618Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>主要记录一下如何成功在centos7下面编译安装带ffmpeg的srs，其中有一些小坑。</p>
<p>这里srs版本为<code>2.0.263</code>。</p>
<hr>
<h1 id="下载编译srs"><a href="#下载编译srs" class="headerlink" title="下载编译srs"></a>下载编译srs</h1><p>直接看github，<a href="https://github.com/ossrs/srs" target="_blank" rel="external">https://github.com/ossrs/srs</a></p>
<p>很简单的几步：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git clone https://github.com/ossrs/srs</div><div class="line"><span class="meta">$</span> cd srs/trunk</div><div class="line"><span class="meta">$</span> ./configure &amp;&amp; make</div></pre></td></tr></table></figure>
<p>那么上面就完成了srs的编译，但是没有带ffmpeg。</p>
<hr>
<h1 id="带ffmpeg"><a href="#带ffmpeg" class="headerlink" title="带ffmpeg"></a>带ffmpeg</h1><p>srs自带了ffmpeg，但是在编译的时候需要加上<code>--with-ffmpeg</code>，也就是：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure --with-ffmpeg &amp;&amp; make</div></pre></td></tr></table></figure>
<p>其中可能会报几个错，这里说一下我遇到的。</p>
<p><strong>问题一：</strong></p>
<p><strong>Found no assembler</strong>，提示缺少<strong>nasm</strong>。</p>
<p>去下一个安装就行，<a href="http://www.linuxfromscratch.org/blfs/view/8.2/general/nasm.html" target="_blank" rel="external">NASM-2.13.03</a></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> wget http://www.nasm.us/pub/nasm/releasebuilds/2.13.03/nasm-2.13.03.tar.xz</div><div class="line"><span class="meta">$</span> tar -xf nasm-2.13.03.tar.xz</div><div class="line"><span class="meta">$</span> mv nasm-2.13.03 nasm</div><div class="line"><span class="meta">$</span> cd nasm</div><div class="line"><span class="meta">$</span> ./configure --prefix=/usr &amp;&amp; make</div><div class="line"><span class="meta">$</span> sudo make install</div></pre></td></tr></table></figure>
<p><strong>问题二：</strong></p>
<p><strong>speex not found using pkg-config</strong></p>
<p>提示找不到<code>speex</code>。</p>
<p>但是其实<code>speex</code>就在<code>srs/trunk/objs/ffmpeg.src/speex-1.2rc1/</code>下面，可以看到其中有<code>speex.pc</code>就没错。那么设置一下路径即可：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> export PKG_CONFIG_PATH=/xxx/srs/trunk/objs/ffmpeg.src/speex-1.2rc1/</div></pre></td></tr></table></figure>
<p>然后这个问题就解决了。</p>
<p><strong>问题三：</strong></p>
<p><strong>bzlib requested but not found</strong></p>
<p>提示找不到<code>bzlib</code>，那么安装一下就行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo yum install -y bzip2-devel.x86_64</div></pre></td></tr></table></figure>
<p>解决上面三个问题，应该就能成功编译带ffmpeg的srs了。</p>
]]></content>
    
    <summary type="html">
    
      在centos7下带ffmpeg编译安装srs
    
    </summary>
    
      <category term="live" scheme="http://yoursite.com/categories/live/"/>
    
    
      <category term="live" scheme="http://yoursite.com/tags/live/"/>
    
      <category term="srs" scheme="http://yoursite.com/tags/srs/"/>
    
  </entry>
  
  <entry>
    <title>Golang基础学习</title>
    <link href="http://yoursite.com/2019/08/29/2019-08-29-golang-learn-1/"/>
    <id>http://yoursite.com/2019/08/29/2019-08-29-golang-learn-1/</id>
    <published>2019-08-29T06:23:00.000Z</published>
    <updated>2019-09-03T08:25:47.063Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>众所周知Java里面是没有指针的，但是有自动垃圾回收机制。C++是有指针的，但是没有自动垃圾回收。</p>
<p>Golang是一种新的语言，很多地方的设计借鉴了以前的语言，例如它是有指针的，并且有自动垃圾回收机制。</p>
<p>（主要代表着我需要进行指针的学习…）</p>
<hr>
<h1 id="Go语言基础学习"><a href="#Go语言基础学习" class="headerlink" title="Go语言基础学习"></a>Go语言基础学习</h1><p>这方面去看一些教程就好：</p>
<p>首先菜鸟教程，内容不多，比较简单和基础：</p>
<p><a href="https://www.runoob.com/go/go-tutorial.html" target="_blank" rel="external">Go 语言教程 | 菜鸟教程</a></p>
<p>然后可以看看知乎上是怎么推荐学习Go语言的：</p>
<p><a href="https://www.zhihu.com/question/30461290/answer/210414739" target="_blank" rel="external">系统学习GO，推荐几本靠谱的书?</a></p>
<p>然后还有官方的教程，有英文版的，也有中文版的，非常详细：</p>
<p><a href="https://golang.google.cn/doc/" target="_blank" rel="external">Documentation - The Go Programming Language</a></p>
<p><a href="https://go-zh.org/doc/" target="_blank" rel="external">文档 - Go 编程语言</a></p>
<p>当然看上面的东西估计很快就烦了，那么不想看上面的就<strong>直接看</strong>官方提供的这个，真是个有意思的东西:</p>
<p><a href="https://tour.go-zh.org/welcome/1" target="_blank" rel="external">Go 语言之旅</a></p>
<hr>
<h1 id="牛顿法（练习：循环与函数）"><a href="#牛顿法（练习：循环与函数）" class="headerlink" title="牛顿法（练习：循环与函数）"></a>牛顿法（练习：循环与函数）</h1><p>在教程<a href="https://tour.go-zh.org/flowcontrol/8" target="_blank" rel="external">练习：循环与函数</a>中，要求我们实现一个求解平方根的函数，
方法就是使用牛顿法，代码如下：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sqrt</span><span class="params">(x <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</div><div class="line">	z := <span class="number">1.0</span></div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">		z -= (z*z - x) / (<span class="number">2</span> * z)</div><div class="line">		fmt.Println(z)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> z</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	fmt.Println(Sqrt(<span class="number">1123415</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出为：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">561708</div><div class="line">280854.99999910983</div><div class="line">140429.49999065354</div><div class="line">70218.74992055642</div><div class="line">35117.37435503582</div><div class="line">17574.682322665183</div><div class="line">8819.302336487126</div><div class="line">4473.341863784877</div><div class="line">2362.238687969266</div><div class="line">1418.9054334516886</div><div class="line">1418.9054334516886</div></pre></td></tr></table></figure>
<p>可以看到通过牛顿法，基本在10次迭代以内就可以计算出十分精确的平方根。</p>
<p><strong>牛顿法原理：</strong></p>
<p>牛顿法可以用于求解方程的根，当一个方程的根不好直接求解时，就可以使用牛顿法来进行迭代求解。</p>
<p>对于一个方程，需要求解 $x$ 的值：</p>
<script type="math/tex; mode=display">
f(x) = 0</script><p>那么首先利用泰勒展开来对 $f(x)$ 进行展开，这里从 $x_0$ 进行展开，并且只展开到一阶：</p>
<script type="math/tex; mode=display">
f(x) \approx f(x_0) + (x - x_0)f'(x_0)</script><p>那么就可以使用这个近似式来求解原方程的近似解：</p>
<script type="math/tex; mode=display">
f(x_0) + (x - x_0)f'(x_0) = 0</script><script type="math/tex; mode=display">
f(x_0) + xf'(x_0) - x_0 f'(x_0) = 0</script><script type="math/tex; mode=display">
xf'(x_0) = x_0f'(x_0) - f(x_0)</script><script type="math/tex; mode=display">
x = x_0 - \frac{f(x_0)}{f'(x_0)}</script><p>注意到 $f’(x_0)$ 就是原函数 $f(x)$ 在 $x_0$ 这点的斜率，那么其实在这一点上的切线方程就可以写为：</p>
<script type="math/tex; mode=display">
y - f(x_0) = f'(x_0)(x - x_0)</script><p>那么对于 $x = x_0 - \frac{f(x_0)}{f’(x_0)}$ 这一点，将它代入切线方程，求出它在切线上所对应的 $y$ ：</p>
<script type="math/tex; mode=display">
y - f(x_0) = f'(x_0)(x_0 - \frac{f(x_0)}{f'(x_0)} - x_0)</script><script type="math/tex; mode=display">
y - f(x_0) = -f(x_0)</script><script type="math/tex; mode=display">
y = 0</script><p>也就是对应切线上的点 $(x_0 - \frac{f(x_0)}{f’(x_0)}, 0)$ ，画出图可以看出对应如下：</p>
<div align="center"><img src="/images/golang/practice-1_1.png" style="zoom:70%" title="牛顿法"></div>

<p>从图中可以看到观察到，这里所需要求解的点为曲线与x轴所相交的那个点 $x$ （y为0，也就是 $f(x)=0$ ）。
虽然图中的 $x_{n+1}$ 并不是所需要求得点 $x$ ，但是它比 $x_n$ 更加接近 $x$ 。</p>
<p>所以这里就可以通过迭代来求解原方程的根，这一次从 $x_{n+1}$ 进行泰勒展开来求得下一个点。</p>
<p><strong>回到练习题：</strong></p>
<p>求解平方根，即方程 $x^2 = y$ 的解，即 $f(x) = x^2 - y$ ，代入上面的式子 $x = x_0 - \frac{f(x_0)}{f’(x_0)}$ ，
可以推出：</p>
<script type="math/tex; mode=display">
x_{n+1} = x_n - \frac{x_n^2 - y}{2x_n}</script><script type="math/tex; mode=display">
x_{n+1} = \frac{x_n^2 + y}{2x_n}</script><p>题目中用的上面的形式，使用下面的形式其实也可以求解，但是两种方法的结果有细微的差别。
估计是考虑到溢出的问题吧，减法在这里可以保证更好的精度。</p>
<hr>
<h1 id="最大公约数与最小公倍数（练习题：最小众倍数）"><a href="#最大公约数与最小公倍数（练习题：最小众倍数）" class="headerlink" title="最大公约数与最小公倍数（练习题：最小众倍数）"></a>最大公约数与最小公倍数（练习题：最小众倍数）</h1><p><a href="https://www.nowcoder.com/questionTerminal/792b17400b1b4915bb13c872e7ba48f7?toCommentId=3765769" target="_blank" rel="external">牛客-最小众倍数</a></p>
<p>最小众倍数：即是三个数的最小公倍数。</p>
<p>题目给了 a，b，c，d，e 一共5个数，求它们的最小众倍数中最小的那一个。</p>
<p><strong>方法一</strong>：暴力搜索。复杂度等于<strong>搜索下限</strong>减去<strong>上限</strong>：</p>
<ul>
<li>搜索下限：第3大的数。</li>
<li>搜索上限：前3小的数的乘积。</li>
</ul>
<hr>
<p><strong>方法二</strong>：寻找所有三个数的组合的最小众倍数，取其中最小的那个。复杂度等于O(n^3)，n为输入数的个数，本题 n = 5。</p>
<p>如何求3个数a,b,c的最小众倍数？</p>
<p><strong>第一种求法：</strong></p>
<ul>
<li>求出<code>b*c</code>,<code>a*c</code>的最大公约数A;</li>
<li>求出<code>a*c</code>,<code>a*b</code>的最大公约数B;</li>
<li>求出A,B的最大公约数k;</li>
<li>使用<code>(a*b*c) / k</code>即得到结果。</li>
</ul>
<p>这个想法就是，对于 $C = abc$ ：</p>
<script type="math/tex; mode=display">
(bc)a=C \\
(ac)b=C \\
(ab)c=C</script><p>假设最小众倍数为 $D$ ，那么 $C$ 一定是 $D$ 的整数倍 $k$，即 $C = kD$ ：</p>
<script type="math/tex; mode=display">
(bc)a=kD \\
(ac)b=kD \\
(ab)c=kD</script><p>也就是：</p>
<script type="math/tex; mode=display">
\frac{(bc)}{k}a=D \\
\frac{(ac)}{k}b=D \\
\frac{(ab)}{k}c=D</script><p>那么 $k$ 就是能同时整除 $bc,ac,ab$ 的最大的数，也就是它们的最大众约数，
也就可以通过 $bc,ac$ 的最大公约数 $A$ ， $ac,ab$ 的最大公约数B，再求 $A,B$ 的最大公约数 $k$ 即可：</p>
<script type="math/tex; mode=display">
D = \frac{abc}{GCD(GCD(bc,ac), GCD(ac,ab))}</script><p>两个数的最大公约数求法在之前的博客中有写<a href="http://longrm.com/2017/11/20/2017-11-20-leetcode_149/#%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0" target="_blank" rel="external">LeetCode 149 Max Points on a Line</a></p>
<p><strong>第二种求法：</strong></p>
<ul>
<li>求出a，b的最小公倍数A；</li>
<li>求出A，c的最小公倍数D；</li>
<li>D就是a，b，c的最小众倍数。</li>
</ul>
<p>首先，对于a，b的最小公倍数A：</p>
<script type="math/tex; mode=display">
x_1 a = A \\
x_2 b = A</script><p>然后对于A，c的最小公倍数D：</p>
<script type="math/tex; mode=display">
x_3 A = D \\
x_4 c = D</script><p>上面合在一起，即：</p>
<script type="math/tex; mode=display">
x_1 x_3 a = D \\
x_2 x_3 b = D \\
x_4 c = D</script><p>注意到由于最小公倍数的性质，$x_1$ 与 $x_2$ 互质，$x_3$ 与 $x_4$ 互质。</p>
<p>如果 $D$ 是a，b，c的最小众倍数，则 $x_1 x_3$ ，$x_2 x_3$，$x_4$ 的最大众约数为 1 。</p>
<p>这里使用<strong>反证</strong>，<strong>假设</strong> $x_1 x_3$ ，$x_2 x_3$，$x_4$ 的最大众约数不为 1 。</p>
<p>由于$x_3$ 与 $x_4$ 互质，那么只能 $x_1$ 、 $x_2$ 与 $x_4$ 存在不为 1 的最大公约数 $S$ ：</p>
<script type="math/tex; mode=display">
x_1 = k_1 S \\
x_2 = k_2 S \\
x_4 = k_3 S</script><p>也就是 $x_1$ 与 $x_2$ 存在最大公约数 $S$ ，与原条件 $x_1$ 与 $x_2$ 互质<strong>相矛盾</strong>。</p>
<p>所以 $x_1 x_3$ ，$x_2 x_3$，$x_4$ 的最大众约数为 1 ，即 $D$ 是a，b，c的最小众倍数。</p>
<script type="math/tex; mode=display">
D = LCM(LCM(a, b), c)</script><p>同理，使用公约数的解法可以改写为：</p>
<script type="math/tex; mode=display">
D = \frac{abc}{GCD(GCD(ab,bc), ac)}</script><p><strong>对于两个数的最小公倍数：</strong></p>
<p>对于a，b的最小公倍数A ：</p>
<script type="math/tex; mode=display">
k_1 a = A \\
k_2 b = A</script><p>注意 $k_1$ 与 $k_2$ 互质，假如a，b的最大公约数为 $S$ ：</p>
<script type="math/tex; mode=display">
k_1 (h_1 S) = A \\
k_2 (h_2 S) = A</script><p>注意到 $h_1$ 与 $h_2$ 互质，那么这里就可以推出：</p>
<script type="math/tex; mode=display">
k_1 (h_1 S) = k_2 (h_2 S) \\
k_1 h_1 = k_2 h_2 \\
k_1= \frac{h_2}{h_1} k_2</script><p>注意 $k_1$ 与 $k_2$ 互质，$h_1$ 与 $h_2$ 互质，所以 $\frac{h_2}{h_1}$ 必然等于 $\frac{k_1}{k_2}$ ，所以：</p>
<script type="math/tex; mode=display">
k_1 = h_2 \\
k_2 = h_1</script><p>所以：</p>
<script type="math/tex; mode=display">
k_1 a = h_2 (h_1 S) = A \\
\frac{(h_1 S) (h_2 S)}{S} = A \\
\frac{ab}{S} = A \\
\frac{ab}{GCD(a, b)} = A</script><p>即a，b的最小公倍数等于它们的乘积除以它们的最大公约数。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">LCM</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> (a*b) / GCD(a, b)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">GCD</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> c <span class="keyword">int</span></div><div class="line">    <span class="keyword">for</span> b != <span class="number">0</span> &#123;</div><div class="line">        c = a % b</div><div class="line">        a = b</div><div class="line">        b = c</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>代码，求一个数组的最小众倍数：</strong></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">const</span> MinInt = <span class="keyword">int</span>(^<span class="keyword">uint</span>(<span class="number">0</span>) &gt;&gt; <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">zbsUseGCD</span><span class="params">(seq *[]<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">    min := MinInt</div><div class="line">    n := <span class="built_in">len</span>(*seq)</div><div class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</div><div class="line">        <span class="keyword">for</span> j := i+<span class="number">1</span>; j &lt; n; j++ &#123;</div><div class="line">            <span class="keyword">for</span> k := j+<span class="number">1</span>; k &lt; n; k++ &#123;</div><div class="line">                zbsTmp := findZBSUseGCD((*seq)[i], (*seq)[j], (*seq)[k])</div><div class="line">                <span class="keyword">if</span> zbsTmp &lt; min &#123;</div><div class="line">                    min = zbsTmp</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> min</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">zbsUseLCM</span><span class="params">(seq *[]<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">    min := MinInt</div><div class="line">    n := <span class="built_in">len</span>(*seq)</div><div class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</div><div class="line">        <span class="keyword">for</span> j := i+<span class="number">1</span>; j &lt; n; j++ &#123;</div><div class="line">            <span class="keyword">for</span> k := j+<span class="number">1</span>; k &lt; n; k++ &#123;</div><div class="line">                zbsTmp := findZBSUseLCM((*seq)[i], (*seq)[j], (*seq)[k])</div><div class="line">                <span class="keyword">if</span> zbsTmp &lt; min &#123;</div><div class="line">                    min = zbsTmp</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> min</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findZBSUseGCD</span><span class="params">(a, b, c <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> (a*b*c) / GCD(GCD(a*b, b*c), a*c)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findZBSUseLCM</span><span class="params">(a, b, c <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> LCM(a, LCM(b, c))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">LCM</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> (a*b) / GCD(a, b)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">GCD</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> c <span class="keyword">int</span></div><div class="line">    <span class="keyword">for</span> b != <span class="number">0</span> &#123;</div><div class="line">        c = a % b</div><div class="line">        a = b</div><div class="line">        b = c</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="练习：Web-爬虫"><a href="#练习：Web-爬虫" class="headerlink" title="练习：Web 爬虫"></a>练习：Web 爬虫</h1><blockquote>
<p>修改 Crawl 函数来并行地抓取 URL，并且保证不重复。</p>
</blockquote>
<ul>
<li>使用map和互斥锁来保证URL的唯一抓取。</li>
<li>使用管道或者<code>sync.WaitGroup</code>来实现主线程等待子线程结束。</li>
</ul>
<p>代码一：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"sync"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Fetcher <span class="keyword">interface</span> &#123;</div><div class="line">    <span class="comment">// Fetch 返回 URL 的 body 内容，并且将在这个页面上找到的 URL 放到一个 slice 中。</span></div><div class="line">    Fetch(url <span class="keyword">string</span>) (body <span class="keyword">string</span>, urls []<span class="keyword">string</span>, err error)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> SafeCounter <span class="keyword">struct</span> &#123;</div><div class="line">    v <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></div><div class="line">    mux sync.Mutex</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Inc 增加给定 key 的计数器的值。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *SafeCounter)</span> <span class="title">set</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</div><div class="line">    c.mux.Lock()</div><div class="line">    <span class="keyword">defer</span> c.mux.Unlock()</div><div class="line">    <span class="comment">// Lock 之后同一时刻只有一个 goroutine 能访问 c.v</span></div><div class="line">    <span class="keyword">if</span> c.v[key] == <span class="number">0</span> &#123;</div><div class="line">        c.v[key]++</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Crawl 使用 fetcher 从某个 URL 开始递归的爬取页面，直到达到最大深度。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Crawl</span><span class="params">(url <span class="keyword">string</span>, sc *SafeCounter, fetcher Fetcher, ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> !sc.set(url) &#123;</div><div class="line">        ch &lt;- <span class="number">1</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    body, urls, err := fetcher.Fetch(url)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        fmt.Println(err)</div><div class="line">        ch &lt;- <span class="number">1</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    fmt.Printf(<span class="string">"found: %s %q\n"</span>, url, body)</div><div class="line">    <span class="keyword">for</span> _, u := <span class="keyword">range</span> urls &#123;</div><div class="line">        <span class="keyword">go</span> Crawl(u, sc, fetcher, ch)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> <span class="keyword">range</span> urls &#123;</div><div class="line">        &lt;-ch</div><div class="line">    &#125;</div><div class="line">    ch &lt;- <span class="number">1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</div><div class="line">        fmt.Println(<span class="string">"-------------------------"</span>)</div><div class="line">        Crawl(<span class="string">"https://golang.org/"</span>, &amp;SafeCounter&#123;v: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)&#125;, fetcher, <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>))</div><div class="line">        time.Sleep(time.Millisecond * <span class="number">50</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// fakeFetcher 是返回若干结果的 Fetcher。</span></div><div class="line"><span class="keyword">type</span> fakeFetcher <span class="keyword">map</span>[<span class="keyword">string</span>]*fakeResult</div><div class="line"></div><div class="line"><span class="keyword">type</span> fakeResult <span class="keyword">struct</span> &#123;</div><div class="line">    body <span class="keyword">string</span></div><div class="line">    urls []<span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f fakeFetcher)</span> <span class="title">Fetch</span><span class="params">(url <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, []<span class="keyword">string</span>, error)</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> res, ok := f[url]; ok &#123;</div><div class="line">        <span class="keyword">return</span> res.body, res.urls, <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">"not found: %s"</span>, url)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// fetcher 是填充后的 fakeFetcher。</span></div><div class="line"><span class="keyword">var</span> fetcher = fakeFetcher&#123;</div><div class="line">    <span class="string">"https://golang.org/"</span>: &amp;fakeResult&#123;</div><div class="line">        <span class="string">"The Go Programming Language"</span>,</div><div class="line">        []<span class="keyword">string</span>&#123;</div><div class="line">            <span class="string">"https://golang.org/pkg/"</span>,</div><div class="line">            <span class="string">"https://golang.org/cmd/"</span>,</div><div class="line">        &#125;,</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"https://golang.org/pkg/"</span>: &amp;fakeResult&#123;</div><div class="line">        <span class="string">"Packages"</span>,</div><div class="line">        []<span class="keyword">string</span>&#123;</div><div class="line">            <span class="string">"https://golang.org/"</span>,</div><div class="line">            <span class="string">"https://golang.org/cmd/"</span>,</div><div class="line">            <span class="string">"https://golang.org/pkg/fmt/"</span>,</div><div class="line">            <span class="string">"https://golang.org/pkg/os/"</span>,</div><div class="line">        &#125;,</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"https://golang.org/pkg/fmt/"</span>: &amp;fakeResult&#123;</div><div class="line">        <span class="string">"Package fmt"</span>,</div><div class="line">        []<span class="keyword">string</span>&#123;</div><div class="line">            <span class="string">"https://golang.org/"</span>,</div><div class="line">            <span class="string">"https://golang.org/pkg/"</span>,</div><div class="line">        &#125;,</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"https://golang.org/pkg/os/"</span>: &amp;fakeResult&#123;</div><div class="line">        <span class="string">"Package os"</span>,</div><div class="line">        []<span class="keyword">string</span>&#123;</div><div class="line">            <span class="string">"https://golang.org/"</span>,</div><div class="line">            <span class="string">"https://golang.org/pkg/"</span>,</div><div class="line">        &#125;,</div><div class="line">    &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里实现了<code>SafeCounter</code>结构体来实现线程安全的<code>map</code>，并在<code>set</code>函数中使用了<code>defer</code>来将解锁放到<code>return</code>之后。</p>
<p><code>Crawl</code>函数使用了管道来让主线程等待子线程结束，<strong>但是</strong>可以看到这样写十分复杂，每个return之前都需要记得向管道写入。</p>
<p>可以使用下面方法简化：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">WriteToChan</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">    ch &lt;- <span class="number">1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Crawl</span><span class="params">(url <span class="keyword">string</span>, sc *SafeCounter, fetcher Fetcher, ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">    <span class="keyword">defer</span> WriteToChan(ch)</div><div class="line">    <span class="keyword">if</span> !sc.set(url) &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    body, urls, err := fetcher.Fetch(url)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        fmt.Println(err)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    fmt.Printf(<span class="string">"found: %s %q\n"</span>, url, body)</div><div class="line">    <span class="keyword">for</span> _, u := <span class="keyword">range</span> urls &#123;</div><div class="line">        <span class="keyword">go</span> Crawl(u, sc, fetcher, ch)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> <span class="keyword">range</span> urls &#123;</div><div class="line">        &lt;-ch</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里编写函数<code>WriteToChan</code>，然后使用<code>defer</code>来实现函数结束时往管道写入。</p>
<p>当然也可以使用<code>sync.WaitGroup</code>：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Crawl</span><span class="params">(url <span class="keyword">string</span>, sc *SafeCounter, fetcher Fetcher, ch <span class="keyword">chan</span> <span class="keyword">int</span>, wg *sync.WaitGroup)</span></span> &#123;</div><div class="line">    <span class="keyword">defer</span> wg.Done()</div><div class="line">    <span class="keyword">if</span> !sc.set(url) &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    body, urls, err := fetcher.Fetch(url)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        fmt.Println(err)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    fmt.Printf(<span class="string">"found: %s %q\n"</span>, url, body)</div><div class="line">    <span class="keyword">var</span> wgNext sync.WaitGroup</div><div class="line">    wgNext.Add(<span class="built_in">len</span>(urls))</div><div class="line">    <span class="keyword">for</span> _, u := <span class="keyword">range</span> urls &#123;</div><div class="line">        <span class="keyword">go</span> Crawl(u, sc, fetcher, ch, &amp;wgNext)</div><div class="line">    &#125;</div><div class="line">    wgNext.Wait()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="素数求解"><a href="#素数求解" class="headerlink" title="素数求解"></a>素数求解</h1><p>素数或者质数：大于1，并且只能被1和自身整除的数，例如：2，3，5，7…</p>
<p>判断一个数 $n$ 是不是素数，可以按照定义：</p>
<ul>
<li>方法一：从2开始判断是否能够整除，直到 $\sqrt{n}$ 。</li>
<li>方法二：如果比 $n$ 小的数所构成的合数中没有 $n$，那么 $n$ 是素数。</li>
</ul>
<p>问题一：如何快速求解<code>[0,n]</code>范围内的素数。</p>
<p>如果n较大的时候，使用方法一复杂度也较大，这时使用方法二会更快：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> MAX = <span class="number">500000</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> primes [MAX]<span class="keyword">int</span></div><div class="line"><span class="keyword">var</span> isNotPrime [MAX]<span class="keyword">bool</span></div><div class="line"><span class="keyword">var</span> idx <span class="keyword">int</span> = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findPrime</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">    isNotPrime[<span class="number">0</span>] = <span class="literal">true</span></div><div class="line">    isNotPrime[<span class="number">1</span>] = <span class="literal">true</span></div><div class="line">    idx = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i := <span class="number">2</span>; i &lt;= n; i++ &#123;</div><div class="line">        <span class="keyword">if</span> !isNotPrime[i] &#123;</div><div class="line">            primes[idx] = i</div><div class="line">            idx++</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 对于每个数 i ，将 i*2, i*3, i*4 ... 排除</span></div><div class="line">        <span class="keyword">for</span> j := i*<span class="number">2</span>; j &lt;= n; j+=i &#123;</div><div class="line">            isNotPrime[j] = <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    findPrime(<span class="number">20</span>)</div><div class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; idx; i++ &#123;</div><div class="line">        fmt.Println(primes[i])</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，这样的写法会有很多重复筛选，例如<code>2*3</code>，<code>3*2</code>都会被统计，但是其实没有必要。
另外，还有重复类似 <code>4*2, 4*3, 4*4 ...</code> 其实就是 <code>2*4, 2*6, 2*8 ...</code>，也就是说对于不是素数的数，
筛选它们的倍数是重复的。更进一步，这里只需要筛选素数的倍数就可以了。</p>
<p>按照上面所述，可以改写如下：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findPrime</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">    isNotPrime[<span class="number">0</span>] = <span class="literal">true</span></div><div class="line">    isNotPrime[<span class="number">1</span>] = <span class="literal">true</span></div><div class="line">    idx = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i := <span class="number">2</span>; i &lt;= n; i++ &#123;</div><div class="line">        <span class="keyword">if</span> !isNotPrime[i] &#123;</div><div class="line">            primes[idx] = i</div><div class="line">            idx++</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> j, bound := <span class="number">0</span>, n/i + <span class="number">1</span>; j &lt; idx &amp;&amp; primes[j] &lt; bound; j++ &#123;</div><div class="line">            isNotPrime[primes[j]*i] = <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相当于这里只统计：</p>
<ul>
<li><code>2*2</code>，<code>2*3</code>，<code>2*4</code> …</li>
<li><code>3*3</code>，<code>3*4</code>，<code>3*5</code> …</li>
<li><code>5*5</code>，<code>5*6</code>，<code>5*7</code> …</li>
</ul>
<p>当然这里还是会出现重复，例如<code>2*9</code>和<code>3*6</code>，但是已经少了很多重复的筛选了。</p>
<p>更进一步，<strong>快速筛选法</strong>：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findPrime</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">    isNotPrime[<span class="number">0</span>] = <span class="literal">true</span></div><div class="line">    isNotPrime[<span class="number">1</span>] = <span class="literal">true</span></div><div class="line">    idx = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i := <span class="number">2</span>; i &lt;= n; i++ &#123;</div><div class="line">        <span class="keyword">if</span> !isNotPrime[i] &#123;</div><div class="line">            primes[idx] = i</div><div class="line">            idx++</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> j, bound := <span class="number">0</span>, n/i + <span class="number">1</span>; j &lt; idx &amp;&amp; primes[j] &lt; bound; j++ &#123;</div><div class="line">            isNotPrime[primes[j]*i] = <span class="literal">true</span></div><div class="line">            <span class="keyword">if</span> i%primes[j] == <span class="number">0</span> &#123;</div><div class="line">                <span class="keyword">break</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样在筛选过程中，可以不出现任何一个重复。</p>
<p><strong>那么为什么这样可以不出现任何一个重复，且筛选出所有合数呢？</strong></p>
<p>首先<code>每一个合数都可以以唯一形式被写成质数的乘积，即分解质因数</code>，那么只要是不同的质数组合，得到的肯定是不同的合数，</p>
<p>例如合数 $A_1 = a \times b \times c$ ，$A_2 = d \times e \times f$，假设 $a \leq b \leq c ; d \leq e \leq f$，
那么只有在 <code>a == d &amp;&amp; b == e &amp;&amp; c == f</code> 时， $A_1$ 等于 $A_2$。</p>
<p>那么在给定一个素数集合 <code>{a, b, ..., n}</code> ，就可以使用下面的方法来组合出所有这个集合所能表示的合数，且不发生重复：</p>
<div align="center"><img src="/images/golang/practice-1_2.png" style="zoom:55%" title="合数筛选"></div>

<p>图中的集合为<code>{2, 3, 5, 7}</code>，左边是包含2的所有合数的组合方法，右边是其中 <code>2,3,3</code> 这条路线的样子。</p>
<p>可以看到，第一层生成 <code>{2,2},{2,3},{2,5},{2,7}</code>，对于后面的三个集合 <code>{2,3},{2,5},{2,7}</code> 来说，它们向下的路线无法再经过 <code>2</code> ，
所有它们所生成的集合中，永远不可能包含子集 <code>{2,2}</code>，所以 <code>{2,2}</code> 与 <code>{2,3},{2,5},{2,7}</code> 向下所得到的集合永远不会相同，
同理可以知道 <code>{2,2},{2,3},{2,5},{2,7}</code> 互相之间向下不可能生成相同集合，也就保证了不会<strong>重复</strong>。
至于覆盖所有合数，则是<strong>显然</strong>的，因为任何合数都可以表示为图中一条路线。</p>
<p>当然，另一种组合顺序也是一样的，也是快速筛选法中所用的：</p>
<div align="center"><img src="/images/golang/practice-1_3.png" style="zoom:55%" title="合数筛选"></div>

<p>也就是刚才是限制向左，这里是限制向右，不过效果都是一样的。</p>
<p>为什么说算法中使用的就是这种组合方式呢？我们来跑100以内素数，打印一下输出就知道了：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">i =  2</div><div class="line">primes = 2 </div><div class="line">i =  3</div><div class="line">primes = 2 3 </div><div class="line">i =  4   // 2 x 2</div><div class="line">primes = 2 </div><div class="line">i =  5</div><div class="line">primes = 2 3 5 </div><div class="line">i =  6   // 3 x 2</div><div class="line">primes = 2 </div><div class="line">i =  7</div><div class="line">primes = 2 3 5 7 </div><div class="line">i =  8   // 2 x 2 x 2</div><div class="line">primes = 2 </div><div class="line">i =  9   // 3 x 3</div><div class="line">primes = 2 3 </div><div class="line">i =  10  // 5 x 2</div><div class="line">primes = 2 </div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<p>可以看到，输出完全符合预期（因为本来就是按这个组合方法写的…）：</p>
<ul>
<li>当<code>i = 2</code>，那么由于限制往右，那么向下只能再组合出 <code>{2,2}</code>；</li>
<li>当<code>i = 3</code>，那么向下只能再组合出 <code>{2,2}，{3,2}</code>；</li>
<li>当<code>i = 6</code>，其实就是组合 <code>{3,2}</code>，相当于图中的 3 走到 2，那么再向下也只有 2 能选择了，所以只能组合出 <code>{3,2,2}</code>；</li>
<li>…</li>
</ul>
<p>所以这里的 <code>i%primes[j] == 0</code> 其实就是在判断 <code>primes[j]</code> 是不是 <code>i</code> 的最小因数，一旦判断为 <code>true</code>，就相当于到达了右边界，
所以进行 <code>break</code>。</p>
<p>所以这样的方法<strong>一定不会出现任何重复的筛选</strong>。</p>
<p>至于包含所有合数，那也是明显的，对于合数 $A = a \times b \times … \times m \times n$ ，假设 $ a \geq b \geq … \geq m \geq n$，
那么一定会先遍历到 $i = a \times b \times … \times m$ ，又因为 $i$ 向下组合的右边界为 $m$ ，且 $m \geq n$ ，所以，一定会由 $i$ 筛选出 $A$，
所以这里<strong>一定不会漏掉任何一个合数</strong>。</p>
<p>证明完毕。</p>
]]></content>
    
    <summary type="html">
    
      Golang语言的入门学习，主要是一些基本的东西
    
    </summary>
    
      <category term="golang" scheme="http://yoursite.com/categories/golang/"/>
    
    
      <category term="golang" scheme="http://yoursite.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>云改讲坛和部门业务培训记录</title>
    <link href="http://yoursite.com/2019/08/23/2019-08-23-cloud-workgroup/"/>
    <id>http://yoursite.com/2019/08/23/2019-08-23-cloud-workgroup/</id>
    <published>2019-08-23T07:50:00.000Z</published>
    <updated>2019-08-23T08:12:20.219Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="云"><a href="#云" class="headerlink" title="云"></a>云</h1><p>下面围绕三个部分进行记录:</p>
<ol>
<li>云是什么？</li>
<li>云的当前市场状态。</li>
<li>云的未来变化趋势。</li>
</ol>
<hr>
<h2 id="云是什么？"><a href="#云是什么？" class="headerlink" title="云是什么？"></a>云是什么？</h2><p>云起源于虚拟化技术。虚拟化技术实现了把一台物理机虚拟成多台服务器的能力，由于这个能力，那么就可以在一台物理机上虚拟出多个虚拟机来同时提供给多个用户使用，它们共享物理机的资源。既然这样，就可以将多台物理机统一管理起来，这样就可以在同一时间提供出更多的虚拟机来给用户使用。更进一步，可以为用户提供配套的管理系统，方便用户使用，这样就形成了一朵云。</p>
<p>从内部来看，云是一个个服务器组成的。从外部来看，云是一个具有强大的计算能力、存储能力和网络能力的整体。</p>
<hr>
<h3 id="云的类别划分"><a href="#云的类别划分" class="headerlink" title="云的类别划分"></a>云的类别划分</h3><p><img src="/images/report/cloud_1.png" alt="image" title="云的类别划分"></p>
<p>一般业界通过云的共享程度来对云的类别进行划分，通常划分为公有云、专属云和私有云。从图中可以看到它们的共享程度逐渐降低，公有云几乎全部都是与他人共享的，而私有云几乎全都是独享的。</p>
<p>混合云，从名字就可以看出，它是几种云的混合，也许某个用户一部分业务需要部署到私有云，而另一部分业务放在公有云就可以（毕竟私有云要比公有云贵），那么混合云就可以帮他解决这个问题。</p>
<p>不同的云的类别总是适合不同的用户，不同的类别也就相当于不同的产品类型。</p>
<hr>
<h3 id="三类服务形态"><a href="#三类服务形态" class="headerlink" title="三类服务形态"></a>三类服务形态</h3><p>谈云的时候，常常会说I层、P层和S层，即Iaas、PaaS和SaaS，这也就是云的三类服务形态。</p>
<p><img src="/images/report/cloud_2.png" alt="image" title="三层对比"></p>
<p><strong>IaaS</strong>：基础设施即服务。服务的功能就类似于用户自己租了一台或者多台物理服务器，至于这些服务器用户想要怎么操作和管理，这里都不关心。当然硬件的管理不需要用户操心。</p>
<p><strong>PaaS</strong>：平台即服务。在I层的基础上，提供了操作系统、中间件以及运行库等，也就是说其它的东西都准备好了，用户直接往上面部署应用就行。</p>
<p><strong>SaaS</strong>：软件即服务。在PaaS的基础上，甚至连软件都以及部署好了，用户相当于买了一个已经正常运行了的软件，直接使用就行。</p>
<hr>
<h3 id="云的商业模式"><a href="#云的商业模式" class="headerlink" title="云的商业模式"></a>云的商业模式</h3><p>云既然是一件商品，那么它就需要吸引到客户，需要能够赚钱。</p>
<p>吸引客户的原因：</p>
<ol>
<li>快捷，低门槛。对一个小公司或初创公司，相比于直接买几台云主机，维护一个机房费时也费力。</li>
<li>按需，低成本。需要增加计算能力的时候，多买几台云主机或者扩容就行，不需要的时候再退掉，不仅节约钱，而且方便。</li>
</ol>
<p>能够赚钱的条件和原因：</p>
<ol>
<li>到达一定规模是前提。第一，每台机器的平均管理成本就会降低。第二，能够更好的复用和超售，同一台机器，不同的时间可以提供给不同的客户使用，同一个服务，也可以卖给更多的用户。</li>
<li>交叉补贴和价值填充。在卖A服务的同时，将服务B一同卖出，或是卖服务B时，将服务A一同卖出，也就是将商品绑在一起卖。</li>
</ol>
<p>当然，实际上到现在为止，各家的公有云和私有云都不赚钱或者不怎么赚钱，对于公有云来说，赚钱的关键在于规模；对于私有云，它的商业模式就决定了大部分操作留给了用户，而且还不能超售，所以难以赚钱。</p>
<hr>
<h2 id="云的当前市场状态"><a href="#云的当前市场状态" class="headerlink" title="云的当前市场状态"></a>云的当前市场状态</h2><p><img src="/images/report/cloud_3.png" alt="image" title="公有云市场状态"></p>
<p>云计算的市场最开始是百家争鸣，但是到今年为止，市场格局逐渐清晰。正如上面所说，云要获得盈利的一个重要前提在于规模，那么规模正是一个此消彼长的东西。在图2-1中可以看到，阿里云占领了整个市场的近半壁江山，而紧随其后的就是腾讯云和天翼云。</p>
<p>这里引用《中国公有云服务市场（2018下半年）跟踪》中所述，当前的市场状态如下：</p>
<ol>
<li>云产品迭代创新快：2018年公有云产品发布主要围绕高性能计算、异构计算、容器和无服务器、机器学习和机器人应用、IoT平台、自研云原生数据库、混合云七大关键词展开。</li>
<li>云与智能的强融合：智能云、云智能已然成为主要公有云服务商的未来战略，不仅体现在组织结构调整上，还体现在产品和服务研发上。基于云上的一体化的、使用便捷的AI服务能力成为公有云服务商比拼的重要方向。</li>
<li>混合云成发展常态：企业用户的多样化需求、公有云服务商的多元化发展，使得混合云部署、管理和运维等逐渐发展为一个初具规模的专业化市场，并对越来越多传统的信息技术服务商、增值开发商等体现出强烈的吸引力。</li>
<li>行业探索逐渐落地：虽然中国互联网行业的云计算应用已经相对成熟，但广大的非互联网行业对公有云的探索才开始不久。阿里、腾讯、华为、百度、浪潮等纷纷结合自身优势，明确了重点行业纵深发展战略，并借力合作生态布局不断拓展细分行业市场。</li>
</ol>
<hr>
<h2 id="云的未来变化趋势"><a href="#云的未来变化趋势" class="headerlink" title="云的未来变化趋势"></a>云的未来变化趋势</h2><p>首先，云本身从关注基础设施层逐渐过渡到开发部署运维，首先随着云越来越成熟，关注点逐渐从下层向上转移是一件很自然的事，其次正如上面所说的“交叉补贴和价值填充”，更多的增值服务才能赚到钱。</p>
<p>其次，现在迅速发展的IoT，以及马上就要广泛使用的5G，它们的结合正好需要“边缘计算”的能力。目前各家云厂商都已经开始了这方面的布局。</p>
<p>混合云、多云管理将成为主流。预计到2021年，使用云的组织中的75%将部署多云或混合云模型，所以一定要注意这方面产品的规划与发展。</p>
<p>云与大数据的结合成为新常态。云能够解决传统大数据的一些痛点，例如汇聚难、整合难和标记难等，云的数据分析能力和AI能力正好能够解决这些问题。</p>
<p>ABC的全面融合。ABC即AI、大数据和云计算，现在其实ABC已经不是一个割裂的不同概念了，通常将它们三个放在一起来讨论，由大数据和云计算所支撑起来的AI服务会是一个未来的卖点。</p>
<hr>
<h1 id="部门业务培训"><a href="#部门业务培训" class="headerlink" title="部门业务培训"></a>部门业务培训</h1><p>我所在的组：媒体存储组。</p>
<p>部门目前的主要业务：存储业务（也包含视频点播转码等）。</p>
<p>所包含的能力：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">---- 存储能力（Ceph集群）</div><div class="line">---- 文件上传（S3，CephFS，iSCSI）</div><div class="line">		---- 普通文件上传</div><div class="line">		---- 视频文件上传</div><div class="line">		---- 视频转码（FFmpeg）</div><div class="line">---- 文件下载（S3，CephFS，iSCSI）</div><div class="line">	---- 普通文件下载</div><div class="line">	---- 视频文件点播（nginx）</div></pre></td></tr></table></figure>
<p>下面从底向上来记录培训的内容：</p>
<ol>
<li>Linux相关。</li>
<li>Ceph相关。</li>
<li>视频转码与点播。</li>
<li>TCP/IP中的TCP部分。</li>
</ol>
<p>所有得培训记录都在下面（我竟然写了12篇博客…）：</p>
<p><a href="http://longrm.com/2019/07/11/2019-07-12-linux-base-practice_1/" target="_blank" rel="external">linux基础练习-1</a></p>
<p><a href="http://longrm.com/2019/07/15/2019-07-15-linux-base-practice_2/" target="_blank" rel="external">linux基础练习-2</a></p>
<p><a href="http://longrm.com/2019/07/18/2019-07-18-ceph-install/" target="_blank" rel="external">centos7上的ceph指定版本安装方法</a></p>
<p><a href="http://longrm.com/2019/07/19/2019-07-19-ceph-osd-create-remove/" target="_blank" rel="external">ceph-13.2.5删除osd，新建osd</a></p>
<p><a href="http://longrm.com/2019/07/22/2019-07-22-ceph-mon-add-destroy/" target="_blank" rel="external">ceph-13.2.5添加mon，删除mon（ceph-deploy）</a></p>
<p><a href="http://longrm.com/2019/07/23/2019-07-23-centos-lvm-create-extend/" target="_blank" rel="external">centos7中lvm分区的创建与扩展</a></p>
<p><a href="http://longrm.com/2019/08/02/2019-08-02-ceph-s3-use/" target="_blank" rel="external">ceph-mimic-13.2.5中s3的初步使用</a></p>
<p><a href="http://longrm.com/2019/08/05/2019-08-05-ceph-fs-use/" target="_blank" rel="external">ceph-mimic-13.2.5中CephFS的初步使用</a></p>
<p><a href="http://longrm.com/2019/08/06/2019-08-06-ceph-samba/" target="_blank" rel="external">ceph+samba的简单使用</a></p>
<p><a href="http://longrm.com/2019/08/06/2019-08-06-ceph-iscsi/" target="_blank" rel="external">ceph+iscsi的简单使用</a></p>
<p><a href="http://longrm.com/2019/08/08/2019-08-08-ffmpeg-practice/" target="_blank" rel="external">练习使用FFmpeg将视频转码为hls，并添加水印</a></p>
<p><a href="http://longrm.com/2019/08/14/2019-08-14-TCP-IP-19-20-21/" target="_blank" rel="external">TCP/IP详解卷1：协议 第19、20、21章笔记</a></p>
]]></content>
    
    <summary type="html">
    
      公司要求写一个笔记，那么写了就要放到博客上
    
    </summary>
    
      <category term="company" scheme="http://yoursite.com/categories/company/"/>
    
    
      <category term="report" scheme="http://yoursite.com/tags/report/"/>
    
  </entry>
  
  <entry>
    <title>线段树（Segment Tree）进阶使用记录（HDU3397）</title>
    <link href="http://yoursite.com/2019/08/18/2019-08-21-segment-tree/"/>
    <id>http://yoursite.com/2019/08/18/2019-08-21-segment-tree/</id>
    <published>2019-08-18T06:55:00.000Z</published>
    <updated>2019-08-22T03:32:43.985Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="线段树的进阶"><a href="#线段树的进阶" class="headerlink" title="线段树的进阶"></a>线段树的进阶</h2><p>在前一篇博客中<a href="http://longrm.com/2019/08/16/2019-08-16-segment-tree/" target="_blank" rel="external">线段树（Segment Tree）使用记录</a>，介绍了基础的线段树形式。</p>
<p>这一篇讨论以下进阶的使用，主要针对<code>lazy标志</code>。</p>
<p>上一篇博客中对于一个区间的修改只是<strong>单点修改</strong>，但是有时候会碰到<strong>区间修改</strong>的情况，这时基本的线段树可能就不适用了。</p>
<p>这时就需要针对<strong>区间修改</strong>来对区间树的更新方式进行变化。</p>
<p><strong>下面先假设问题为，初始给定一个数组：</strong></p>
<ul>
<li>修改操作包括：区间加上一个数，或者区间减去一个数。</li>
<li>查询操作包括：区间的求和。</li>
</ul>
<hr>
<h2 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h2><p>上一篇博客中使用的是<strong>至底向上</strong>的建树方式，这样的建树方法可以最大化空间利用率（2n空间即可），但是这样会造成一些处理上的困难，如图：</p>
<div align="center"><img src="/images/algorithm/SegmentTree_1.png" style="zoom:70%" title="至底向上"></div>

<p>图中点1、2其实在整颗树的最右边，而3、4、5、6却在左边，这样的节点排列方式对于区间修改是不利的（会造成逻辑上的混乱）。</p>
<p>所以可以使用<strong>至顶向下</strong>的建树方式，也就是递归建树：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> node, <span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(l == r) &#123;</div><div class="line">        table[node] = arr[l];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    buildTree(l, mid, left(node), arr);</div><div class="line">    buildTree(mid+<span class="number">1</span>, r, right(node), arr);</div><div class="line">    pushUp(node);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将区间的左边放到左子树，右边放到右子树来进行递归建树，注意在建立完毕左右子树之后更新本节点信息（<code>pushUp(node)</code>）。</p>
<div align="center"><img src="/images/algorithm/SegmentTree_3.png" style="zoom:70%" title="至顶向下"></div>

<p>可以看到上面就是<strong>至顶向下</strong>所建立的树的结构，节点序号从左向右排列，但是这样带来的问题就是增加了空间占用（上图中数组大小14）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SegmentTreeLazySum</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.n = n;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (i &lt; n) &#123;</div><div class="line">        i = i &lt;&lt; <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    table = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>*i];</div><div class="line">    lazy = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>*i];</div><div class="line">    buildTree(<span class="number">0</span>, n-<span class="number">1</span>, <span class="number">1</span>, arr);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以使用上面的方式来确定所需数组大小，也就是假如最后一层需要能放下n个元素，最小的i使得$2^i &gt; n$。</p>
<hr>
<h2 id="lazy标记"><a href="#lazy标记" class="headerlink" title="lazy标记"></a>lazy标记</h2><p>在进行区间修改时，我们不可能像单点修改一样，将所有节点的值都修改，因为在查询时，可能只需要上层节点的信息就可以完成查询。</p>
<p>例如将整个数组所有点都增加1，然后询问整个数组的求和，这时我们只需要在根节点上之前所记录的求和加上整个数组的长度即可。</p>
<p>这样的思想就是为了降低算法复杂度，对于一个区间的修改，我们先欠着，当必要的时候才进行修改。</p>
<p><code>update</code>方法的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// [L, R]为原始更新区间，[x, y]为当前节点node所包含的区间</span></div><div class="line"><span class="comment">// t为操作类型，c为操作数</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> c, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> node)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> ( y &lt; L || x &gt; R ) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (L &lt;= x &amp;&amp; y &lt;= R) &#123;</div><div class="line">        c = t == <span class="number">0</span> ? c : -c;</div><div class="line">        table[node] += (y - x + <span class="number">1</span>) * c;</div><div class="line">        lazy[node] += c;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    lazyDown(node, y - x + <span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> mid = (x + y) &gt;&gt; <span class="number">1</span>;</div><div class="line">    update(t, L, R, c,  x, mid, left(node));</div><div class="line">    update(t, L, R, c, mid+<span class="number">1</span>, y, right(node));</div><div class="line">    pushUp(node);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>这里lazy标记就代表需要加上的数（使用正负来代表原始的加减）。</strong></p>
<p>可以看到：</p>
<ol>
<li>当发现整个子区间都包含在更新区间中时，就可以停止更新下传，更新节点值与lazy标记即可。</li>
<li>当子区间部分包含在更新区间中时，就需要下传更新，那么此时就需要先将之前的lazy标记给下传了。</li>
<li>完成左右儿子的更新后，记得更新本节点（<code>pushUp(node)</code>）。</li>
</ol>
<p>那么这里就涉及到了<code>lazyDown</code>函数，这个函数根据不同的情况会有很大的变化，这里因为只涉及加减法，所以比较简单：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">lazyDown</span><span class="params">(<span class="keyword">int</span> node, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (lazy[node] == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> l = left(node), r = right(node);</div><div class="line">    lazy[l] += lazy[node];</div><div class="line">    table[l] += lazy[node] * (len - (len &gt;&gt; <span class="number">1</span>));</div><div class="line">    lazy[r] += lazy[node];</div><div class="line">    table[r] += lazy[node] * (len &gt;&gt; <span class="number">1</span>);</div><div class="line">    lazy[node] = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为只是加减法，所以子节点的lazy标记单纯加上父节点的lazy标记即可，当然同时也要记得更新子节点的值。</p>
<hr>
<h2 id="查询操作"><a href="#查询操作" class="headerlink" title="　查询操作"></a>　查询操作</h2><p>查询操作就递归向下即可，当然记得需要下传lazy标记：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> node)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> ( y &lt; L || x &gt; R ) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (L &lt;= x &amp;&amp; y &lt;= R) &#123;</div><div class="line">        <span class="keyword">return</span> table[node];</div><div class="line">    &#125;</div><div class="line">    lazyDown(node, y - x + <span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>, mid = (x + y) &gt;&gt; <span class="number">1</span>;</div><div class="line">    res += query(L, R, x, mid, left(node));</div><div class="line">    res += query(L, R,mid+<span class="number">1</span>, y, right(node));</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>注意这里所针对的问题，初始给定一个数组：</p>
<ul>
<li>修改操作包括：区间加上一个数，或者区间减去一个数。</li>
<li>查询操作包括：区间的求和。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SegmentTreeLazySum</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] table;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] lazy;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SegmentTreeLazySum</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.n = n;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</div><div class="line">            i = i &lt;&lt; <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        table = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>*i];</div><div class="line">        lazy = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>*i];</div><div class="line">        buildTree(<span class="number">0</span>, n-<span class="number">1</span>, <span class="number">1</span>, arr);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> node, <span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(l == r) &#123;</div><div class="line">            table[node] = arr[l];</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">        buildTree(l, mid, left(node), arr);</div><div class="line">        buildTree(mid+<span class="number">1</span>, r, right(node), arr);</div><div class="line">        pushUp(node);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> l = left(node), r = right(node);</div><div class="line">        table[node] = table[l] + table[r];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">lazyDown</span><span class="params">(<span class="keyword">int</span> node, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (lazy[node] == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> l = left(node), r = right(node);</div><div class="line">        lazy[l] += lazy[node];</div><div class="line">        table[l] += lazy[node] * (len - (len &gt;&gt; <span class="number">1</span>));</div><div class="line">        lazy[r] += lazy[node];</div><div class="line">        table[r] += lazy[node] * (len &gt;&gt; <span class="number">1</span>);</div><div class="line">        lazy[node] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> c, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> node)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> ( y &lt; L || x &gt; R ) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (L &lt;= x &amp;&amp; y &lt;= R) &#123;</div><div class="line">            c = t == <span class="number">0</span> ? c : -c;</div><div class="line">            table[node] += (y - x + <span class="number">1</span>) * c;</div><div class="line">            lazy[node] += c;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        lazyDown(node, y - x + <span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> mid = (x + y) &gt;&gt; <span class="number">1</span>;</div><div class="line">        update(t, L, R, c,  x, mid, left(node));</div><div class="line">        update(t, L, R, c, mid+<span class="number">1</span>, y, right(node));</div><div class="line">        pushUp(node);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> node)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> ( y &lt; L || x &gt; R ) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (L &lt;= x &amp;&amp; y &lt;= R) &#123;</div><div class="line">            <span class="keyword">return</span> table[node];</div><div class="line">        &#125;</div><div class="line">        lazyDown(node, y - x + <span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>, mid = (x + y) &gt;&gt; <span class="number">1</span>;</div><div class="line">        res += query(L, R, x, mid, left(node));</div><div class="line">        res += query(L, R,mid+<span class="number">1</span>, y, right(node));</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">left</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> idx &lt;&lt; <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">right</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (idx &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 测试用例：</span></div><div class="line">    <span class="comment">// 输入：</span></div><div class="line">    <span class="comment">// 1</span></div><div class="line">    <span class="comment">// 5 5</span></div><div class="line">    <span class="comment">// 1 1 1 1 1</span></div><div class="line">    <span class="comment">// 2 2 4 7</span></div><div class="line">    <span class="comment">// 1 1 3 4</span></div><div class="line">    <span class="comment">// 0 0 4 2</span></div><div class="line">    <span class="comment">// 1 1 4 8</span></div><div class="line">    <span class="comment">// 2 2 4 3</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// 输出：</span></div><div class="line">    <span class="comment">// 3</span></div><div class="line">    <span class="comment">// -23</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">int</span> T = sc.nextInt();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; T; k++) &#123;</div><div class="line">            <span class="keyword">int</span> n, m, t, x, y, c;</div><div class="line">            n = sc.nextInt();</div><div class="line">            m = sc.nextInt();</div><div class="line">            <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">                arr[i] = sc.nextInt();</div><div class="line">            &#125;</div><div class="line">            SegmentTreeLazySum hdu = <span class="keyword">new</span> SegmentTreeLazySum(n, arr);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">                t = sc.nextInt();</div><div class="line">                x = sc.nextInt();</div><div class="line">                y = sc.nextInt();</div><div class="line">                c = sc.nextInt();</div><div class="line">                <span class="keyword">if</span> (t == <span class="number">2</span>) &#123;</div><div class="line">                    System.out.println(hdu.query(x, y, <span class="number">0</span>, n - <span class="number">1</span>, <span class="number">1</span>));</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    hdu.update(t, x, y, c,<span class="number">0</span>, n - <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="HDU3397"><a href="#HDU3397" class="headerlink" title="HDU3397"></a>HDU3397</h2><p>这个题目是一个比较典型的线段树题，初始给定一个数组，操作包括：</p>
<ul>
<li>0：将区间[x, y]全部置为0；</li>
<li>1：将区间[x, y]全部置为1；</li>
<li><p>2：将区间[x, y]中的1变为0，0变为1；</p>
</li>
<li><p>3：查询区间[x, y]中1的数量；</p>
</li>
<li>4：查询区间[x, y]中连续出现1的最多的次数。</li>
</ul>
<p><strong>这道题的难点一在于查询<code>4</code></strong>，因为在一个节点上，我们需要通过它的两个子节点的信息来得到连续1的数量。</p>
<p>对于这个问题，可以考虑这样来解决，在一个节点上，我们保存如下信息：</p>
<ol>
<li>贴着区间左边的连续1的数量<code>LLen</code>。</li>
<li>贴着区间右边的连续1的数量<code>RLen</code>。</li>
<li>区间中的最大连续1的数量<code>MLen</code>。</li>
</ol>
<p>那么对于一个节点，它的相关信息可以这样计算得到：</p>
<ol>
<li><code>LLen</code>：等于左儿子的<code>LLen</code>。但是需要注意，如果左儿子的<code>LLen</code>等于整个区间的长度，那么就为<strong>左儿子的<code>LLen</code></strong>加上右儿子的<code>LLen</code>。</li>
<li><code>RLen</code>：同上。</li>
<li><code>MLen</code>：等于 左儿子的<code>MLen</code>，右儿子的<code>MLen</code>，左儿子的<code>RLen</code>加上右儿子的<code>LLen</code> 的最大值。</li>
</ol>
<p><strong>这道题的难点二在于操作<code>2</code></strong>，如何在一个节点上完成信息的更新，主要是<code>LLen</code>、<code>RLen</code>、<code>MLen</code>信息的变化？</p>
<p>为了完成这个件事，这里对称的将连续0的数量保存下来<code>ZLLen</code>、<code>ZRLen</code>、<code>ZMLen</code>，这样在进行操作2时，
就可以将<code>LLen</code>、<code>RLen</code>、<code>MLen</code>和<code>ZLLen</code>、<code>ZRLen</code>、<code>ZMLen</code>的信息交换即可。</p>
<p><strong>整个代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HDU3397</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] table;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] Ztable;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] MLen;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] LLen;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] RLen;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] ZLLen;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] ZRLen;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] ZMLen;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] lazy;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HDU3397</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.n = n;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</div><div class="line">            i = i &lt;&lt; <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        table = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>*i];</div><div class="line">        Ztable = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>*i];</div><div class="line">        lazy = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>*i];</div><div class="line">        MLen = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>*i];</div><div class="line">        LLen = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>*i];</div><div class="line">        RLen = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>*i];</div><div class="line">        ZLLen = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>*i];</div><div class="line">        ZRLen = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>*i];</div><div class="line">        ZMLen = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>*i];</div><div class="line">        Arrays.fill(lazy, -<span class="number">1</span>);</div><div class="line">        buildTree(<span class="number">0</span>, n-<span class="number">1</span>, <span class="number">1</span>, arr);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> node, <span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(l == r) &#123;</div><div class="line">            table[node] = MLen[node] = LLen[node] = RLen[node] = arr[l];</div><div class="line">            Ztable[node] = ZLLen[node] = ZRLen[node] = ZMLen[node] = <span class="number">1</span> - arr[l];</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">        buildTree(l, mid, left(node), arr);</div><div class="line">        buildTree(mid+<span class="number">1</span>, r, right(node), arr);</div><div class="line">        pushUp(node, mid - l + <span class="number">1</span>, r - mid);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> node, <span class="keyword">int</span> lenL, <span class="keyword">int</span> lenR)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> l = left(node), r = right(node);</div><div class="line">        table[node] = table[l] + table[r];</div><div class="line">        Ztable[node] = Ztable[l] + Ztable[r];</div><div class="line"></div><div class="line">        LLen[node] = LLen[l] == lenL ? LLen[l] + LLen[r] : LLen[l];</div><div class="line">        RLen[node] = RLen[r] == lenR ? RLen[r] + RLen[l] : RLen[r];</div><div class="line"></div><div class="line">        ZLLen[node] = ZLLen[l] == lenL ? ZLLen[l] + ZLLen[r] : ZLLen[l];</div><div class="line">        ZRLen[node] = ZRLen[r] == lenR ? ZRLen[r] + ZRLen[l] : ZRLen[r];</div><div class="line"></div><div class="line">        MLen[node] = Math.max(MLen[l], MLen[r]);</div><div class="line">        MLen[node] = Math.max(MLen[node], RLen[l] + LLen[r]);</div><div class="line"></div><div class="line">        ZMLen[node] = Math.max(ZMLen[l], ZMLen[r]);</div><div class="line">        ZMLen[node] = Math.max(ZMLen[node], ZRLen[l] + ZLLen[r]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">lazyDown</span><span class="params">(<span class="keyword">int</span> node, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (len &lt;= <span class="number">1</span> || lazy[node] == -<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> l = left(node), r = right(node);</div><div class="line">        lazyHelper2(lazy[node], l, len - (len &gt;&gt; <span class="number">1</span>));</div><div class="line">        lazyHelper2(lazy[node], r, len &gt;&gt; <span class="number">1</span>);</div><div class="line">        lazy[node] = -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">lazyHelper</span><span class="params">(<span class="keyword">int</span> node, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (lazy[node] == <span class="number">0</span>) &#123;</div><div class="line">            table[node] = LLen[node] = RLen[node] = MLen[node] = <span class="number">0</span>;</div><div class="line">            Ztable[node] = ZLLen[node] = ZRLen[node] = ZMLen[node] = len;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lazy[node] == <span class="number">1</span>) &#123;</div><div class="line">            table[node] = LLen[node] = RLen[node] = MLen[node] = len;</div><div class="line">            Ztable[node] = ZLLen[node] = ZRLen[node] = ZMLen[node] = <span class="number">0</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lazy[node] == <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">int</span> tmp0 = table[node], tmp1 = LLen[node], tmp2 = RLen[node], tmp3 = MLen[node];</div><div class="line">            table[node] = Ztable[node];</div><div class="line">            LLen[node] = ZLLen[node];</div><div class="line">            RLen[node] = ZRLen[node];</div><div class="line">            MLen[node] = ZMLen[node];</div><div class="line">            Ztable[node] = tmp0;</div><div class="line">            ZLLen[node] = tmp1;</div><div class="line">            ZRLen[node] = tmp2;</div><div class="line">            ZMLen[node] = tmp3;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">lazyHelper2</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> node, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (t == <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (lazy[node] == -<span class="number">1</span>) &#123;</div><div class="line">                lazy[node] = t;</div><div class="line">                lazyHelper(node, len);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lazy[node] == <span class="number">2</span>) &#123;</div><div class="line">                lazyHelper(node, len);</div><div class="line">                lazy[node] = -<span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                lazy[node] = <span class="number">1</span> - lazy[node];</div><div class="line">                lazyHelper(node, len);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            lazy[node] = t;</div><div class="line">            lazyHelper(node, len);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> node)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> ( y &lt; L || x &gt; R ) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (L &lt;= x &amp;&amp; y &lt;= R) &#123;</div><div class="line">            lazyHelper2(t, node, y - x + <span class="number">1</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        lazyDown(node, y - x + <span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> mid = (x + y) &gt;&gt; <span class="number">1</span>;</div><div class="line">        update(t, L, R, x, mid, left(node));</div><div class="line">        update(t, L, R, mid+<span class="number">1</span>, y, right(node));</div><div class="line">        pushUp(node, mid - x + <span class="number">1</span>, y - mid);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">query3</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> node)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> ( y &lt; L || x &gt; R ) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (L &lt;= x &amp;&amp; y &lt;= R) &#123;</div><div class="line">            <span class="keyword">return</span> table[node];</div><div class="line">        &#125;</div><div class="line">        lazyDown(node, y - x + <span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>, mid = (x + y) &gt;&gt; <span class="number">1</span>;</div><div class="line">        res += query3(L, R, x, mid, left(node));</div><div class="line">        res += query3(L, R,mid+<span class="number">1</span>, y, right(node));</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 在进行查询4的时候，由于左右儿子都可能只有一部分与查询区间相交，</span></div><div class="line">    <span class="comment">// 所有需要一个结构体来存储相交部分的相关信息。</span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Ans</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> LLen = <span class="number">0</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> RLen = <span class="number">0</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> MLen = <span class="number">0</span>;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Ans</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Ans</span><span class="params">(<span class="keyword">int</span> LLen, <span class="keyword">int</span> RLen, <span class="keyword">int</span> MLen)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.LLen = LLen;</div><div class="line">            <span class="keyword">this</span>.RLen = RLen;</div><div class="line">            <span class="keyword">this</span>.MLen = MLen;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">query4</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> node)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> query4Helper(L, R, x, y, node).MLen;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Ans <span class="title">query4Helper</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> node)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> ( y &lt; L || x &gt; R ) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Ans();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (L &lt;= x &amp;&amp; y &lt;= R) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Ans(LLen[node], RLen[node], MLen[node]);</div><div class="line">        &#125;</div><div class="line">        lazyDown(node, y - x + <span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> res1 = <span class="number">0</span>, res2 = <span class="number">0</span>, res3 = <span class="number">0</span>, mid = (x + y) &gt;&gt; <span class="number">1</span>;</div><div class="line">        Ans ans1 = query4Helper(L, R, x, mid, left(node));</div><div class="line">        Ans ans2 = query4Helper(L, R, mid+<span class="number">1</span>, y, right(node));</div><div class="line">        res1 = ans1.LLen == (mid - x + <span class="number">1</span>) ? ans1.LLen + ans2.LLen : ans1.LLen;</div><div class="line">        res2 = ans2.RLen == (y - mid) ? ans2.RLen + ans1.RLen : ans2.RLen;</div><div class="line">        res3 = Math.max(ans1.MLen, ans2.MLen);</div><div class="line">        res3 = Math.max(res3, ans1.RLen + ans2.LLen);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Ans(res1, res2, res3);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">left</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> idx &lt;&lt; <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">right</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (idx &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">int</span> T = sc.nextInt();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; T; k++) &#123;</div><div class="line">            <span class="keyword">int</span> n, m, t, x, y;</div><div class="line">            n = sc.nextInt();</div><div class="line">            m = sc.nextInt();</div><div class="line">            <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">                arr[i] = sc.nextInt();</div><div class="line">            &#125;</div><div class="line">            HDU3397 hdu = <span class="keyword">new</span> HDU3397(n, arr);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">                t = sc.nextInt();</div><div class="line">                x = sc.nextInt();</div><div class="line">                y = sc.nextInt();</div><div class="line">                <span class="keyword">if</span> (t == <span class="number">3</span>) &#123;</div><div class="line">                    System.out.println(hdu.query3(x, y, <span class="number">0</span>, n - <span class="number">1</span>, <span class="number">1</span>));</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t == <span class="number">4</span>) &#123;</div><div class="line">                    System.out.println(hdu.query4(x, y, <span class="number">0</span>, n - <span class="number">1</span>, <span class="number">1</span>));</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    hdu.update(t, x, y, <span class="number">0</span>, n - <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码比较基础，速度与使用空间都不怎么样，但是至少AC了：</p>
<p><img src="/images/algorithm/SegmentTree_4.png" alt="image" title="运行结果"></p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>线段树有很多不同的形式，而且很多时候根据题目的不同会有很多的小变化。</p>
<p>最重要的是<strong>代码一般较长，逻辑一般较乱</strong>，所有很容易<strong>出BUG</strong>，建议保持好<strong>心态</strong>。</p>
]]></content>
    
    <summary type="html">
    
      线段树的lazy标志的使用，实践题目HDU3397
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="http://yoursite.com/tags/algorithm/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>线段树（Segment Tree）使用记录</title>
    <link href="http://yoursite.com/2019/08/16/2019-08-16-segment-tree/"/>
    <id>http://yoursite.com/2019/08/16/2019-08-16-segment-tree/</id>
    <published>2019-08-16T09:42:00.000Z</published>
    <updated>2019-08-22T04:26:21.415Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="线段树代码形式"><a href="#线段树代码形式" class="headerlink" title="线段树代码形式"></a>线段树代码形式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SegmentTree</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] table;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SegmentTree</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，通常线段树输入一个数组，同时维护自身的一个<code>table</code>数组。
提供<code>query</code>方法来完成对一个区间$[left, right]$的查询操作（最大值、最小值、求和等），
提供<code>update</code>方法来完成对输入数组某一位置的修改。</p>
<p>比如对于子数组最大值的查询，假设数组长度为$N$，查询$M$次，那么<strong>暴力</strong>方法查询的复杂度就为$O(MN)$，
而使用<strong>线段树</strong>则可以将每次查询的复杂度降到$log(n)$，那么总的负责度就能降到$O(Mlog(N))$。</p>
<p>所以在某些时候，线段树是一个十分有用的数据结构。</p>
<hr>
<h2 id="线段树结构形式"><a href="#线段树结构形式" class="headerlink" title="线段树结构形式"></a>线段树结构形式</h2><hr>
<h3 id="树的性质"><a href="#树的性质" class="headerlink" title="树的性质"></a>树的性质</h3><p>线段树其实就是一颗<strong>满二叉树</strong>，注意到这是一个十分重要的性质（使得可以使用数组快速建树），
它可以推出<strong>“假设叶节点个数为$n$，那么非叶节点的个数一定是 $n - 1$ ”</strong>，
那么同时也就表明总的节点数为 $n + (n - 1) = 2n - 1$ ，<strong>总的节点个数一定是奇数</strong>。</p>
<p>（这里使用的满二叉树定义为：除了叶子结点之外的每一个结点都有两个孩子结点。）</p>
<p><a href="https://blog.csdn.net/qq_22642239/article/details/80774013" target="_blank" rel="external">完美二叉树, 完全二叉树和完满二叉树</a></p>
<p>下面可以简单的证明一下推论“<strong>假设叶节点个数为$n$，那么非叶节点的个数一定是 $n - 1$ </strong>”：</p>
<ul>
<li>假设总结点树为$n$，非叶节点数为$n_1$，叶节点数为$n_2$，那么$n = n_1 + n_2$。</li>
<li>由二叉树的性质，分支数（边数）为$n - 1$。</li>
<li>由非叶节点都有两个儿子，分支数（边数）也可以计算为$2n_1$。</li>
</ul>
<p>那么：</p>
<script type="math/tex; mode=display">
n - 1 = 2n_1 \\
n = 2n_1 - 1</script><p>可以推出：</p>
<script type="math/tex; mode=display">
n = n_1 + n_2 \\
2n_1 - 1 = n_1 + n_2 \\
n_1 - 1 = n_2</script><p>推论得证。</p>
<hr>
<h3 id="线段树数据结构"><a href="#线段树数据结构" class="headerlink" title="线段树数据结构"></a>线段树数据结构</h3><p>线段树通常使用一个数组<code>T</code>来进行存储，根节点在<code>T[1]</code>的位置（<code>T[0]</code>不使用），
一个节点<code>T[i]</code>的左儿子为<code>T[2i]</code>，右儿子为<code>T[2i+1]</code>，父节点为<code>T[i/2]</code>。</p>
<p>对于最大值来说，每个节点维护以这个节点为根的子树的最大值，所有输入的数据都存放在叶节点。</p>
<p><strong>建树</strong>：</p>
<p>复杂度：$O(n)$</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SegmentTreeMax</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] table;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SegmentTreeMax</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.n = arr.length;</div><div class="line">        table = <span class="keyword">new</span> <span class="keyword">int</span>[n*<span class="number">2</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n, j = <span class="number">0</span>; i &lt; table.length; i++, j++) &#123;</div><div class="line">            table[i] = arr[j];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n-<span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">            table[i] = Math.max(table[left(i)], table[right(i)]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>建树时就使用了上面的性质：<strong>假设叶节点个数为$n$，那么非叶节点的个数一定是 $n - 1$ </strong>。所以这里直接申请一个<code>2n</code>大小的数组，
然后从1到n-1为作为非叶节点，n到2n-1作为叶节点。</p>
<p>对于<code>[1, 2, 3, 4, 5, 6]</code>来说，它建立的数组为<code>[0, 6, 6, 2, 4, 6, 1, 2, 3, 4, 5, 6]</code>（注意索引0不使用），形状为：</p>
<div align="center"><img src="/images/algorithm/SegmentTree_1.png" style="zoom:70%" title="树的形状"></div>

<p><strong>更新：</strong></p>
<p>复杂度：$O(log(n))$</p>
<p>更新很简单，更新叶节点后再迭代更新父节点即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">    idx += n; </div><div class="line">    table[idx] = num;</div><div class="line">    idx = parent(idx);</div><div class="line">    <span class="keyword">while</span> (idx &gt; <span class="number">0</span>) &#123;</div><div class="line">        table[idx] = Math.max(table[left(idx)], table[right(idx)]);</div><div class="line">        idx = parent(idx);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="线段树的查询"><a href="#线段树的查询" class="headerlink" title="线段树的查询"></a>线段树的查询</h2><p>复杂度：$O(log(n))$</p>
<p>线段树的查询才是线段树的精髓所在，其实二叉树这种分治的思想并不是一个难以想到的方法，
但是分治后的子问题结果的合并才是这里比较重要的地方。</p>
<p>线段树的结构已经将问题划分到了一个个子树之上，但是在进行区间查询时，区间可能跨越多颗子树：</p>
<div align="center"><img src="/images/algorithm/SegmentTree_2.png" style="zoom:70%" title="跨区间查询"></div>

<p>例如上图，它查询原数组中<code>[3, 5]</code>区间（树中的节点9、10、11）中的最大元素，很明显的，9号节点单独在一颗子树之中。</p>
<p>首先需要注意到上面线段树数据结构中所说“一个节点<code>T[i]</code>的左儿子为<code>T[2i]</code>，右儿子为<code>T[2i+1]</code>”，
那么所有左儿子的节点序号都是偶数，而右儿子的节点序号则都是奇数。</p>
<p>那么对于一个查询区间<code>[L, R]</code>（L不等于R）：</p>
<ul>
<li>对于区间的左边界L，如果它是偶数，那么它是父节点的<strong>左</strong>儿子，那么它的兄弟节点L+1（父节点的右儿子）也属于这个区间之内，那么对于最大值，应该直接向上询问它的父节点。</li>
<li>对于区间的左边界L，如果它是奇数，那么它是父节点的<strong>右</strong>儿子，那么它的兄弟节点L-1（父节点的左儿子）肯定不属于这个区间之内，那么对于最大值，直接询问节点l，不能向上询问它的父节点。</li>
</ul>
<p>对应以上结论：</p>
<ul>
<li>当左边界L为偶数时：<code>L = parent(L)</code>。</li>
<li>当左边界L为奇数时：<code>max = Math.max(max, L)</code>。这里完成了对L这个点的查询，那么就可以对区间进行缩小，即：<code>L = L + 1</code>（注意到L变成了偶数）。</li>
</ul>
<p>右边界的处理同理左边界。</p>
<p>可以看到这是一个不断<strong>收缩</strong>区间左右边界的过程，并从叶节点逐渐向上走，实际代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    l += n;</div><div class="line">    r += n;</div><div class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> ( l &lt;= r ) &#123;</div><div class="line">        <span class="keyword">if</span> ( (l &amp; <span class="number">1</span>) == <span class="number">1</span> ) &#123;</div><div class="line">            max = Math.max(max, table[l]);</div><div class="line">            l++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ( (r &amp; <span class="number">1</span>) != <span class="number">1</span> ) &#123;</div><div class="line">            max = Math.max(max, table[r]);</div><div class="line">            r--;</div><div class="line">        &#125;</div><div class="line">        l &gt;&gt;= <span class="number">1</span>;</div><div class="line">        r &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> max;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码在不断缩小区间的过程中，并且对于更新后的<code>L&#39;</code>、<code>R&#39;</code>，能够保证 $[L’, R’] \in [L, R]$ ，也不会遗漏任何区间内的元素。</p>
<hr>
<h2 id="线段树代码"><a href="#线段树代码" class="headerlink" title="线段树代码"></a>线段树代码</h2><p>区间最大值：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SegmentTreeMax</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] table;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SegmentTreeMax</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.n = arr.length;</div><div class="line">        table = <span class="keyword">new</span> <span class="keyword">int</span>[n*<span class="number">2</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n, j = <span class="number">0</span>; i &lt; table.length; i++, j++) &#123;</div><div class="line">            table[i] = arr[j];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n-<span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">            table[i] = Math.max(table[left(i)], table[right(i)]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        idx += n; </div><div class="line">        table[idx] = num;</div><div class="line">        idx = parent(idx);</div><div class="line">        <span class="keyword">while</span> (idx &gt; <span class="number">0</span>) &#123;</div><div class="line">            table[idx] = Math.max(table[left(idx)], table[right(idx)]);</div><div class="line">            idx = parent(idx);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">        l += n;</div><div class="line">        r += n;</div><div class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> ( l &lt;= r ) &#123;</div><div class="line">            <span class="keyword">if</span> ( (l &amp; <span class="number">1</span>) == <span class="number">1</span> ) &#123;</div><div class="line">                max = Math.max(max, table[l]);</div><div class="line">                l++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> ( (r &amp; <span class="number">1</span>) != <span class="number">1</span> ) &#123;</div><div class="line">                max = Math.max(max, table[r]);</div><div class="line">                r--;</div><div class="line">            &#125;</div><div class="line">            l &gt;&gt;= <span class="number">1</span>;</div><div class="line">            r &gt;&gt;= <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">left</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> idx &lt;&lt; <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">right</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (idx &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">parent</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> idx &gt;&gt; <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面是基本的代码形式，可以依据它来修改为各种不同的用途。</p>
<hr>
<h2 id="Leetcode-1157"><a href="#Leetcode-1157" class="headerlink" title="Leetcode 1157"></a>Leetcode 1157</h2><p><a href="https://leetcode.com/problems/online-majority-element-in-subarray/" target="_blank" rel="external">Leetcode 1157</a></p>
<p>题目大意是给定一个数组，提供以下功能：</p>
<ul>
<li>查询一个区间内的<code>majority-element</code>，也就是这个数的出现次数大于给定的<code>threshold</code>，注意<code>threshold</code>一定大于这个区间的一半大小，
这样即能保证一个区间里面最多只存在一个<code>majority-element</code>。</li>
</ul>
<p>注意到这个题目最关键的思想点在于：</p>
<p><strong>一个区间（区间大小<code>N</code>）中的一个数<code>A</code>，它在区间内的出现次数大于<code>N/2</code>，那么无论将这个区间切分为几个小区间，
这些小区间中，必定至少存在一个小区间t（区间大小<code>n</code>），<code>A</code>在小区间t中的出现次数大于<code>n/2</code></strong>。</p>
<p>这个证明使用<strong>反证</strong>即可：</p>
<p>假设区间$T$，大小为$N$，其中数$A$出现次数$A_T$大于$\frac{N}{2}$。</p>
<p>现在将区间$T$划分为小区间$\{ T_1, T_2, T_3, … , T_m \}$，区间大小为$\{ n_1, n_2, n_3, … , n_m \}$，$A$的出现次数为：</p>
<script type="math/tex; mode=display">\{ A_{T_1}, A_{T_2}, ..., A_{T_m} \}</script><p>如果所有的小区间中，A的出现都不到区间的一半：</p>
<script type="math/tex; mode=display">
A_{T_i} \leqslant \frac{n_i}{2}，对于任意 \  i \in \{1,2,...,m\}</script><p>那么：</p>
<script type="math/tex; mode=display">
A_{T_1} + A_{T_2} + ... + A_{T_m} \leqslant \frac{n_1}{2} + \frac{n_2}{2} + ... + \frac{n_m}{2}  \\
A_T \leqslant \frac{N}{2}</script><p>显然与假设中的 $A_T$大于$\frac{N}{2}$ 相矛盾。</p>
<p>一旦想通了这个<strong>Punchline</strong>，就可以开始使用线段树来做这个题了，线段树中每个节点存储以它为根的子树中最多的元素，
那么一个区间内的最多的元素，就类似于求这个区间内的最大元素，只不过最大元素比的是大小，而这里比的是在子区间中出现的次数多少。</p>
<p>注意到一个查询区间可能由多个子树组成，这就类似与多个子区间，那么这个<code>majority-element</code>一定会出现在某课子树的根节点上。</p>
<p>当然这里还有另一个重点：<strong>如何快速查询一个数在一个子区间内出现多少次？</strong>如果使用遍历，那么是$O(n)$的复杂度。</p>
<p>一个巧妙的方法是将这个数的所有索引存下来形成一个List，通过二分查找来查询子区间的左右边界在List中出现的位置，
相减即可知道子区间中这个数的数量，复杂度$O(log(n))$。</p>
<p>最后代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MajorityChecker</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] table;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Map&lt;Integer, List&lt;Integer&gt;&gt; numIdxs = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MajorityChecker</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.n = arr.length;</div><div class="line">        table = <span class="keyword">new</span> <span class="keyword">int</span>[n*<span class="number">2</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n, j = <span class="number">0</span>; i &lt; table.length; i++, j++) &#123;</div><div class="line">            table[i] = arr[j];</div><div class="line">            List&lt;Integer&gt; idxs = numIdxs.get(arr[j]);</div><div class="line">            <span class="keyword">if</span> ( idxs == <span class="keyword">null</span> ) &#123;</div><div class="line">                idxs = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                numIdxs.put(arr[j], idxs);</div><div class="line">            &#125;</div><div class="line">            idxs.add(i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n-<span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">            <span class="keyword">int</span> l = left(i), r = right(i);</div><div class="line">            table[i] = countRange(l, r, table[l]) &gt; countRange(l, r, table[r]) ? table[l] : table[r];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">countRange</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; idxs = numIdxs.get(num);</div><div class="line">        <span class="keyword">int</span> idx1 = Collections.binarySearch(idxs, l);</div><div class="line">        <span class="keyword">int</span> idx2 = Collections.binarySearch(idxs, r);</div><div class="line">        <span class="keyword">if</span> (idx1 &lt; <span class="number">0</span>) &#123;</div><div class="line">            idx1 = -(idx1 + <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (idx2 &lt; <span class="number">0</span>) &#123;</div><div class="line">            idx2 = -(idx2 + <span class="number">1</span>) - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> idx2 - idx1 + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> threshold)</span> </span>&#123;</div><div class="line">        l += n;</div><div class="line">        r += n;</div><div class="line">        <span class="keyword">int</span> ll = l, rr = r;</div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> ( l &lt;= r ) &#123;</div><div class="line">            <span class="keyword">if</span> ( (l &amp; <span class="number">1</span>) == <span class="number">1</span> ) &#123;</div><div class="line">                <span class="keyword">int</span> tmp = countRange(ll, rr, table[l]);</div><div class="line">                <span class="keyword">if</span> (tmp &gt; max) &#123;</div><div class="line">                    max = tmp;</div><div class="line">                    res = table[l];</div><div class="line">                &#125;</div><div class="line">                l++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> ( (r &amp; <span class="number">1</span>) != <span class="number">1</span> ) &#123;</div><div class="line">                <span class="keyword">int</span> tmp = countRange(ll, rr, table[r]);</div><div class="line">                <span class="keyword">if</span> (tmp &gt; max) &#123;</div><div class="line">                    max = tmp;</div><div class="line">                    res = table[r];</div><div class="line">                &#125;</div><div class="line">                r--;</div><div class="line">            &#125;</div><div class="line">            l &gt;&gt;= <span class="number">1</span>;</div><div class="line">            r &gt;&gt;= <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max &gt;= threshold ? res : -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">left</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> idx &lt;&lt; <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">right</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (idx &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      线段树的原理及使用
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="http://yoursite.com/tags/algorithm/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP详解卷1：协议 第19、20、21章笔记</title>
    <link href="http://yoursite.com/2019/08/14/2019-08-14-TCP-IP-19-20-21/"/>
    <id>http://yoursite.com/2019/08/14/2019-08-14-TCP-IP-19-20-21/</id>
    <published>2019-08-14T08:48:00.000Z</published>
    <updated>2019-08-23T08:13:03.820Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="第19章-TCP的交互数据流"><a href="#第19章-TCP的交互数据流" class="headerlink" title="第19章 TCP的交互数据流"></a>第19章 TCP的交互数据流</h2><p>首先，上面叫交互数据流，原文解释：</p>
<ul>
<li>块数据：如FTP、电子邮件和Usenet新闻。</li>
<li>交互数据：如Telnet和Rlogin。</li>
</ul>
<p>那么交互数据流就是客户端与服务端需要频繁交互数据的那种数据流。</p>
<p>这一章主要以Rlogin举例，也就是远程登录。</p>
<hr>
<h3 id="信息交互过程"><a href="#信息交互过程" class="headerlink" title="信息交互过程"></a>信息交互过程</h3><p><img src="/images/network/tcp-ip/1-1.png" alt="image" title="信息交互过程"></p>
<p>在Rlogin的交互中，需要进行图上的信息传递：</p>
<ol>
<li>客户端告知服务端按键信息。</li>
<li>服务端的对按键信息的确认。</li>
<li>服务器告知客户端的按键显示信息（回显）。</li>
<li>客户端对按键显示信息的确认。</li>
</ol>
<p>在我们平常使用ssh的过程中可能感觉不到，这里每次只传送一个按键信息。</p>
<hr>
<h3 id="经受时延的确认"><a href="#经受时延的确认" class="headerlink" title="经受时延的确认"></a>经受时延的确认</h3><p>考虑到上面的交互过程，2和3步服务器有两个信息要传递给客户端，一个ACK信息，一个数据信息。</p>
<p>那么十分自然的想法，这两个信息如果用两个报文来传递有点浪费资源，因为它们可以不冲突的放在以一个报文里面。
（即<strong>数据捎带ACK</strong>）</p>
<p><img src="/images/network/tcp-ip/1-2.png" alt="image" title="ACK数据捎带"></p>
<p>如果要做到这一点，就要想到，服务器在收到按键信息后，需要经过一定时间的处理，然后才会发出回显信息，
那么很明显的，按键确认信息要比回显信息先构建出来，它们之间差多少时间无法确定，所以就有了这里<strong>经受时延的确认</strong>。</p>
<p><strong>经受时延的确认：</strong></p>
<blockquote>
<p>通常TCP在接收到数据时并不立即发送ACK；相反，它推迟发送，以便将ACK与需要沿该方向发送的数据一起发送（有时
称这种现象为数据捎带ACK）。绝大多数实现采用的时延为200ms，也就是说，TCP将以最大200ms的时延等待是否有数据一起发送。</p>
</blockquote>
<p>注意到这里说的是<strong>最大</strong>200ms时延，也就是这里有一个200ms定时器，但是<code>TCP使用了一个200 ms的定时器，该定时器以相对于内核引导的200 ms固定时间溢出</code>，
所以这个定时器不是在ACK开始等待的时候触发的，而是一定有的，ACK在等待的时候，就可能会在1~200ms的任意时刻碰到定时器溢出。</p>
<p>看书上给出的例子：</p>
<p><img src="/images/network/tcp-ip/1-3.png" alt="image" title="所等待的时延"></p>
<p>ACK等待时间为：123.5、65.6、109.0、132.2、42.0、140.3和195.8ms。
ACK发出时间为：139.9、539.3、940.1、1339.9、1739.9、1940.1和2140.1ms。</p>
<p>ACK发出时间相差均为200的整数倍，证明了这个200ms的定时器与ACK开始等待的时间无关，而是在200ms固定时间间隔溢出。</p>
<hr>
<h3 id="Nagle算法"><a href="#Nagle算法" class="headerlink" title="Nagle算法"></a>Nagle算法</h3><p>正如上面说的，Rlogin交互过程中<strong>每次只传送一个按键信息</strong>，比如你一瞬间打（粘贴）了个<code>abcdefg</code>，
结果它竟然是发送7个报文，分别报告这几个字母，如果网络资源并不是那么丰富的情况下，就有点太浪费了。
那么我们自然就想一次多发送几个字母过去，也就是Nagle算法做的事情。</p>
<p><strong>Nagle算法：</strong></p>
<blockquote>
<p>该算法要求一个TCP连接上最多只能有一个未被确认的未完成的小分组，在该分组的确认到达之前不能发送其他的小分组。
相反，TCP收集这些少量的分组，并在确认到来时以一个分组的方式发出去。</p>
</blockquote>
<p>也就是当你按下字母<code>a</code>时，报文被发送，再按下<code>bcdefg</code>时，它们不会被发送，直到收到报文<code>a</code>的ACK，
这时就将<code>bcdefg</code>放在一个报文里面发送出去。</p>
<blockquote>
<p>该算法的优越之处在于它是自适应的：确认到达得越快，数据也就发送得越快。</p>
</blockquote>
<p>Nagle算法的目的在于减少网络中小分组的数目，但是实际上会增加整个发送过程的时延，
在延迟比较敏感的场景下，禁用它能提升体验。</p>
<hr>
<h3 id="窗口大小通告"><a href="#窗口大小通告" class="headerlink" title="窗口大小通告"></a>窗口大小通告</h3><p><img src="/images/network/tcp-ip/1-4.png" alt="image" title="窗口大小通告"></p>
<p>图中的<code>win 4096</code>、<code>win 8192</code>等就是窗口大小的通告，代表的是自己的接收窗口还有多少<strong>剩余空间</strong>。</p>
<p>注意上图的14~18报文：</p>
<ul>
<li><p>客户端通过14、15报文一共发送了4个字节（<code>14:18(4)</code>）的数据到服务器。</p>
</li>
<li><p>服务器回复<code>ACK 18</code>，表示收到了这4个字节的数据，但是只回显了3个字节<code>56:59(3)</code>，所以还留有1个字节数据未处理，此时窗口大小为$8191 = 8192 - 1$。</p>
</li>
<li><p>客户端确认回显（<code>ACK 59</code>），并继续发送3字节（<code>18:21(3)</code>）数据，但是窗口大小$4093 = 4096 - 3$，说明收到的3字节回显还没有处理。</p>
</li>
<li><p>服务器回复<code>ACK 21</code>，并发送回显1个字节<code>59:60(1)</code>，那么<code>18:21(3)</code>这3字节数据都还没处理，所以窗口大小为$8189 = 8192 - 3$。</p>
</li>
</ul>
<hr>
<h3 id="wireshark抓包测试"><a href="#wireshark抓包测试" class="headerlink" title="wireshark抓包测试"></a>wireshark抓包测试</h3><p>首先先建立一个ssh连接：</p>
<p><img src="/images/network/tcp-ip/1-6.png" alt="image" title="建立ssh链接"></p>
<p>开启wireshark抓包：</p>
<p><img src="/images/network/tcp-ip/1-7.png" alt="image" title="开始抓包"></p>
<p>敲一个a看什么效果：</p>
<p><img src="/images/network/tcp-ip/1-8.png" alt="image" title="输入a"></p>
<p><img src="/images/network/tcp-ip/1-9.png" alt="image" title="报文抓取"></p>
<p>可以看到一共发送了三个报文，和书上所述一致。</p>
<p>这里直接粘贴一个字符串<code>TCP</code>进去，结果如下：</p>
<p><img src="/images/network/tcp-ip/1-10.png" alt="image" title="粘贴TCP"></p>
<p><img src="/images/network/tcp-ip/1-11.png" alt="image" title="报文抓取"></p>
<p>可以看到这里显然同时为T、C、P三个字符分别发送了报文，可以看出，这里显然关闭了Nagle算法。</p>
<p>另外<code>.233</code>发送了三个回显报文，但是<code>.150</code>只发送了2个ACK，这显然是<code>经受时延的确认</code>带来的效果。</p>
<hr>
<hr>
<hr>
<h2 id="TCP的成块数据流"><a href="#TCP的成块数据流" class="headerlink" title="TCP的成块数据流"></a>TCP的成块数据流</h2><p>在上一节说的是有关于交互数据流的一些东西，这一节介绍了关于成块数据流上的一些东西。</p>
<p>这一章介绍了滑动窗口协议、PUSH标志、慢启动和紧急方式，这些概念。</p>
<hr>
<h3 id="滑动窗口协议"><a href="#滑动窗口协议" class="headerlink" title="滑动窗口协议"></a>滑动窗口协议</h3><p>在滑动窗口之前，书上已经介绍了停止等待协议（停等协议），这个协议十分简单：
<code>发送方发送一个报文之后，必须等到这个报文的ACK到来，才能发送下一个报文</code>。</p>
<p>在成块数据传输时（例如传一个文件），如果使用停等协议来进行传输，那么速度就太慢了，相当于每个RTT时间只能传输一个报文，
传输效率基本只与RTT时间有关，链路容量再大也是白给。所以这时候就需要同时传输多个报文，也就形成了滑动窗口协议。</p>
<p><img src="/images/network/tcp-ip/1-5.png" alt="image" title="滑动窗口"></p>
<p>如书中所给的图，1、2、3…10、11…等就表示报文，数字就是它们的序号。方框就表示当前时刻窗口的位置，
可以看到窗口外的左边是<strong>已发送并且已确认</strong>的报文，窗口外的右边是<code>还未发送也不能发送</code>的报文，
窗口内的左右两边则是<code>已发送但还未确认</code>、<code>未发送但可以发送</code>的报文。</p>
<p>显然之所以叫做滑动窗口，就是因为它会随着报文的发送确认而不断的向右滑动。</p>
<p>书中使用三个术语来描述窗口左右边沿的运动：</p>
<blockquote>
<ol>
<li>称窗口左边沿向右边沿靠近为窗口合拢。这种现象发生在数据被发送和确认时。</li>
<li>当窗口右边沿向右移动时将允许发送更多的数据，我们称之为窗口张开。这种现象发生在另一端的接收进程读取已经确认的数据并释放了T C P的接收缓存时。</li>
<li>当右边沿向左移动时，我们称之为窗口收缩。<code>Host Requirements RFC</code>强烈建议不要使用这种方式。但TCP必须能够在某一端产生这种情况时进行处理。</li>
</ol>
</blockquote>
<p>另外注意到，<strong>一个ACK是对它之前所有报文的确认</strong>。</p>
<p><strong>窗口大小：</strong></p>
<p>需要注意到的是，滑动窗口<strong>存在于发送方</strong>，但是它的窗口的大小是由<strong>接收方提供的</strong>。</p>
<p>观察书中给出的例子：</p>
<p><img src="/images/network/tcp-ip/1-12.png" alt="image" title="窗口大小"></p>
<ul>
<li>在第二个报文（SYN）中，接收方通报窗口大小为<code>6144</code>，mss大小为<code>1024</code>。</li>
<li>由于窗口大小为<code>6144</code>，发送方直接发送了6个1024大小的报文。</li>
<li>接收方发出<code>ACK 6145</code>，通报窗口大小为<code>2048</code>。</li>
<li>发送方收到<code>ACK 6145</code>，刚才窗口内的6个报文全部被确认，窗口左边直接移动到6145字节位置，由于通报窗口大小为<code>2048</code>，窗口右边沿移动到<code>8192</code>位置。</li>
<li>发送方将现在窗口里面的两个报文发出。</li>
<li>接收方不断发出ACK，确认报文接收以及通报窗口大小，可惜发送方已经没有更多的数据发送了。</li>
</ul>
<hr>
<h3 id="PUSH标志"><a href="#PUSH标志" class="headerlink" title="PUSH标志"></a>PUSH标志</h3><p>可以看到上面的例子中，一些报文被设置了PSH标志，直接引用书中所述，描述了PUSH标志的作用：</p>
<blockquote>
<p>发送方使用该标志通知接收方将所收到的数据全部提交给接收进程。
这里的数据包括与PUSH一起传送的数据以及接收方TCP已经为接收进程收到的其他数据。</p>
</blockquote>
<p>这里描述了PUSH标志的用途：</p>
<blockquote>
<p>通过允许客户应用程序通知其TCP设置PUSH标志，
客户进程通知TCP在向服务器发送一个报文段时不要因等待额外数据而使已提交数据在缓存中滞留。
类似地，当服务器的TCP接收到一个设置了PUSH标志的报文段时，
它需要立即将这些数据递交给服务器进程而不能等待判断是否还会有额外的数据到达。</p>
</blockquote>
<p>也就是说，在没有设置PUSH的情况下，TCP收到数据之后，可能并不会立即上传给应用，也许它想要等到更多的数据到来再一起上传给应用，
以提高效率。</p>
<p>但是例如Rlogin这种交互式应用，每次就发送一个字节的数据过去，如果TCP想要等待更多的数据到来，则可能会增大延迟，
这时就需要PUSH标志来告知TCP不要进行等待，即使只收到一个字节数据，也要立即上传给应用。</p>
<p>但是书中又说了:</p>
<blockquote>
<p>然而，目前大多数的API没有向应用程序提供通知其TCP设置PUSH标志的方法。的确，
许多实现程序认为PUSH标志已经过时，一个好的TCP实现能够自行决定何时设置这个标志。</p>
</blockquote>
<p>需要注意到不同的TCP实现方式处理PUSH标志时可能也有所不同，
例如<code>由于源于伯克利的实现一般从不将接收到的数据推迟交付给应用程序，因此它们忽略所接收的PUSH标志。</code></p>
<p>PUSH标志通常在以下情形被设置：</p>
<ol>
<li>应用的一次数据写入完成。</li>
<li>发送缓冲区没有更多的数据等待发送。</li>
</ol>
<p>当然，还是有些时候还是挺玄学，具体还是要看使用TCP版本的实现。</p>
<hr>
<h3 id="慢启动"><a href="#慢启动" class="headerlink" title="慢启动"></a>慢启动</h3><p>在滑窗协议那里所举的例子中，发送方首先就直接发送了6个报文，看起来这样可以提高发送效率，
但是实际中需要考虑整个路由路径上的拥塞情况，如果每个人都没有节制的发送自己的报文，
那么结果就是路径堵死，谁都别想成功发送报文。</p>
<p>为了避免这种情况，就需要每个人限制自己的发送速度，那么如何知道自己能以多快的速率发送呢？
既然全靠自觉，那么就只能一点点去试，逐渐增加自己的发送速度，直到丢包，这就是<strong>慢启动</strong>。</p>
<blockquote>
<p>慢启动为发送方的TCP增加了另一个窗口：拥塞窗口(congestion window)，记为cwnd。</p>
</blockquote>
<ul>
<li>当与另一个网络的主机建立TCP连接时，拥塞窗口被初始化为1个报文段（即另一端通告的报文段大小）。</li>
<li>每收到一个ACK，拥塞窗口就增加一个报文段（cwnd以字节为单位，但是慢启动以报文段大小为单位进行增加）。</li>
</ul>
<p>需要注意到发送方取<strong>拥塞窗口</strong>与<strong>通告窗口</strong>中的<strong>最小值</strong>作为发送上限。
<strong>拥塞窗口</strong>是<strong>发送方</strong>使用的流量控制，而<strong>通告窗口</strong>则是<strong>接收方</strong>使用的流量控制。</p>
<p>注意到虽然名字是<code>慢</code>启动，但是其实启动速度是指数增长的，如书上的例子（先不考虑通告窗口的大小）：</p>
<p><img src="/images/network/tcp-ip/1-13.png" alt="image" title="慢启动"></p>
<ul>
<li>初始化拥塞窗口大小为1，发送一个报文。</li>
<li>收到<code>ACK 513</code>，拥塞窗口大小增加为2，窗口右移，发送两个报文。</li>
<li>收到<code>ACK 1025</code>，拥塞窗口大小增加为3，窗口右移，发送两个报文。</li>
<li>收到<code>ACK 1537</code>，拥塞窗口大小增加为4，窗口右移，发送两个报文。</li>
<li>收到<code>ACK 2049</code>、<code>ACK 2561</code>，拥塞窗口大小增加为6，窗口右移，发送最后一个报文。</li>
</ul>
<p>在这一步时，一共发送了8个报文，收到了5个ACK，还有3个报文没有收到ACK，当这三个ACK都收到时，
拥塞窗口大小将变为9。</p>
<p>如果发出的报文ACK立刻返回，那么拥塞窗口的大小变化规律就是：</p>
<ul>
<li>1 -&gt; 2</li>
<li>2 -&gt; 4</li>
<li>4 -&gt; 8</li>
<li>…</li>
</ul>
<p>也就是一个RTT时间之后，窗口大小就会翻倍，所以说是指数增长。</p>
<hr>
<h3 id="成块数据的吞吐量"><a href="#成块数据的吞吐量" class="headerlink" title="成块数据的吞吐量"></a>成块数据的吞吐量</h3><blockquote>
<p>通常发送一个分组的时间取决于两个因素：
传播时延（由光的有限速率、传输设备的等待时间等引起）
和一个取决于媒体速率（即媒体每秒可传输的比特数）的发送时延。</p>
<p>对于一个给定的两个接点之间的通路，传播时延一般是固定的，而发送时延则取决于分组的大小。
在速率较慢的情况下发送时延起主要作用，而在千兆比特速率下传播时延则占主要地位。</p>
</blockquote>
<p>如书中所举的例子：</p>
<p><img src="/images/network/tcp-ip/1-14.png" alt="image" title="成块数据的吞吐量举例"></p>
<p>在例子中的最后时刻，发送方不断发送报文和接收ACK，已经填满了整个路径，
这时窗口的增加已经无法增加发送速率了，也就是<strong>连接的理想稳定状态</strong>。</p>
<p><strong>带宽时延乘积：</strong></p>
<p>这里给出了<strong>通道容量</strong>的计算公式，注意到它<strong>并不是</strong>吞吐量。</p>
<p>正如上面的例子中的图，如果一个报文完全写入通道需要时间A，RTT大小为B，
相当于发送方不间断的写入报文时，从第一个报文开始写入，直到第一个ACK到达发送方时，
发送方一共发送了$\frac{B}{A}$个报文。</p>
<p>假设一个报文的长度为C，那么<strong>通道容量为</strong>：</p>
<script type="math/tex; mode=display">
capacity(bit)=\frac{B}{A} * C = B * \frac{C}{A}</script><p>注意到B就是RTT时间，$\frac{C}{A}$就是链路带宽，即：</p>
<script type="math/tex; mode=display">
capacity(bit)=bandwidth(b/s) \times "round \ trip \ time(s)"</script><p>计算这个值的意义在于指导TCP的缓存大小，如果发送或者接收缓冲小于<strong>通道容量</strong>，
那么传输速度就一定达不到理论上的最大值，因为当发送缓冲塞满时，就会停止发送报文。</p>
<p><strong>拥塞：</strong></p>
<blockquote>
<p>当数据到达一个大的管道（如一个快速局域网）并向一个较小的管道（如一个较慢的广域网）发送时便会发生拥塞。
当多个输入流到达一个路由器，而路由器的输出流小于这些输入流的总和时也会发生拥塞。</p>
</blockquote>
<p>正如书中的例子：</p>
<p><img src="/images/network/tcp-ip/1-15.png" alt="image" title="瓶颈路由"></p>
<p>整个链路的链路带宽由最小的那部分决定。</p>
<hr>
<h3 id="紧急方式"><a href="#紧急方式" class="headerlink" title="紧急方式"></a>紧急方式</h3><blockquote>
<p>TCP提供了<code>紧急方式(urgent mode)</code>，它使一端可以告诉另一端有些具有某种方式的“紧急数据”已经放置在普通的数据流中。
另一端被通知这个紧急数据已被放置在普通数据流中，由接收方决定如何处理。</p>
</blockquote>
<p>这个东西目前还不好理解，它是一种在已有的TCP连接上传输紧急数据的方式。</p>
<p>具体参考：</p>
<p><a href="https://www.cnblogs.com/c-slmax/p/5553857.html" target="_blank" rel="external">TCP带外数据</a></p>
<p><a href="https://blog.csdn.net/aprilweet/article/details/62421995" target="_blank" rel="external">带外数据：TCP紧急模式分析</a></p>
<hr>
<hr>
<hr>
<h2 id="TCP的超时与重传"><a href="#TCP的超时与重传" class="headerlink" title="TCP的超时与重传"></a>TCP的超时与重传</h2><p><strong>TCP提供可靠的运输层</strong>，也就是说，使用TCP传输数据，它保证接收端能收到发送端所发给它的所有数据。</p>
<p>达到<strong>可靠</strong>的阻碍在于报文在传输过程中会发生丢包，而且你还无法知道这个丢包的发生，
所以就需要使用超时来判断是否丢包，使用重传来重新传输丢掉的数据。</p>
<hr>
<h3 id="往返时间测量"><a href="#往返时间测量" class="headerlink" title="往返时间测量"></a>往返时间测量</h3><blockquote>
<p>TCP超时与重传中最重要的部分就是对一个给定连接的往返时间（RTT）的测量。</p>
</blockquote>
<p>假设RTT时间为A秒，正常情况下，当一个报文发出后的A秒，发送方就应该接收到ACK，
那如果没有收到ACK，我们就有理由怀疑报文丢失了，考虑到网络的抖动，我们可能再等待一段时间，
如果这时还没有收到ACK，那么就可以考虑开始重传了。</p>
<p>所以，超时时间的计算是基于RTT时间的，在一个局域网里面，超时时间相比与一个广域网来说，肯定是要短一点的。</p>
<blockquote>
<p>首先TCP必须测量在发送一个带有特别序号的字节和接收到包含该字节的确认之间的RTT。</p>
</blockquote>
<p>注意到发送报文与ACK并不是一一对应的，一个报文2可以通过<code>ACK 5</code>来确认，所以这里书中表述为<code>接收到包含该字节的确认</code>。</p>
<p>由于这个问题和网络抖动会造成测量的RTT时间在一定范围内变化，那么这里就需要多次对RTT的测量来计算得到一个相对准确的值，
一种简单的平滑方式如下：</p>
<script type="math/tex; mode=display">
R \leftarrow \alpha R + (1 - \alpha ) M</script><p>其中$R$表示平滑得到的RTT，$M$表示测量得到的RTT，$\alpha$为平滑因子，推荐值0.9。</p>
<p>在<code>RFC 793</code>中推荐的重传超时时间<strong>RTO</strong>（Retransmission Time Out）的值应该设置为：</p>
<script type="math/tex; mode=display">
RTO=R \beta</script><p>这里的$\beta$为时延离散因子，推荐值为2。也就是说超时时间为2倍的RTT。</p>
<p><strong>Jacobson</strong>认为这种方式太简单，容易更不上网络的变化，他认为方差也是一个需要考虑的因素，
所以它提出了下面的RTO估计方法：</p>
<script type="math/tex; mode=display">
Err = M - A \\
A \leftarrow A + gErr \\
D \leftarrow D + h(|Err| - D) \\
RTO = A + 4D</script><p>这里$M$表示测量得到的RTT，$A$表示平滑得到的RTT，$D$表示平滑得到的均值偏差，$g$取值$\frac{1}{8}$，$h$取值0.25。</p>
<p>观察这个计算方式可以发现，当$Err$持续是一个很小的值，也就是RTT的测量值比较稳定时，$D$趋于0，RTO就趋于$A$，
也就是RTO就是RTT，而上面简单的计算公式中，RTO总是两倍的RTT。这其实很好理解，如果RTT的测量值比较稳定，
就证明RTT波动很小，一旦某个报文在一个RTT范围内没有ACK回来，那么它就是一个异常点，大概率是发生了丢包，
所以立刻开始重传，而不是等待两倍的RTT时间。</p>
<p><strong>Karn算法：</strong></p>
<blockquote>
<p>在重传数据的确认最后到达之前，不能更新RTT估计器。</p>
</blockquote>
<p>因为所收到的重传数据的ACK，无法确定是哪一次重传报文的ACK。</p>
<p>另外，在重传数据时，已经采用了<strong>指数退避</strong>的策略来计算RTO，每次重传都将RTO乘2。</p>
<p><strong>往返时间RTT的测量：</strong></p>
<blockquote>
<p>大多数源于伯克利的TCP实现在任何时候对每个连接仅测量一次RTT值。
在发送一个报文段时，如果给定连接的定时器已经被使用，则该报文段不被计时。</p>
</blockquote>
<p>这里的定时器使用<strong>滴答计数器</strong>来进行：</p>
<p><img src="/images/network/tcp-ip/1-17.png" alt="image" title="滴答"></p>
<p>可以看到对于RTT的测量并不是精确的，而是通过它经历了几个滴答来计算它的时间，
就像图中的第一次测量，即使实际上是1.061秒，但是它经过了3个滴答，所以被记录为1.5秒。</p>
<p><strong>RTO的初始化以及重传时的计算：</strong></p>
<blockquote>
<p>变量$A$和$D$分别被初始化为0和3秒。</p>
</blockquote>
<p>也就是说初始的重传时间就是：</p>
<script type="math/tex; mode=display">
RTO_{init}=A+2D=0 + 2 \times 3 = 6s</script><blockquote>
<p>因子2D只在这个初始化计算中使用。正如前面提到的，以后使用4D和A相加来计算RTO。</p>
</blockquote>
<p>那么第一次超时时间就是6s，当接着发生第二次超时的情况下，首先使用正确的公式计算$RTO_1$，再进行指数退避（乘2）：</p>
<script type="math/tex; mode=display">
RTO_2 = 2 RTO_1 = 2 (A + 4D) = 2(0 + 4 \times 3) = 24s</script><p>再往后接着进行指数退避：</p>
<ul>
<li>$RTO_3 = 2RTO_2 = 48s$</li>
<li>$RTO_4 = 2RTO_3 = 64s$</li>
<li>$RTO_5 = 64s$</li>
<li>$RTO_6 = 64s$</li>
<li>$RTO_7 = 64s$</li>
<li>…</li>
</ul>
<p><img src="/images/network/tcp-ip/1-16.png" alt="image" title="RTO初始时的变化情况"></p>
<p><strong>注意到指数退避的最大值为64s</strong>。</p>
<hr>
<h3 id="拥塞避免算法"><a href="#拥塞避免算法" class="headerlink" title="拥塞避免算法"></a>拥塞避免算法</h3><blockquote>
<p>拥塞避免算法是一种处理丢失分组的方法。 </p>
<p>该算法假定由于分组受到损坏引起的丢失是非常少的（远小于1%），
因此分组丢失就意味着在源主机和目的主机之间的某处网络上发生了拥塞。 </p>
<p>有<strong>两种</strong>分组丢失的指示：发生超时和接收到重复的确认。</p>
</blockquote>
<p>注意到之前说了慢启动算法，它会一直增加cwnd窗口大小，那么这样增长下去，很可能到达一个上限，造成网络拥塞，
以至于产生丢包。那么此时仅仅重传丢失的报文是不够的，因为现在的cwnd窗口大小明显是过大了的，
所以还要将它缩小，这就是这里的<strong>拥塞避免算法</strong>。</p>
<p>拥塞避免算法和慢启动算法需要对每个连接维持两个变量：一个拥塞窗口cwnd和一个慢启动门限ssthresh。</p>
<p>这样得到的算法的工作过程如下：</p>
<ol>
<li><p>对一个给定的连接，初始化cwnd为1个报文段，ssthresh为65535个字节。</p>
</li>
<li><p>TCP输出例程的输出不能超过cwnd和接收方通告窗口的大小。拥塞避免是发送方使用的流量控制，
而通告窗口则是接收方进行的流量控制。前者是发送方感受到的网络拥塞的估计，
而后者则与接收方在该连接上的可用缓存大小有关。</p>
</li>
<li><p>当拥塞发生时（超时或收到重复确认），ssthresh被设置为当前窗口大小的一半
（cwnd和接收方通告窗口大小的最小值，但最少为2个报文段）。
此外，如果是超时引起了拥塞，则cwnd被设置为1个报文段（这就是慢启动）。</p>
</li>
<li><p>当新的数据被对方确认时，就增加cwnd，但增加的方法依赖于我们是否正在进行慢启动或拥塞避免。
如果cwnd小于或等于ssthresh，则正在进行慢启动，否则正在进行拥塞避免。
慢启动一直持续到我们回到当拥塞发生时所处位置的一半时候才停止（因为我们记录了在步骤2中给我们制造麻烦的窗口大小的一半），
然后转为执行拥塞避免。</p>
</li>
</ol>
<p><strong>ssthresh</strong>：标记上一次拥塞发生时，窗口大小的一半。</p>
<p>也就是说，首先慢启动（其实是指数增长），然后为了降低窗口增长速度，
所以需要在cwnd超过ssthresh时，降低窗口的增长速度，进入拥塞避免增长模式。</p>
<p><strong>拥塞避免</strong>：求每次收到一个确认时将cwnd增加1/cwnd。也就是说一个往返时间内最多为cwnd增加1个报文段。</p>
<p><img src="/images/network/tcp-ip/1-18.png" alt="image" title="从慢启动到拥塞避免"></p>
<hr>
<h3 id="快速重传与快速恢复算法"><a href="#快速重传与快速恢复算法" class="headerlink" title="快速重传与快速恢复算法"></a>快速重传与快速恢复算法</h3><blockquote>
<p>在收到一个失序的报文段时，TCP立即需要产生一个ACK（一个重复的ACK）。
这个重复的ACK不应该被迟延。
该重复的ACK的目的在于让对方知道收到一个失序的报文段，并告诉对方自己希望收到的序号。</p>
</blockquote>
<p>直接先来看算法过程：</p>
<ol>
<li><p>当收到第3个重复的ACK时（不算第一个正常的ACK），将ssthresh设置为当前拥塞窗口cwnd的一半。重传丢失的报文段。
设置cwnd为ssthresh加上3倍的报文段大小。</p>
</li>
<li><p>每次收到另一个重复的ACK时，cwnd增加1个报文段大小并发送1个分组（如果新的cwnd允许发送）。</p>
</li>
<li><p>当下一个确认新数据的ACK到达时，设置cwnd为ssthresh（在第1步中设置的值）。
这个ACK应该是在进行重传后的一个往返时间内对步骤1中重传的确认。
另外，这个ACK也应该是对丢失的分组和收到的第1个重复的ACK之间的所有中间报文段的确认。
这一步采用的是拥塞避免，因为当分组丢失时我们将当前的速率减半。</p>
</li>
</ol>
<p>这个算法由<strong>收到3个重复的ACK</strong>而启动，其中的道理在于：</p>
<ul>
<li><p>首先TCP的发送顺序并不等于接收顺序，后发送的报文可能先被接收方所接收，这时也会产生重复ACK，所以这个值不能定得太小。</p>
</li>
<li><p>这大概率证明了这个ACK之后的那个报文丢失，所以无需等到超时重传计时器，而是立即重传。</p>
</li>
<li><p>丢失报文后面至少有三个报文得到了接收，并且ACK也成功的传送了回来，侧面证明了网络状况还好，所以没有必要直接进行慢启动。</p>
</li>
<li><p>每一个新的重复ACK，就代表一个报文被接收，更加证明了网络状况并不差。</p>
</li>
</ul>
<p><img src="/images/network/tcp-ip/1-19.png" alt="image" title="拥塞避免的例子"></p>
<p>看上面书中所举的例子，可以看到它的各个变量的变化情况就与上面的算法描述一致。</p>
<hr>
<h3 id="按每条路由进行度量"><a href="#按每条路由进行度量" class="headerlink" title="按每条路由进行度量"></a>按每条路由进行度量</h3><blockquote>
<p>当一个TCP连接关闭时，如果已经发送了足够多的数据来获得有意义统计资料，且目的结点的路由表项不是一个默认的表项，
那么下列信息就保存在路由表项中以备下次使用：被平滑的RTT、被平滑的均值偏差以及慢启动门限。
所谓“足够多的数据”是指16个窗口的数据，这样就可得到16个RTT采样，从而使被平滑的RTT过滤器能够集中在正确结果的5%以内。</p>
<p>当建立一个新的连接时，不论是主动还是被动，
如果该连接将要使用的路由表项已经有这些度量的值，则用这些度量来对相应的变量进行初始化。</p>
</blockquote>
<hr>
<h3 id="ICMP的差错"><a href="#ICMP的差错" class="headerlink" title="ICMP的差错"></a>ICMP的差错</h3><blockquote>
<p>TCP能够遇到的最常见的ICMP差错就是源站抑制、主机不可达和网络不可达。</p>
</blockquote>
<p>当前基于伯克利的实现对这些错误的处理是：</p>
<ol>
<li><p>一个接收到的源站抑制引起拥塞窗口cwnd被置为1个报文段大小来发起慢启动，但是慢启动门限ssthresh没有变化，
所以窗口将打开直至它或者开放了所有的通路（受窗口大小和往返时间的限制）或者发生了拥塞。</p>
</li>
<li><p>一个接收到的主机不可达或网络不可达实际上都被忽略，因为这两个差错都被认为是短暂现象。
这有可能是由于中间路由器被关闭而导致选路协议要花费数分钟才能稳定到另一个替换路由。
在这个过程中就可能发生这两个ICMP差错中的一个，但是连接并不必被关闭。
相反，TCP试图发送引起该差错的数据，尽管最终有可能会超时。
当前基于伯克利的实现记录发生的ICMP差错，如果连接超时，ICMP差错被转换为一个更合适的的差错码而不是“连接超时”。</p>
</li>
</ol>
<p>需要了解到对于ICMP的差错，TCP有针对的处理就行了。</p>
<hr>
<h3 id="重新分组"><a href="#重新分组" class="headerlink" title="重新分组"></a>重新分组</h3><blockquote>
<p>当TCP超时并重传时，它不一定要重传同样的报文段。相反，TCP允许进行重新分组而发送一个较大的报文段，
这将有助于提高性能（当然，这个较大的报文段不能够超过接收方声明的MSS）。
在协议中这是允许的，因为TCP是使用字节序号而不是报文段序号来进行识别它所要发送的数据和进行确认。</p>
</blockquote>
<p>观察书中所举的例子：</p>
<p><img src="/images/network/tcp-ip/1-20.png" alt="image" title="重新分组"></p>
<p>可以看到<code>13:27</code>字节在重传过程中，又键入了6个字符，于是重传就变成了<code>13:33</code>字节，这就是TCP的重新分组。</p>
<hr>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/aprilweet/article/details/62421995" target="_blank" rel="external">带外数据：TCP紧急模式分析</a></p>
<p><a href="https://www.cnblogs.com/c-slmax/p/5553857.html" target="_blank" rel="external">TCP带外数据</a></p>
]]></content>
    
    <summary type="html">
    
      就是简单的记录一下其中所提到的概念，加深记忆。
    
    </summary>
    
      <category term="network" scheme="http://yoursite.com/categories/network/"/>
    
    
      <category term="TCP/IP" scheme="http://yoursite.com/tags/TCP-IP/"/>
    
  </entry>
  
  <entry>
    <title>练习使用FFmpeg将视频转码为hls，并添加水印</title>
    <link href="http://yoursite.com/2019/08/08/2019-08-08-ffmpeg-practice/"/>
    <id>http://yoursite.com/2019/08/08/2019-08-08-ffmpeg-practice/</id>
    <published>2019-08-08T02:30:00.000Z</published>
    <updated>2019-08-23T08:13:12.410Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h2><ul>
<li>一个高清的视频（这样转分辨率后起码不会糊）。</li>
<li>一个高清的水印图片（理由同上）。</li>
<li>FFmpeg，直接官网下一个就可以，这里我使用的就是FFmpeg.exe。</li>
</ul>
<p>下面将各个部分拆开练习，最后再合在一起。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ffmpeg -i 11.mp4 </div><div class="line">-vf &quot;movie=wm.png [logo];[logo][in]scale2ref=w=oh*mdar:h=ih/10[logo-rescale][video-out];[video-out][logo-rescale]overlay=x=main_w/10-w/2:y=main_h/10-h/2 [out]&quot;</div><div class="line">-codec:v libx264 -s 1920x1080 -codec:a mp3 </div><div class="line">-map 0 -f ssegment -segment_format mpegts -segment_list playlist.m3u8 -segment_time 10 1080P%03d.ts</div></pre></td></tr></table></figure>
<hr>
<h2 id="一些基本命令"><a href="#一些基本命令" class="headerlink" title="一些基本命令"></a>一些基本命令</h2><hr>
<h3 id="1-转格式（容器转换）"><a href="#1-转格式（容器转换）" class="headerlink" title="1.转格式（容器转换）"></a>1.转格式（容器转换）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ffmpeg -i 11.mp4 out.avi</div></pre></td></tr></table></figure>
<p>直接在输出文件的后缀指定需要转的格式（容器）就行。</p>
<p><strong>这样转码是会使用默认编码器，需要设置转码为copy来达到视频质量无损失。参考设置视频编码。</strong></p>
<hr>
<h3 id="2-转分辨率"><a href="#2-转分辨率" class="headerlink" title="2.转分辨率"></a>2.转分辨率</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ffmpeg -i 11.mp4 -s 1280x720 out.mp4</div></pre></td></tr></table></figure>
<p>通过<code>-s 1280x720</code>指定分辨率为720P。</p>
<hr>
<h3 id="3-设置视频编码"><a href="#3-设置视频编码" class="headerlink" title="3.设置视频编码"></a>3.设置视频编码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ffmpeg -i 11.mp4 -s 1280x720 -codec:v libx264 -codec:a mp3 out.mp4</div></pre></td></tr></table></figure>
<p>这里通过<code>-codec:v libx264</code>指定视频编码格式为<code>x264</code>，通过<code>-codec:a mp3</code>指定音频编码格式为<code>mp3</code>。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ffmpeg -i 4K_BXJG.mp4 -codec:v copy -codec:a copy out.avi</div></pre></td></tr></table></figure>
<p>这里的转码格式被指定为<code>copy</code>，实际上FFmpeg就会省去编解码过程，速度非常快。</p>
<blockquote>
<p>Stream copy is a mode selected by supplying the copy parameter to the -codec option. It makes ffmpeg omit the decoding and encoding step for the specified stream, so it does only demuxing and muxing. It is useful for changing the container format or modifying container-level metadata.</p>
<p>Since there is no decoding or encoding, it is very fast and there is no quality loss. </p>
</blockquote>
<p>上面是官网中的描述，可以看到使用copy可以无损的转化容器格式。</p>
<hr>
<h3 id="4-转图片分辨率"><a href="#4-转图片分辨率" class="headerlink" title="4.转图片分辨率"></a>4.转图片分辨率</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ffmpeg -i wm.png -s 100x100 out.png</div></pre></td></tr></table></figure>
<p>可以看到转图片其实和转视频是同理的。</p>
<h3 id="5-流选择"><a href="#5-流选择" class="headerlink" title="5.流选择"></a>5.流选择</h3><p>一个正常的视频至少有两个流，一个视频流，一个音频流。</p>
<p>通过输入而不输出可以查看媒体文件信息：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ffmpeg -i 4K_BXJG.mp4</div><div class="line"></div><div class="line">Input #0, mov,mp4,m4a,3gp,3g2,mj2, from '4K_BXJG.mp4':</div><div class="line">  Metadata:</div><div class="line">    major_brand     : mp42</div><div class="line">    minor_version   : 0</div><div class="line">    compatible_brands: mp42mp41</div><div class="line">    creation_time   : 2017-02-04T16:09:19.000000Z</div><div class="line">  Duration: 00:00:54.02, start: 0.000000, bitrate: 39655 kb/s</div><div class="line">    Stream #0:0(eng): Video: h264 (High) (avc1 / 0x31637661), yuv420p(tv, bt709), 3840x2160 [SAR 1:1 DAR 16:9], 39366 kb/s, 23.98 fps, 23.98 tbr, 24k tbn, 47.95 tbc (default)</div><div class="line">    Metadata:</div><div class="line">      creation_time   : 2017-02-04T16:09:19.000000Z</div><div class="line">      handler_name    : ?Mainconcept Video Media Handler</div><div class="line">      encoder         : AVC Coding</div><div class="line">    Stream #0:1(eng): Audio: aac (mp4a / 0x6134706D), 48000 Hz, stereo, fltp, 317 kb/s (default)</div><div class="line">    Metadata:</div><div class="line">      creation_time   : 2017-02-04T16:09:19.000000Z</div><div class="line">      handler_name    : #Mainconcept MP4 Sound Media Handler</div></pre></td></tr></table></figure>
<p>可以看到这个mp4文件包含两个流，0号流为视频流，1号流为音频流。</p>
<p>同时输入两个媒体文件试试：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span>  ffmpeg -i 4K_Z4.mp4 -i 4K_BXJG.mp4</div><div class="line"></div><div class="line">Input #0, mov,mp4,m4a,3gp,3g2,mj2, from '4K_Z4.mp4':</div><div class="line">  Metadata:</div><div class="line">    major_brand     : isom</div><div class="line">    minor_version   : 512</div><div class="line">    compatible_brands: mp41mp42</div><div class="line">    creation_time   : 2015-01-05T13:14:01.000000Z</div><div class="line">  Duration: 00:02:22.56, start: 0.000000, bitrate: 44851 kb/s</div><div class="line">    Stream #0:0(eng): Video: h264 (High) (avc1 / 0x31637661), yuv420p(tv, bt709), 3840x2160 [SAR 1:1 DAR 16:9], 44717 kb/s, 50 fps, 50 tbr, 30k tbn, 100 tbc (default)</div><div class="line">    Metadata:</div><div class="line">      creation_time   : 2015-01-05T13:14:01.000000Z</div><div class="line">      encoder         : AVC Coding</div><div class="line">    Stream #0:1(eng): Audio: aac (LC) (mp4a / 0x6134706D), 44100 Hz, stereo, fltp, 128 kb/s (default)</div><div class="line">    Metadata:</div><div class="line">      creation_time   : 2015-01-05T13:14:01.000000Z</div><div class="line">Input #1, mov,mp4,m4a,3gp,3g2,mj2, from '4K_BXJG.mp4':</div><div class="line">  Metadata:</div><div class="line">    major_brand     : mp42</div><div class="line">    minor_version   : 0</div><div class="line">    compatible_brands: mp42mp41</div><div class="line">    creation_time   : 2017-02-04T16:09:19.000000Z</div><div class="line">  Duration: 00:00:54.02, start: 0.000000, bitrate: 39655 kb/s</div><div class="line">    Stream #1:0(eng): Video: h264 (High) (avc1 / 0x31637661), yuv420p(tv, bt709), 3840x2160 [SAR 1:1 DAR 16:9], 39366 kb/s, 23.98 fps, 23.98 tbr, 24k tbn, 47.95 tbc (default)</div><div class="line">    Metadata:</div><div class="line">      creation_time   : 2017-02-04T16:09:19.000000Z</div><div class="line">      handler_name    : ?Mainconcept Video Media Handler</div><div class="line">      encoder         : AVC Coding</div><div class="line">    Stream #1:1(eng): Audio: aac (mp4a / 0x6134706D), 48000 Hz, stereo, fltp, 317 kb/s (default)</div><div class="line">    Metadata:</div><div class="line">      creation_time   : 2017-02-04T16:09:19.000000Z</div><div class="line">      handler_name    : #Mainconcept MP4 Sound Media Handler</div></pre></td></tr></table></figure>
<p>可以发现流编号上面的规律，<code>0:0</code>、<code>0:1</code>表示第一个文件的两个流，<code>1:0</code>、<code>1:1</code>则表示第二个文件的两个流。</p>
<p><strong>提取视频流：</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ffmpeg -i 1080_BXJG.mp4 -map 0:0 -codec copy out.mp4</div></pre></td></tr></table></figure>
<p>上面的命令将原视频的视频流单独分离出来。</p>
<p><strong>合并音视频流：</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ffmpeg -i 1080_BXJG.mp4 -i 4K_Z4.mp4 -map 0:0 -codec copy -map 1:1 -codec copy out.mp4</div></pre></td></tr></table></figure>
<p>提取第一个视频的视频流，第二个视频的音频流，合并为out.mp4。</p>
<hr>
<hr>
<hr>
<h2 id="filter设置"><a href="#filter设置" class="headerlink" title="filter设置"></a>filter设置</h2><hr>
<h3 id="1-过滤器图"><a href="#1-过滤器图" class="headerlink" title="1.过滤器图"></a>1.过滤器图</h3><p>先看官方文档说的：</p>
<blockquote>
<p>Filtering in FFmpeg is enabled through the libavfilter library.</p>
<p>In libavfilter, a filter can have multiple inputs and multiple outputs. To illustrate the sorts of things that are possible, we consider the following filtergraph.</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">                [main]</div><div class="line">input --&gt; split ---------------------&gt; overlay --&gt; output</div><div class="line">            |                             ^</div><div class="line">            |[tmp]                  [flip]|</div><div class="line">            +-----&gt; crop --&gt; vflip -------+</div></pre></td></tr></table></figure>
<blockquote>
<p>This filtergraph splits the input stream in two streams, then sends one stream through the crop filter and the vflip filter, before merging it back with the other stream by overlaying it on top. </p>
</blockquote>
<p>filter即常说的滤镜，Filtering过程可以是一个多输入多输出的过程，多个输入的视频经过处理合并成一个或多个输出。</p>
<p>上面的过程的命令为：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ffmpeg -i INPUT -vf "split [main][tmp]; [tmp] crop=iw:ih/2:0:0, vflip [flip]; [main][flip] overlay=0:H/2" OUTPUT</div></pre></td></tr></table></figure>
<p>它的效果如下：</p>
<p><img src="/images/media/FFmpeg/1-1.png" alt="image" title="原视频"></p>
<p><img src="/images/media/FFmpeg/1-2.png" alt="image" title="转码后"></p>
<p>它将原视频复制（split），裁剪一半（crop），反转（cflip），覆盖（overlay）到原视频之上。</p>
<p>可以看到主要的处理过程在<code>-vf</code>之后，它就代表<code>filtergraph</code>也就是<strong>过滤器图</strong>（相似的还有<code>-filter_complex</code>），相当于定义了一个视频处理的过程。</p>
<p><strong>注意到：<code>-vf</code>不能有多个输入，而<code>-filter_complex</code>可以。</strong></p>
<hr>
<h3 id="2-label（标签）"><a href="#2-label（标签）" class="headerlink" title="2.label（标签）"></a>2.label（标签）</h3><p>标签用于对流进行标记，目前我只知道它一些简单的用法。</p>
<p>例如上面的命令中的过滤器图：</p>
<p><code>&quot;split [main][tmp]; [tmp] crop=iw:ih/2:0:0, vflip [flip]; [main][flip] overlay=0:H/2&quot;</code></p>
<ol>
<li>它将原视频进行split，将它复制为两个流，一个命名为<code>[main]</code>，一个命名为<code>[tmp]</code>。</li>
<li>它将<code>[tmp]</code>流进行crop操作和vfilp操作，处理之后的流命名为<code>[flip]</code>。</li>
<li>输入<code>[main]</code>和<code>[flip]</code>流，进行overlay（覆盖）操作，根据这里<code>[main][flip]</code>的先后关系，这里将<code>[flip]</code>覆盖到<code>[main]</code>之上。</li>
</ol>
<p>例如下面的命令，将第二个输入视频分辨率降低一半，然后覆盖到第一个视频之上：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ffmpeg -i 1080_BXJG.mp4 -i 1080_BXJG.mp4 -filter_complex "[1:0]scale=w=iw/2:h=ih/2[scaled]; [0][scaled] overlay" tmp1.mp4</div></pre></td></tr></table></figure>
<p>其中<code>&quot;[1:0]scale=w=iw/2:h=ih/2[scaled]; [0][scaled] overlay&quot;</code>：</p>
<ol>
<li><code>[1:0]</code>代表第二个视频的第一个流（视频流），将它的scale变为一半（<code>iw/2</code>和<code>ih/2</code>），然后标记为<code>[scaled]</code>。</li>
<li><code>[0]</code>就代表第一个输入的媒体文件，将<code>[scaled]</code>置于它之上然后输出。</li>
</ol>
<hr>
<h3 id="3-将视频分辨率降低一半"><a href="#3-将视频分辨率降低一半" class="headerlink" title="3.将视频分辨率降低一半"></a>3.将视频分辨率降低一半</h3><p>可以利用scale来完成，其中<code>iw</code>、<code>ih</code>分别代表输入的宽和高。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ffmpeg -i 11.mp4 -vf "[in]scale=w=iw/2:h=ih/2[out]" out.mp4</div></pre></td></tr></table></figure>
<p>为了展示效果，这里将降低了分辨率的视频覆盖到原视频之上：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ffmpeg -i 1080_BXJG.mp4 -filter_complex "[0:0]scale=w=iw/2:h=ih/2[scaled]; [0][scaled] overlay" tmp1.mp4</div></pre></td></tr></table></figure>
<p><img src="/images/media/FFmpeg/1-3.png" alt="image" title="分辨率降低一半"></p>
<hr>
<h3 id="4-为视频添加水印"><a href="#4-为视频添加水印" class="headerlink" title="4.为视频添加水印"></a>4.为视频添加水印</h3><p>为视频添加水印，也就是将水印覆盖到原视频之上，即<code>overlay</code>滤镜。</p>
<p><strong>简单覆盖：</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ffmpeg -i 1080_BXJG.mp4 -i wm.png -filter_complex overlay out.mp4</div></pre></td></tr></table></figure>
<p>简单覆盖时，没有对水印大小进行调整，会造成下面的结果：</p>
<p><img src="/images/media/FFmpeg/1-4.png" alt="image" title="简单覆盖"></p>
<p><strong>大小调整-1：</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ffmpeg -i 1080_BXJG.mp4 -i logo.png -filter_complex '[1]scale=w=200:h=-1[scaled]; [0][scaled]overlay' out.mp4</div></pre></td></tr></table></figure>
<p>使用<code>scale</code>滤镜来进行分辨率的调整，再将它覆盖到原视频之上：</p>
<p><img src="/images/media/FFmpeg/1-5.png" alt="image" title="水印分辨率调整"></p>
<p>可以看到这里成功的对水印的大小进行了调整，<strong>但是</strong>又有一点太小了。</p>
<p>那么问题来了，难道要不断的试来找到一个健康的分辨率吗？</p>
<p><strong>大小调整-2：</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ffmpeg -i 1080_BXJG.mp4 -i logo.png -filter_complex '[1][0]scale2ref=w=oh*mdar:h=ih/8[scaled][0-out]; [0-out][scaled]overlay' out.mp4</div></pre></td></tr></table></figure>
<p><code>scale2ref</code>滤镜有两个输入，它对第一个输入进行rescale，
但它与<code>scale</code>滤镜的区别在于，它使用第二个输入作为参考，来进行第一个输入的rescale。</p>
<p>这里的<code>[1][0]scale2ref=w=oh*mdar:h=ih/8[scaled][0-out]</code>中，ih指的就是参考输入<code>[0]</code>的宽度，
为了保证水印的横纵比，这里使用<code>oh*mdar</code>来定义水印的宽度。</p>
<p><img src="/images/media/FFmpeg/1-6.png" alt="image" title="水印分辨率调整"></p>
<p><strong>水印位置调整-1：</strong></p>
<p>可以看到上面水印都是贴着视频的左上角的，这里来对它的位置进行调整：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ffmpeg -i 1080_BXJG.mp4 -i logo.png -filter_complex '[1][0]scale2ref=w=oh*mdar:h=ih/8[scaled][0-out]; [0-out][scaled]overlay=x=300:y=300' out.mp4</div></pre></td></tr></table></figure>
<p>可以通过指定overlay的坐标来确定水印覆盖的位置（默认x=0，y=0，即左上角），这里将坐标指定在300，300，效果如下：</p>
<p><img src="/images/media/FFmpeg/1-7.png" alt="image" title="水印位置调整"></p>
<p><strong>水印位置调整-2：</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ffmpeg -i 1080_BXJG.mp4 -i logo.png -filter_complex '[1][0]scale2ref=w=oh*mdar:h=ih/8[scaled][0-out]; [0-out][scaled]overlay=x=main_w/10-w/2:y=main_h/10-h/2' out.mp4</div></pre></td></tr></table></figure>
<p>这里<code>main_w</code>和<code>main_h</code>指的就是视频输入（<code>[0-out]</code>）的宽和高，<code>w</code>和<code>h</code>则是水印输入（<code>[scaled]</code>）的宽和高，
这里将水印的中心点指定在视频输入的1/10宽和1/10高的位置。</p>
<p><img src="/images/media/FFmpeg/1-8.png" alt="image" title="水印位置调整"></p>
<hr>
<h2 id="转hls"><a href="#转hls" class="headerlink" title="转hls"></a>转hls</h2><p>hls即包括一个m3u(8)的索引文件，TS媒体分片文件和key加密串文件。</p>
<p>在ffmpeg中可以使用hls或者segment来实现。</p>
<hr>
<h3 id="使用segment-muxer"><a href="#使用segment-muxer" class="headerlink" title="使用segment muxer"></a>使用segment muxer</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ffmpeg -i 1080_BXJG.mp4 -f segment -segment_format mpegts -segment_list playlist.m3u8 -segment_list_size 0 -segment_time 5 out%03d.ts</div></pre></td></tr></table></figure>
<p>上面的命令将输入视频切割为5秒一片的ts文件。其中，<code>-segment_list playlist.m3u8</code>设置文件list输出到playlist.m3u8，
<code>-segment_list_size 0</code>设置playlist.m3u8里面将包含所有切分出来的分片，
<code>-segment_time 5</code>设置分片大小为5秒。</p>
<p>得到如下结果：</p>
<p><img src="/images/media/FFmpeg/1-9.png" alt="image" title="segment muxer切分"></p>
<hr>
<h3 id="使用hls-muxer"><a href="#使用hls-muxer" class="headerlink" title="使用hls muxer"></a>使用hls muxer</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ffmpeg -i 1080_BXJG.mp4 -map 0 -f hls -hls_segment_type mpegts -hls_list_size 6 -hls_time 5 -hls_segment_filename 'out%03d.ts' playlist.m3u8</div></pre></td></tr></table></figure>
<p>参数基本一样，就不多解释了，效果如下：</p>
<p><img src="/images/media/FFmpeg/1-10.png" alt="image" title="hls muxer切分"></p>
<hr>
<h2 id="转码，水印，hls"><a href="#转码，水印，hls" class="headerlink" title="转码，水印，hls"></a>转码，水印，hls</h2><p>将上面的命令进行总结，可以融合得到下面这条命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ffmpeg -i 1080_BXJG.mp4 -i logo.png \</div><div class="line">    -filter_complex '[1][0]scale2ref=w=oh*mdar:h=ih/8[scaled][0-out]; \</div><div class="line">    [0-out][scaled]overlay=x=main_w/10-w/2:y=main_h/10-h/2[over];[over]scale=w=1920:h=-1[out]' \</div><div class="line">    -map [out] -c:v h264 -c:a mp3 \</div><div class="line">    -f hls -hls_segment_type mpegts -hls_list_size 0 -hls_time 5 -hls_segment_filename 'out%03d.ts' playlist.m3u8</div></pre></td></tr></table></figure>
<p>这条命令将一个视频文件添加水印，并切割为5秒的ts小文件，同时将分辨率调整为1080P。</p>
<hr>
<h2 id="基于nginx的m3u8的点播、直播的实现"><a href="#基于nginx的m3u8的点播、直播的实现" class="headerlink" title="基于nginx的m3u8的点播、直播的实现"></a>基于nginx的m3u8的点播、直播的实现</h2><p>首先看我这里nginx的配置：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> cat /etc/nginx/nginx.conf</div><div class="line"></div><div class="line">    ...</div><div class="line">    server &#123;</div><div class="line">        listen       11111 default_server;</div><div class="line">        listen       [::]:11111 default_server;</div><div class="line">        server_name  long;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">            root html;</div><div class="line">            index index.html index.htm;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        location /hls &#123;</div><div class="line">            types &#123;</div><div class="line">                application/vnd.apple.mpegusr m3u8;</div><div class="line">                video/mp2t ts;</div><div class="line">            &#125;</div><div class="line">            root /mycephfs;</div><div class="line">            add_header Cache-Control no-cache;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div></pre></td></tr></table></figure>
<p>我这里将nginx的服务起在11111端口，文件目录为/mycephfs/hls，浏览器打开<code>192.168.90.233:11111</code>：</p>
<p><img src="/images/media/FFmpeg/1-11.png" alt="image" title="nginx"></p>
<p><strong>点播：</strong></p>
<p>将对应的hls文件放入nginx的文件目录下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ll /mycephfs/hls/videos/BXJG-hls/</div><div class="line"></div><div class="line">-rw-rw-r-- 1 cluster cluster 3938600 Aug 13 12:47 out000.ts</div><div class="line">-rw-rw-r-- 1 cluster cluster 1366196 Aug 13 12:47 out001.ts</div><div class="line">-rw-rw-r-- 1 cluster cluster  926088 Aug 13 12:47 out002.ts</div><div class="line">-rw-rw-r-- 1 cluster cluster 3286992 Aug 13 12:47 out003.ts</div><div class="line">-rw-rw-r-- 1 cluster cluster 7581852 Aug 13 12:47 out004.ts</div><div class="line">-rw-rw-r-- 1 cluster cluster 1721516 Aug 13 12:47 out005.ts</div><div class="line">-rw-rw-r-- 1 cluster cluster 3373848 Aug 13 12:48 out006.ts</div><div class="line">-rw-rw-r-- 1 cluster cluster 3193556 Aug 13 12:48 out007.ts</div><div class="line">-rw-rw-r-- 1 cluster cluster 5041220 Aug 13 12:48 out008.ts</div><div class="line">-rw-rw-r-- 1 cluster cluster 3229088 Aug 13 12:48 out009.ts</div><div class="line">-rw-rw-r-- 1 cluster cluster     370 Aug 13 12:48 playlist.m3u8</div></pre></td></tr></table></figure>
<p>直接使用potplayer打开链接<code>http://192.168.90.233:11111/hls/videos/BXJG-hls/playlist.m3u8</code>：</p>
<p><img src="/images/media/FFmpeg/1-12.png" alt="image" title="点播"></p>
<p>点播效果完成。</p>
<p><strong>直播：</strong></p>
<p>这里直播和点播的十分相似，它通过不断的修改<code>.m3u8</code>文件来达到直播的目的。</p>
<p>同样的，使用一个本地的视频文件当作输入流来进行直播，需要加入<code>-re</code>来模拟直播流的输入速度，<code>-stream_loop</code>来不断重复输入。
另外，这个过程会不断产生新的ts文件，需要将使用过的小文件删除，添加<code>-hls_list_size 5</code>将<code>.m3u8</code>文件中的数量控制为5个，
添加<code>-hls_flags delete_segments</code>开启自动删除过时的ts小文件。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ffmpeg -re -stream_loop -1 -i 1080_MS.mp4 -i logo.png \</div><div class="line">  -filter_complex '[1][0]scale2ref=w=oh*mdar:h=ih/8[scaled][0-out];[0-out][scaled]overlay=x=main_w/10-w/2:y=main_h/10-h/2[over]' \</div><div class="line">  -map [over] -c:v h264 -map 0 -c:a copy \</div><div class="line">  -f hls -hls_segment_type mpegts -hls_flags delete_segments -hls_list_size 5 -hls_time 10 -hls_segment_filename 'out%05d.ts' live.m3u8</div></pre></td></tr></table></figure>
<p>产生ts小文件的效果如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ls /mycephfs/hls/videos/MS/</div><div class="line"></div><div class="line">total 49306</div><div class="line">-rw-rw-r-- 1 cluster cluster     227 Aug 14 16:41 live.m3u8</div><div class="line">-rw-rw-r-- 1 cluster cluster 6638092 Aug 14 16:40 out00017.ts</div><div class="line">-rw-rw-r-- 1 cluster cluster 6406100 Aug 14 16:40 out00018.ts</div><div class="line">-rw-rw-r-- 1 cluster cluster 7560044 Aug 14 16:40 out00019.ts</div><div class="line">-rw-rw-r-- 1 cluster cluster 7581664 Aug 14 16:41 out00020.ts</div><div class="line">-rw-rw-r-- 1 cluster cluster 9148832 Aug 14 16:41 out00021.ts</div><div class="line">-rw-rw-r-- 1 cluster cluster 8171984 Aug 14 16:41 out00022.ts</div><div class="line">-rw-rw-r-- 1 cluster cluster 4980736 Aug 14 16:41 out00023.ts</div></pre></td></tr></table></figure>
<p>可以看到ffmpeg同一时刻只会保留6个ts文件。</p>
<p>同样的，使用potplayer打开连接<code>http://192.168.90.233:11111/hls/videos/MS/live.m3u8</code>，就可以看到直播，
和点播十分相似，不同之处在于，这里会不断的播放下去：</p>
<p><img src="/images/media/FFmpeg/1-13.png" alt="image" title="直播"></p>
<hr>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://ffmpeg.org/documentation.html" target="_blank" rel="external">FFmpeg Documentation</a></p>
<p><a href="https://www.cnblogs.com/my_life/articles/6520155.html" target="_blank" rel="external">使用FFMPEG生成HLS</a></p>
]]></content>
    
    <summary type="html">
    
      主要在于如何调整水印大小...
    
    </summary>
    
      <category term="media" scheme="http://yoursite.com/categories/media/"/>
    
    
      <category term="ffmpeg" scheme="http://yoursite.com/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>ceph+iscsi的简单使用</title>
    <link href="http://yoursite.com/2019/08/06/2019-08-06-ceph-iscsi/"/>
    <id>http://yoursite.com/2019/08/06/2019-08-06-ceph-iscsi/</id>
    <published>2019-08-06T08:09:00.000Z</published>
    <updated>2019-08-23T08:13:30.106Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h2><p>首先看到ceph官网给出的大体结构：</p>
<p><img src="/images/linux/ceph/ceph-iscsi-1.png" alt="image" title="大体结构"></p>
<p>可以看到主要分为ceph集群、rbd、iscsi网关、initiator（也就是客户端）构成。</p>
<p>那么所需的准备就如下：</p>
<ul>
<li>一个<strong>HEALTH_OK</strong>的ceph集群，还有剩余的存储空间（给创建的rbd使用）。</li>
</ul>
<p>这里是我所搭建的集群：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo ceph -s</div><div class="line"></div><div class="line">  cluster:</div><div class="line">    id:     51e9f534-b15a-4273-953c-9b56e9312510</div><div class="line">    health: HEALTH_OK</div><div class="line"> </div><div class="line">  services:</div><div class="line">    mon: 3 daemons, quorum node1,node2,node3</div><div class="line">    mgr: node1(active), standbys: node2, node3</div><div class="line">    mds: cephfs-1/1/1 up  &#123;0=node1=up:active&#125;</div><div class="line">    osd: 6 osds: 6 up, 6 in</div><div class="line"> </div><div class="line">  data:</div><div class="line">    pools:   2 pools, 64 pgs</div><div class="line">    objects: 508  objects, 1.9 GiB</div><div class="line">    usage:   26 GiB used, 6.0 TiB / 6.0 TiB avail</div><div class="line">    pgs:     64 active+clean</div></pre></td></tr></table></figure>
<ul>
<li><p>两台linux主机，作为iscsi网关，可以是集群中的主机。</p>
</li>
<li><p>一台linux主机，作为linux系统下的客户端。</p>
</li>
<li><p>一台windows主机，作为windows系统下的客户端。</p>
</li>
</ul>
<hr>
<h2 id="配置ceph-iscsi网关"><a href="#配置ceph-iscsi网关" class="headerlink" title="配置ceph-iscsi网关"></a>配置ceph-iscsi网关</h2><hr>
<h3 id="修改osd配置"><a href="#修改osd配置" class="headerlink" title="修改osd配置"></a>修改osd配置</h3><p>安装官网所述，先修改osd的配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[osd]</div><div class="line">osd heartbeat grace = 20</div><div class="line">osd heartbeat interval = 5</div></pre></td></tr></table></figure>
<p>将上述配置添加到所有ceph节点的<code>/etc/ceph/ceph.conf</code>文件中，
当然可以使用ceph-deploy来推送。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> vim ceph.conf</div><div class="line"><span class="meta">$</span> cat ceph.conf</div><div class="line"></div><div class="line">[global]</div><div class="line">fsid = 51e9f534-b15a-4273-953c-9b56e9312510</div><div class="line">mon_initial_members = node1, node2, node3</div><div class="line">mon_host = 192.168.90.233,192.168.90.234,192.168.90.235</div><div class="line">auth_cluster_required = cephx</div><div class="line">auth_service_required = cephx</div><div class="line">auth_client_required = cephx</div><div class="line">public_network = 192.168.0.0/16</div><div class="line"></div><div class="line">[osd]</div><div class="line">osd heartbeat grace = 20</div><div class="line">osd heartbeat interval = 5</div><div class="line"></div><div class="line"><span class="meta">$</span> ceph-deploy --overwrite-conf config push node1 node2 node3</div></pre></td></tr></table></figure>
<hr>
<h3 id="下载所需要的相关rpm包"><a href="#下载所需要的相关rpm包" class="headerlink" title="下载所需要的相关rpm包"></a>下载所需要的相关rpm包</h3><p>这里直接选择<strong>Using the Command Line Interface</strong>，感觉这个更靠谱一些。</p>
<p>按照官网所述，yum的repo中需要有以下rpm包：</p>
<p><img src="/images/linux/ceph/ceph-iscsi-2.png" alt="image" title="所需rpm包"></p>
<p>直接<code>yum install</code>试试可以发现，只有<strong>targetcli</strong>和<strong>python-rtslib</strong>能装上，而且版本都比官网说的要低，好吧，麻烦来了。</p>
<p>经过一段<strong>几个小时*</strong>的搜索……从下面链接中找到了rpm包：</p>
<ul>
<li><a href="https://github.com/ceph/ceph-iscsi/issues/64" target="_blank" rel="external">Build new RPM for 3.0</a></li>
<li><a href="https://github.com/ceph/ceph-ansible/issues/2707" target="_blank" rel="external">Missing ceph-iscsi-cli package</a></li>
</ul>
<p>新建repo文件：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo vim /etc/yum.repo.d/iscsi.repo</div><div class="line"><span class="meta">$</span> cat /etc/yum.repo.d/iscsi.repo</div><div class="line"></div><div class="line">[ceph-iscsi]</div><div class="line">name=Ceph-iscsi</div><div class="line">baseurl=https://4.chacra.ceph.com/r/ceph-iscsi/master/88f3f67981c7da15448f140f711a1a8413d450b0/centos/7/flavors/default/noarch/</div><div class="line">priority=1</div><div class="line">gpgcheck=0</div><div class="line"></div><div class="line">[tcmu-runner]</div><div class="line">name=tcmu-runner</div><div class="line">baseurl=https://3.chacra.ceph.com/r/tcmu-runner/master/eef511565078fb4e2ed52caaff16e6c7e75ed6c3/centos/7/flavors/default/x86_64/</div><div class="line">priority=1</div><div class="line">gpgcheck=0</div><div class="line"></div><div class="line">[python-rtslib]</div><div class="line">name=python-rtslib</div><div class="line">baseurl=https://2.chacra.ceph.com/r/python-rtslib/master/67eb1605c697b6307d8083b2962f5170db13d306/centos/7/flavors/default/noarch/</div><div class="line">priority=1</div><div class="line">gpgcheck=0</div></pre></td></tr></table></figure>
<p>这里我使用的是本地源，将上面的包下载到本地源：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo yum install --downloadonly --downloaddir=yum/ceph-iscsi/ targetcli python-rtslib tcmu-runner ceph-iscsi</div><div class="line"><span class="meta">$</span> createrepo -p -d -o yum/ yum/</div></pre></td></tr></table></figure>
<p>注意到这里没有包含<strong>targetcli</strong>的repo，因为没有找到，使用yum基础的Base源或者是Ceph源可以安装<code>targetcli-2.1.fb46-7.el7.noarch.rpm</code>，
虽然官网需要的是<code>targetcli-2.1.fb47 or newer package</code>，但在后续使用中发现没有影响，所以这里就不用管<strong>targetcli</strong>了。</p>
<p>那么这里下载下来的就是：</p>
<ul>
<li>targetcli-2.1.fb46-7.el7.noarch.rpm</li>
<li>python-rtslib-2.1.fb68-1.noarch.rpm</li>
<li>tcmu-runner-1.4.0-0.1.51.geef5115.el7.x86_64.rpm</li>
<li>ceph-iscsi-3.2-8.g88f3f67.el7.noarch.rpm</li>
</ul>
<hr>
<h3 id="ceph-iscsi网关初始配置"><a href="#ceph-iscsi网关初始配置" class="headerlink" title="ceph-iscsi网关初始配置"></a>ceph-iscsi网关初始配置</h3><p>如果使用的不是集群内的节点作为ceph-iscsi网关，那就需要进行一些初始的配置。</p>
<ol>
<li>安装ceph。</li>
<li>从集群中的一台机器上拷贝<code>/etc/ceph/ceph.conf</code>到本机的<code>/etc/ceph/ceph.conf</code>。</li>
<li>从集群中的一台机器上拷贝<code>/etc/ceph/ceph.client.admin.keyring</code>到本机的<code>/etc/ceph/ceph.client.admin.keyring</code>。</li>
</ol>
<p>当然第2和3步可以直接在deploy节点使用<code>ceph-deploy admin {node-gateway}</code>，<code>{node-gateway}</code>就表示网关节点的名字。</p>
<p>可见这里就是为了将ceph-iscsi网关节点变成一个admin节点。</p>
<p>这时在网关节点上应该可以执行相关命令操作ceph集群，例如<code>sudo ceph -s</code>查询当前集群的状态。</p>
<hr>
<h3 id="安装配置iscsi"><a href="#安装配置iscsi" class="headerlink" title="安装配置iscsi"></a>安装配置iscsi</h3><p>这里官网建议先切换到root用户，方便一点：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> su root</div></pre></td></tr></table></figure>
<p>在两个网关节点上都安装iscsi（注意到上面已经将相关包下载到了本地源，所以可以直接yum安装）：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> yum install -y ceph-iscsi</div></pre></td></tr></table></figure>
<p><strong>服务启动：</strong></p>
<p>先创建<code>rbd pool</code>，如果没有的话。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> ceph osd lspools</div><div class="line"></div><div class="line">1 cephfs_data</div><div class="line">2 cephfs_metadata</div><div class="line"></div><div class="line"><span class="meta">#</span> ceph osd pool create rbd 128</div><div class="line"></div><div class="line">pool 'rbd' created</div></pre></td></tr></table></figure>
<p>创建并修改<code>/etc/ceph/iscsi-gateway.cfg</code>文件：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> vim /etc/ceph/iscsi-gateway.cfg</div><div class="line"><span class="meta">#</span> cat /etc/ceph/iscsi-gateway.cfg</div><div class="line"></div><div class="line">[config]</div><div class="line"><span class="meta">#</span> Name of the Ceph storage cluster. A suitable Ceph configuration file allowing</div><div class="line"><span class="meta">#</span> access to the Ceph storage cluster from the gateway node is required, if not</div><div class="line"><span class="meta">#</span> colocated on an OSD node.</div><div class="line">cluster_name = ceph</div><div class="line"></div><div class="line"><span class="meta">#</span> Place a copy of the ceph cluster's admin keyring in the gateway's /etc/ceph</div><div class="line"><span class="meta">#</span> drectory and reference the filename here</div><div class="line">gateway_keyring = ceph.client.admin.keyring</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#</span> API settings.</div><div class="line"><span class="meta">#</span> The API supports a number of options that allow you to tailor it to your</div><div class="line"><span class="meta">#</span> local environment. If you want to run the API under https, you will need to</div><div class="line"><span class="meta">#</span> create cert/key files that are compatible for each iSCSI gateway node, that is</div><div class="line"><span class="meta">#</span> not locked to a specific node. SSL cert and key files *must* be called</div><div class="line"><span class="meta">#</span> 'iscsi-gateway.crt' and 'iscsi-gateway.key' and placed in the '/etc/ceph/' directory</div><div class="line"><span class="meta">#</span> on *each* gateway node. With the SSL files in place, you can use 'api_secure = true'</div><div class="line"><span class="meta">#</span> to switch to https mode.</div><div class="line"></div><div class="line"><span class="meta">#</span> To support the API, the bear minimum settings are:</div><div class="line">api_secure = false</div><div class="line"></div><div class="line"><span class="meta">#</span> Additional API configuration options are as follows, defaults shown.</div><div class="line"><span class="meta">#</span> api_user = admin</div><div class="line"><span class="meta">#</span> api_password = admin</div><div class="line"><span class="meta">#</span> api_port = 5001</div><div class="line">trusted_ip_list = 192.168.90.234,192.168.90.235</div></pre></td></tr></table></figure>
<p>上面<code>trusted_ip_list</code>填写的就是两台网关的ip（这里不讨论多网卡的情况）。</p>
<p>在另外一台网关上复制这个文件：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo scp cluster@node2:/etc/ceph/iscsi-gateway.cfg /etc/ceph/iscsi-gateway.cfg</div></pre></td></tr></table></figure>
<p>在两台网关上都开启rbd-target-api服务：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> systemctl daemon-reload</div><div class="line"><span class="meta">#</span> systemctl enable rbd-target-api</div><div class="line"><span class="meta">#</span> systemctl start rbd-target-api</div></pre></td></tr></table></figure>
<p><strong>配置：（在其中一台网关配置就行）</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> gwcli</div><div class="line">/&gt; cd /iscsi-targets</div><div class="line"></div><div class="line">/iscsi-targets&gt; create iqn.2003-01.com.redhat.iscsi-gw:iscsi-igw</div><div class="line">ok</div><div class="line"></div><div class="line">/iscsi-targets&gt; cd iqn.2003-01.com.redhat.iscsi-gw:iscsi-igw/gateways</div><div class="line"></div><div class="line">/iscsi-target...-igw/gateways&gt; create node2 192.168.90.234</div><div class="line">Adding gateway, sync'ing 0 disk(s) and 0 client(s)</div><div class="line">ok</div><div class="line"></div><div class="line">/iscsi-target...-igw/gateways&gt; create node3 192.168.90.235</div><div class="line">Adding gateway, sync'ing 0 disk(s) and 0 client(s)</div><div class="line">ok</div><div class="line"></div><div class="line">/iscsi-target...-igw/gateways&gt; cd /disks</div><div class="line"></div><div class="line">/disks&gt; create pool=rbd image=disk_1 size=200G</div><div class="line">ok</div><div class="line"></div><div class="line">/disks&gt; cd /iscsi-targets/iqn.2003-01.com.redhat.iscsi-gw:iscsi-igw/hosts</div><div class="line"></div><div class="line">/iscsi-target...csi-igw/hosts&gt; create iqn.1994-05.com.redhat:rh7-client</div><div class="line">ok</div><div class="line"></div><div class="line">/iscsi-target...at:rh7-client&gt; auth username=myiscsiusername password=myiscsipassword</div><div class="line">ok</div><div class="line"></div><div class="line">/iscsi-target...at:rh7-client&gt; disk add rbd/disk_1</div><div class="line">ok</div></pre></td></tr></table></figure>
<p>配置完成，可以看到我当前的目录结构：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/&gt; ls</div><div class="line">o- / ......................................................................... [...]</div><div class="line">  o- cluster ......................................................... [Clusters: 1]</div><div class="line">  | o- ceph .......................................................... [HEALTH_WARN]</div><div class="line">  |   o- pools .......................................................... [Pools: 3]</div><div class="line">  |   | o- cephfs_data ... [(x3), Commit: 0.00Y/2028052096K (0%), Used: 2029431878b]</div><div class="line">  |   | o- cephfs_metadata .... [(x3), Commit: 0.00Y/2028052096K (0%), Used: 77834b]</div><div class="line">  |   | o- rbd ................ [(x3), Commit: 200G/2028052096K (10%), Used: 15352b]</div><div class="line">  |   o- topology ................................................ [OSDs: 6,MONs: 3]</div><div class="line">  o- disks ........................................................ [200G, Disks: 1]</div><div class="line">  | o- rbd ............................................................ [rbd (200G)]</div><div class="line">  |   o- disk_1 ................................................ [rbd/disk_1 (200G)]</div><div class="line">  o- iscsi-targets ............................... [DiscoveryAuth: None, Targets: 1]</div><div class="line">    o- iqn.2003-01.com.redhat.iscsi-gw:iscsi-igw ..................... [Gateways: 2]</div><div class="line">      o- disks .......................................................... [Disks: 1]</div><div class="line">      | o- rbd/disk_1 ............................................... [Owner: node3]</div><div class="line">      o- gateways ............................................ [Up: 2/2, Portals: 2]</div><div class="line">      | o- node2 ............................................. [192.168.90.234 (UP)]</div><div class="line">      | o- node3 ............................................. [192.168.90.235 (UP)]</div><div class="line">      o- host-groups .................................................. [Groups : 0]</div><div class="line">      o- hosts .............................................. [Hosts: 1: Auth: CHAP]</div><div class="line">        o- iqn.1994-05.com.redhat:rh7-client .......... [Auth: CHAP, Disks: 1(200G)]</div><div class="line">          o- lun 0 ................................ [rbd/disk_1(200G), Owner: node3]</div></pre></td></tr></table></figure>
<hr>
<h2 id="linux客户端配置"><a href="#linux客户端配置" class="headerlink" title="linux客户端配置"></a>linux客户端配置</h2><p>在作为客户端的linux主机上。</p>
<p>安装相关组件：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo yum install -y iscsi-initiator-utils</div><div class="line"><span class="meta">$</span> sudo yum install -y device-mapper-multipath</div></pre></td></tr></table></figure>
<p>开启multipathd服务并进行配置：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo mpathconf --enable --with_multipathd y</div><div class="line"></div><div class="line"><span class="meta">$</span> sudo vim /etc/multipath.conf</div><div class="line"><span class="meta">$</span> sudo cat /etc/multipath.conf</div><div class="line"></div><div class="line">devices &#123;</div><div class="line">        device &#123;</div><div class="line">                vendor                 "LIO-ORG"</div><div class="line">                hardware_handler       "1 alua"</div><div class="line">                path_grouping_policy   "failover"</div><div class="line">                path_selector          "queue-length 0"</div><div class="line">                failback               60</div><div class="line">                path_checker           tur</div><div class="line">                prio                   alua</div><div class="line">                prio_args              exclusive_pref_bit</div><div class="line">                fast_io_fail_tmo       25</div><div class="line">                no_path_retry          queue</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改客户端名称：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo vim /etc/iscsi/initiatorname.iscsi</div><div class="line"><span class="meta">$</span> sudo cat /etc/iscsi/initiatorname.iscsi</div><div class="line"></div><div class="line">InitiatorName=iqn.1994-05.com.redhat:rh7-client</div></pre></td></tr></table></figure>
<p>修改chap认证配置文件：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo vim /etc/iscsi/iscsid.conf</div><div class="line"><span class="meta">$</span> sudo cat /etc/iscsi/iscsid.conf</div><div class="line"></div><div class="line">...</div><div class="line"><span class="meta">#</span> *************</div><div class="line"><span class="meta">#</span> CHAP Settings</div><div class="line"><span class="meta">#</span> *************</div><div class="line"></div><div class="line"><span class="meta">#</span> To enable CHAP authentication set node.session.auth.authmethod</div><div class="line"><span class="meta">#</span> to CHAP. The default is None.</div><div class="line">node.session.auth.authmethod = CHAP</div><div class="line"></div><div class="line"><span class="meta">#</span> To set a CHAP username and password for initiator</div><div class="line"><span class="meta">#</span> authentication by the target(s), uncomment the following lines:</div><div class="line">node.session.auth.username = myiscsiusername</div><div class="line">node.session.auth.password = myiscsipassword</div><div class="line">...</div></pre></td></tr></table></figure>
<p>发现target：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo iscsiadm -m discovery -t st -p 192.168.90.234</div><div class="line"></div><div class="line">192.168.90.234:3260,1 iqn.2003-01.org.linux-iscsi.rheln1</div><div class="line">192.168.90.235:3260,2 iqn.2003-01.org.linux-iscsi.rheln1</div></pre></td></tr></table></figure>
<p>登入target：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo iscsiadm -m node -T iqn.2003-01.org.linux-iscsi.rheln1 -l</div></pre></td></tr></table></figure>
<p>查看是否成功：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo multipath -ll</div><div class="line">mpatha (360014050fedd563975249adb2e84e978) dm-2 LIO-ORG ,TCMU device     </div><div class="line">size=200G features='1 queue_if_no_path' hwhandler='1 alua' wp=rw</div><div class="line">|-+- policy='queue-length 0' prio=50 status=active</div><div class="line">| `- 3:0:0:0 sdc 8:32 active ready running</div><div class="line">`-+- policy='queue-length 0' prio=10 status=enabled</div><div class="line">  `- 2:0:0:0 sdb 8:16 active ready running</div></pre></td></tr></table></figure>
<p>在fdisk中就可以直接看到这个“硬盘”：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo fdisk -l</div><div class="line"></div><div class="line">...</div><div class="line">Disk /dev/mapper/mpatha: 10.7 GB, 10737418240 bytes, 20971520 sectors</div><div class="line">Units = sectors of 1 * 512 = 512 bytes</div><div class="line">Sector size (logical/physical): 512 bytes / 512 bytes</div><div class="line">I/O size (minimum/optimal): 512 bytes / 524288 bytes</div><div class="line">...</div></pre></td></tr></table></figure>
<hr>
<h2 id="windows客户端配置"><a href="#windows客户端配置" class="headerlink" title="windows客户端配置"></a>windows客户端配置</h2><p>在<code>控制面板-&gt;管理工具-&gt;iSCSI 发起程序</code>：</p>
<p><img src="/images/linux/ceph/ceph-iscsi-3.png" alt="image" title="控制面板-&gt;管理工具"></p>
<p><img src="/images/linux/ceph/ceph-iscsi-4.png" alt="image" title="管理工具-&gt;iSCSI 发起程序"></p>
<p>修改发起程序名称：</p>
<p><img src="/images/linux/ceph/ceph-iscsi-5.png" alt="image" title="发起程序名称"></p>
<p>添加发现目标门户：</p>
<p><img src="/images/linux/ceph/ceph-iscsi-6.png" alt="image" title="添加发现目标门户"></p>
<p>可以看到出现目标：</p>
<p><img src="/images/linux/ceph/ceph-iscsi-7.png" alt="image" title="出现目标"></p>
<p>连接到该目标：</p>
<p><img src="/images/linux/ceph/ceph-iscsi-8.png" alt="image" title="连接目标"></p>
<p>修改高级设置：</p>
<p><img src="/images/linux/ceph/ceph-iscsi-9.png" alt="image" title="修改高级设置"></p>
<p>可以看到已连接：</p>
<p><img src="/images/linux/ceph/ceph-iscsi-10.png" alt="image" title="可以看到已连接"></p>
<p>可以在磁盘管理中看到硬盘已经连接：</p>
<p><img src="/images/linux/ceph/ceph-iscsi-11.png" alt="image" title="磁盘管理"></p>
<p>这里将它分为F盘，并且成功往里面放了一个文件：</p>
<p><img src="/images/linux/ceph/ceph-iscsi-12.png" alt="image" title="分配成为F盘"></p>
<p><img src="/images/linux/ceph/ceph-iscsi-13.png" alt="image" title="放入文件成功"></p>
<hr>
<h2 id="Health-Warning"><a href="#Health-Warning" class="headerlink" title="Health Warning"></a>Health Warning</h2><p>注意到此时ceph集群可能会出现一个<code>Health Warning</code>：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo ceph -s</div><div class="line"></div><div class="line">  cluster:</div><div class="line">    id:     51e9f534-b15a-4273-953c-9b56e9312510</div><div class="line">    health: HEALTH_WARN</div><div class="line">            application not enabled on 1 pool(s)</div><div class="line"> </div><div class="line">  services:</div><div class="line">    mon:         3 daemons, quorum node1,node2,node3</div><div class="line">    mgr:         node1(active), standbys: node2, node3</div><div class="line">    mds:         cephfs-1/1/1 up  &#123;0=node1=up:active&#125;</div><div class="line">    osd:         6 osds: 6 up, 6 in</div><div class="line">    tcmu-runner: 2 daemons active</div><div class="line"> </div><div class="line">  data:</div><div class="line">    pools:   3 pools, 192 pgs</div><div class="line">    objects: 559  objects, 2.1 GiB</div><div class="line">    usage:   27 GiB used, 6.0 TiB / 6.0 TiB avail</div><div class="line">    pgs:     192 active+clean</div><div class="line"> </div><div class="line">  io:</div><div class="line">    client:   2.5 KiB/s rd, 2 op/s rd, 0 op/s wr</div></pre></td></tr></table></figure>
<p>从官网中可以看到这个warning发生的原因<a href="https://ceph.io/community/new-luminous-pool-tags/" target="_blank" rel="external">New in Luminous: pool tags</a>，
另外使用<code>ceph health detail</code>也可以看到解决方法：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo ceph health detail</div><div class="line"></div><div class="line">HEALTH_WARN application not enabled on 1 pool(s)</div><div class="line">POOL_APP_NOT_ENABLED application not enabled on 1 pool(s)</div><div class="line">    application not enabled on pool 'rbd'</div><div class="line">    use 'ceph osd pool application enable &lt;pool-name&gt; &lt;app-name&gt;', where &lt;app-name&gt; is 'cephfs', 'rbd', 'rgw', or freeform for custom applications.</div></pre></td></tr></table></figure>
<p>这里就将所建立的<code>rbd</code>池标记为<strong>rbd</strong>：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo ceph osd pool application enable rbd rbd</div><div class="line"></div><div class="line">enabled application 'rbd' on pool 'rbd'</div><div class="line"></div><div class="line"><span class="meta">$</span> sudo ceph -s</div><div class="line"></div><div class="line">  cluster:</div><div class="line">    id:     51e9f534-b15a-4273-953c-9b56e9312510</div><div class="line">    health: HEALTH_OK</div><div class="line"> </div><div class="line">  services:</div><div class="line">    mon:         3 daemons, quorum node1,node2,node3</div><div class="line">    mgr:         node1(active), standbys: node2, node3</div><div class="line">    mds:         cephfs-1/1/1 up  &#123;0=node1=up:active&#125;</div><div class="line">    osd:         6 osds: 6 up, 6 in</div><div class="line">    tcmu-runner: 2 daemons active</div><div class="line"> </div><div class="line">  data:</div><div class="line">    pools:   3 pools, 192 pgs</div><div class="line">    objects: 559  objects, 2.1 GiB</div><div class="line">    usage:   27 GiB used, 6.0 TiB / 6.0 TiB avail</div><div class="line">    pgs:     192 active+clean</div><div class="line"> </div><div class="line">  io:</div><div class="line">    client:   2.0 KiB/s rd, 1 op/s rd, 0 op/s wr</div></pre></td></tr></table></figure>
<p>问题解决。</p>
<hr>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.ceph.com/docs/master/rbd/iscsi-overview/" target="_blank" rel="external">CEPH ISCSI GATEWAY</a></p>
<p><a href="https://blog.51cto.com/devingeng/2125656" target="_blank" rel="external">看Ceph如何实现原生的ISCSI</a></p>
<p><a href="https://github.com/ceph/ceph-iscsi/issues/64" target="_blank" rel="external">Build new RPM for 3.0</a></p>
<p><a href="https://github.com/ceph/ceph-ansible/issues/2707" target="_blank" rel="external">Missing ceph-iscsi-cli package</a></p>
<p><a href="https://ceph.io/community/new-luminous-pool-tags/" target="_blank" rel="external">New in Luminous: pool tags</a></p>
]]></content>
    
    <summary type="html">
    
      学习在ceph集群中使用iscsi
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="centos" scheme="http://yoursite.com/tags/centos/"/>
    
      <category term="ceph" scheme="http://yoursite.com/tags/ceph/"/>
    
      <category term="iscsi" scheme="http://yoursite.com/tags/iscsi/"/>
    
  </entry>
  
  <entry>
    <title>ceph+samba的简单使用</title>
    <link href="http://yoursite.com/2019/08/06/2019-08-06-ceph-samba/"/>
    <id>http://yoursite.com/2019/08/06/2019-08-06-ceph-samba/</id>
    <published>2019-08-06T00:39:00.000Z</published>
    <updated>2019-08-23T08:13:20.663Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h2><p>有一个<strong>HEALTH_OK</strong>的ceph集群，还有剩余的存储空间，
并且创建了CephFS。</p>
<p>这里是我所搭建的集群：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo ceph -s</div><div class="line"></div><div class="line">  cluster:</div><div class="line">    id:     51e9f534-b15a-4273-953c-9b56e9312510</div><div class="line">    health: HEALTH_OK</div><div class="line"> </div><div class="line">  services:</div><div class="line">    mon: 3 daemons, quorum node1,node2,node3</div><div class="line">    mgr: node1(active), standbys: node2, node3</div><div class="line">    mds: cephfs-1/1/1 up  &#123;0=node1=up:active&#125;</div><div class="line">    osd: 6 osds: 6 up, 6 in</div><div class="line"> </div><div class="line">  data:</div><div class="line">    pools:   2 pools, 64 pgs</div><div class="line">    objects: 316  objects, 1.1 GiB</div><div class="line">    usage:   23 GiB used, 6.0 TiB / 6.0 TiB avail</div><div class="line">    pgs:     64 active+clean</div></pre></td></tr></table></figure>
<p>一台linux主机（简称smb服务器），能够与Ceph集群通信，用于开启smb服务。（当然也可以是Ceph集群中的某一节点，
我这里使用的就是Ceph集群中的node1）</p>
<p>一台windows主机，能够直接ping通smb服务器（一定要直接ping通最好，也就是同一个局域网下，
因为windows使用smb服务的时候，端口是默认定死的，你端口映射是没用的）。</p>
<hr>
<h2 id="搭建smb服务器"><a href="#搭建smb服务器" class="headerlink" title="搭建smb服务器"></a>搭建smb服务器</h2><p>首先尝试搭建smb服务器，这里和ceph暂时没有关系。</p>
<p>第一步，在作为smb服务器的linux主机上安装samba：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo yum install -y samba samba-client</div></pre></td></tr></table></figure>
<p>修改<code>smb.conf</code>：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo vim /etc/samba/smb.conf</div><div class="line"></div><div class="line"><span class="meta">$</span> sudo cat /etc/samba/smb.conf</div><div class="line"></div><div class="line">[global]</div><div class="line">workgroup = WORKGROUP </div><div class="line">netbios name = long</div><div class="line">server string = Linux Samba test</div><div class="line">security = user</div><div class="line">        </div><div class="line">[samba]</div><div class="line">path = /smb/samba</div><div class="line">writeable = yes</div><div class="line">browseable = yes</div><div class="line">guest ok = yes</div><div class="line"></div><div class="line">// 检查配置文件正确性</div><div class="line"><span class="meta">$</span> testparm</div><div class="line"></div><div class="line">Load smb config files from /etc/samba/smb.conf</div><div class="line">rlimit_max: increasing rlimit_max (1024) to minimum Windows limit (16384)</div><div class="line">Processing section "[samba]"</div><div class="line">Loaded services file OK.</div><div class="line">Server role: ROLE_STANDALONE</div><div class="line"></div><div class="line">Press enter to see a dump of your service definitions</div><div class="line"></div><div class="line"><span class="meta">#</span> Global parameters</div><div class="line">[global]</div><div class="line">	netbios name = LONG</div><div class="line">	security = USER</div><div class="line">	server string = Linux Samba test</div><div class="line">	idmap config * : backend = tdb</div><div class="line"></div><div class="line"></div><div class="line">[samba]</div><div class="line">	guest ok = Yes</div><div class="line">	path = /smb/samba</div><div class="line">	read only = No</div></pre></td></tr></table></figure>
<p>注意这里的<code>workgroup</code>和<code>netbios name</code>字段填写的是windows主机上所显示的工作组和用户名，
可以在windows主机上通过<code>我的电脑-&gt;属性</code>，进行查看。</p>
<p><code>path</code>字段即共享文件夹位置，这里将它创建出来。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo mkdir -p /smb/samba</div></pre></td></tr></table></figure>
<p>将共享文件夹的用户和组改为nobody，权限改为777：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 确定nobody的组名用户名都叫nobody</div><div class="line"><span class="meta">$</span> id nobody</div><div class="line">uid=99(nobody) gid=99(nobody) groups=99(nobody)</div><div class="line"></div><div class="line">// 设置权限</div><div class="line"><span class="meta">$</span> sudo chown -R nobody:nobody /smb</div><div class="line"><span class="meta">$</span> sudo chmod -R 777 /smb</div></pre></td></tr></table></figure>
<p>启动smb服务：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo systemctl enable smb</div><div class="line"><span class="meta">$</span> sudo systemctl start smb</div></pre></td></tr></table></figure>
<p>本机测试服务是否成功启动，注意因为共享文件夹设置的<code>guest ok</code>，所以这里不用输入密码也可以连接：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo smbclient -L \\192.168.90.233</div><div class="line"></div><div class="line">Enter WORKGROUP\cluster's password: </div><div class="line">Anonymous login successful</div><div class="line"></div><div class="line">	Sharename       Type      Comment</div><div class="line">	---------       ----      -------</div><div class="line">	samba           Disk      </div><div class="line"><span class="meta">	IPC$</span>            IPC       IPC Service (Linux Samba test)</div><div class="line">Reconnecting with SMB1 for workgroup listing.</div><div class="line">Anonymous login successful</div><div class="line"></div><div class="line">	Server               Comment</div><div class="line">	---------            -------</div><div class="line"></div><div class="line">	Workgroup            Master</div><div class="line">	---------            -------</div><div class="line"></div><div class="line"><span class="meta">$</span> smbclient //192.168.90.233/samba</div><div class="line"></div><div class="line">Enter WORKGROUP\cluster's password: </div><div class="line">Anonymous login successful</div><div class="line">Try "help" to get a list of possible commands.</div><div class="line">smb: \&gt; ls</div><div class="line">  .                                   D        0  Mon Aug  5 17:57:17 2019</div><div class="line">  ..                                 DR        0  Mon Aug  5 17:47:05 2019</div><div class="line">  test                                D        0  Mon Aug  5 17:50:02 2019</div><div class="line">  public                              D        0  Mon Aug  5 17:57:25 2019</div><div class="line"></div><div class="line">		2030415872 blocks of size 1024. 2029215744 blocks available</div><div class="line">smb: \&gt;</div></pre></td></tr></table></figure>
<p>ok，smb服务配置成功。</p>
<hr>
<h2 id="使用windows访问CephFS"><a href="#使用windows访问CephFS" class="headerlink" title="使用windows访问CephFS"></a>使用windows访问CephFS</h2><p>通过上面的步骤，显而易见，只要将CephFS挂载到smb服务所共享的目录下即可：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo mount -t ceph 192.168.90.233:6789:/ /smb/samba -o name=admin,secret=AQCSvDZdqDJ+LRAAwl2YpecB2kvb7Rmp4nGJXQ==</div></pre></td></tr></table></figure>
<p>挂载之后，就相当于将CephFS共享了出来。</p>
<p>这里可以创建一个用户来访问共享：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo adduser smbuser</div><div class="line"><span class="meta">$</span> sudo smbpasswd -a smbuser</div></pre></td></tr></table></figure>
<p>在windows中打开文件资源管理器（其实就是任意文件夹）：</p>
<p><img src="/images/linux/centos/practice/samba-1.png" alt="image" title="文件资源管理器"></p>
<p>在路径栏输入smb服务器位置：</p>
<p><img src="/images/linux/centos/practice/samba-2.png" alt="image" title="输入smb服务器位置"></p>
<p>回车，输入刚创建的用户名和密码，即可：</p>
<p><img src="/images/linux/centos/practice/samba-3.png" alt="image" title="成功连接"></p>
<p>创建文件：</p>
<p><img src="/images/linux/centos/practice/samba-4.png" alt="image" title="创建文件"></p>
<p>修改文件内容并成功保存：</p>
<p><img src="/images/linux/centos/practice/samba-5.png" alt="image" title="修改文件内容并成功保存"></p>
<p>到这里，就完成了使用windows来对CephFS进行访问。</p>
<hr>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/vevenlcf/article/details/82350250" target="_blank" rel="external">Centos7 配置samba服务</a></p>
]]></content>
    
    <summary type="html">
    
      练习使用samba来对已挂载CephFS进行局域网共享
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="centos" scheme="http://yoursite.com/tags/centos/"/>
    
      <category term="ceph" scheme="http://yoursite.com/tags/ceph/"/>
    
      <category term="cephfs" scheme="http://yoursite.com/tags/cephfs/"/>
    
      <category term="nfs" scheme="http://yoursite.com/tags/nfs/"/>
    
      <category term="samba" scheme="http://yoursite.com/tags/samba/"/>
    
  </entry>
  
  <entry>
    <title>ceph-mimic-13.2.5中CephFS的初步使用</title>
    <link href="http://yoursite.com/2019/08/05/2019-08-05-ceph-fs-use/"/>
    <id>http://yoursite.com/2019/08/05/2019-08-05-ceph-fs-use/</id>
    <published>2019-08-05T02:28:00.000Z</published>
    <updated>2019-08-23T08:13:40.703Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h2><p>有一个<strong>HEALTH_OK</strong>的ceph集群，并且还有剩余的存储空间。</p>
<p>这里是我所搭建的集群：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo ceph -s</div><div class="line"></div><div class="line">  cluster:</div><div class="line">    id:     a20b153c-c907-41bb-a5b2-753a40e2085c</div><div class="line">    health: HEALTH_WARN</div><div class="line">            clock skew detected on mon.node2</div><div class="line"> </div><div class="line">  services:</div><div class="line">    mon: 4 daemons, quorum node1,node2,node3,node4</div><div class="line">    mgr: node2(active), standbys: node3, node1, node4</div><div class="line">    osd: 4 osds: 4 up, 4 in</div><div class="line">    rgw: 1 daemon active</div><div class="line"> </div><div class="line">  data:</div><div class="line">    pools:   6 pools, 48 pgs</div><div class="line">    objects: 492  objects, 1.1 GiB</div><div class="line">    usage:   7.5 GiB used, 42 GiB / 50 GiB avail</div><div class="line">    pgs:     48 active+clean</div></pre></td></tr></table></figure>
<hr>
<h2 id="创建mds-METADATA-SERVER"><a href="#创建mds-METADATA-SERVER" class="headerlink" title="创建mds(METADATA SERVER)"></a>创建mds(METADATA SERVER)</h2><p>要使用CephFS，至少需要有一个mds，可以使用ceph-deploy工具进行创建：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">[deploy]$</span> ceph-deploy mds create node1</div></pre></td></tr></table></figure>
<p>查看mds状态：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">[node1]$</span> sudo ceph mds stat</div><div class="line"></div><div class="line">, 1 up:standby</div></pre></td></tr></table></figure>
<p>可以看到mds创建成功了。</p>
<hr>
<h2 id="创建CEPH-FILESYSTEM"><a href="#创建CEPH-FILESYSTEM" class="headerlink" title="创建CEPH FILESYSTEM"></a>创建CEPH FILESYSTEM</h2><p>根据官方文档所述<code>A Ceph filesystem requires at least two RADOS pools, one for data and one for metadata.</code>，
这里需要创建两个pool。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">[node1]$</span> ceph osd pool create cephfs_data 16</div><div class="line"></div><div class="line">pool 'cephfs_data' created</div><div class="line"></div><div class="line"><span class="meta">[node1]$</span> ceph osd pool create cephfs_metadata 16</div><div class="line"></div><div class="line">pool 'cephfs_metadata' created</div></pre></td></tr></table></figure>
<p>然后直接就可以进行CephFS的创建：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">[node1]$</span> ceph fs new cephfs cephfs_metadata cephfs_data</div><div class="line"><span class="meta">[node1]$</span> ceph fs ls</div><div class="line"></div><div class="line">name: cephfs, metadata pool: cephfs_metadata, data pools: [cephfs_data ]</div></pre></td></tr></table></figure>
<p>此时<code>sudo ceph mds stat</code>命令和<code>sudo ceph -s</code>的输出就发生了变化：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">[node1]$</span> sudo ceph mds stat</div><div class="line"></div><div class="line">cephfs-1/1/1 up  &#123;0=node1=up:active&#125;</div><div class="line"></div><div class="line"><span class="meta">[node1]$</span> sudo ceph -s</div><div class="line"></div><div class="line">  cluster:</div><div class="line">    id:     a20b153c-c907-41bb-a5b2-753a40e2085c</div><div class="line">    health: HEALTH_OK</div><div class="line"> </div><div class="line">  services:</div><div class="line">    mon: 4 daemons, quorum node1,node2,node3,node4</div><div class="line">    mgr: node2(active), standbys: node3, node1, node4</div><div class="line">    mds: cephfs-1/1/1 up  &#123;0=node1=up:active&#125;   // 增加了mds的状态</div><div class="line">    osd: 4 osds: 4 up, 4 in</div><div class="line">    rgw: 1 daemon active</div><div class="line"> </div><div class="line">  data:</div><div class="line">    pools:   8 pools, 112 pgs</div><div class="line">    objects: 514  objects, 1.1 GiB</div><div class="line">    usage:   7.5 GiB used, 42 GiB / 50 GiB avail</div><div class="line">    pgs:     112 active+clean</div></pre></td></tr></table></figure>
<p>注：集群中可以同时创建多个CephFS，这时候就会有默认FS、优先级等设置上的问题。</p>
<hr>
<h2 id="挂载CephFS"><a href="#挂载CephFS" class="headerlink" title="挂载CephFS"></a>挂载CephFS</h2><p>挂载CephFS有几种不同的方式，直接挂载、fuse、fstab。</p>
<p>这里一一进行叙述，但是详细的内核态用户态什么的就先不分析了。</p>
<p>在哪台机器上执行都可以，无所谓。</p>
<hr>
<h3 id="直接挂载CephFS"><a href="#直接挂载CephFS" class="headerlink" title="直接挂载CephFS"></a>直接挂载CephFS</h3><p>很简单，直接使用mount命令挂载就完事了，<strong>注意端口是6789，密钥去ceph.client.admin.keyring里看，不要在要挂载的目录下去执行挂载！</strong>：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo mkdir /mnt/mycephfs</div><div class="line"><span class="meta">$</span> sudo mount -t ceph 192.168.31.203:6789:/ /mnt/mycephfs -o name=admin,secret=AQBxGTVdnr4PAhAAd4KqF0802IwTk0wVzw0cZA==</div></pre></td></tr></table></figure>
<p>复制一个文件进去试试：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// 复制文件进去</div><div class="line"><span class="meta">$</span> sudo mkdir /mnt/mycephfs/test</div><div class="line"><span class="meta">$</span> sudo cp 11.mp4 /mnt/mycephfs/test/</div><div class="line"></div><div class="line">// 卸载看是不是都没了</div><div class="line"><span class="meta">$</span> sudo umount /mnt/mycephfs</div><div class="line"><span class="meta">$</span> ll /mnt/mycephfs/</div><div class="line"></div><div class="line">total 0</div><div class="line"></div><div class="line">// 重新挂载</div><div class="line">// 查看文件</div><div class="line"><span class="meta">$</span> sudo mount -t ceph 192.168.31.203:6789:/ /mnt/mycephfs -o name=admin,secret=AQBxGTVdnr4PAhAAd4KqF0802IwTk0wVzw0cZA==</div><div class="line"><span class="meta">$</span> ll /mnt/mycephfs/test/</div><div class="line"></div><div class="line">total 196753</div><div class="line">-rw-r--r-- 1 root root 201474919 Aug  5 10:03 11.mp4</div></pre></td></tr></table></figure>
<p>可以看到文件成功的存入了CephFS中。</p>
<hr>
<h3 id="使用ceph-fuse进行挂载"><a href="#使用ceph-fuse进行挂载" class="headerlink" title="使用ceph-fuse进行挂载"></a>使用ceph-fuse进行挂载</h3><p>按照官方文档所说，把密钥和conf拷贝到要执行挂载的机器上：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">[client]$</span> sudo scp ming@192.168.31.203:/etc/ceph/ceph.client.admin.keyring /etc/ceph/ceph.client.admin.keyring</div><div class="line"><span class="meta">[client]$</span> sudo scp ming@192.168.31.203:/etc/ceph/ceph.conf /etc/ceph/ceph.conf</div></pre></td></tr></table></figure>
<p>要注意的是，现在需要使用的<code>ceph-fuse</code>命令是还没有按照的，需要手动按照一下:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">[client]$</span> sudo yum install -y ceph-fuse</div></pre></td></tr></table></figure>
<p>进行挂载：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">[client]$</span> sudo mkdir /home/ming/cephfs</div><div class="line"><span class="meta">[client]$</span> sudo ceph-fuse -m 192.168.31.203:6789 /home/ming/cephfs</div><div class="line"></div><div class="line">ceph-fuse[1607]: starting ceph client</div><div class="line">2019-08-05 10:21:37.388 7f7f411bec00 -1 init, newargv = 0x55b21236d6e0 newargc=7</div><div class="line">ceph-fuse[1607]: starting fuse</div><div class="line"></div><div class="line"><span class="meta">[client]$</span> ll cephfs/test/</div><div class="line"></div><div class="line">total 196753</div><div class="line">-rw-r--r-- 1 root root 201474919 Aug  5 10:03 11.mp4</div></pre></td></tr></table></figure>
<p>可以看到成功的进行了挂载，并且也看到了已有的文件。</p>
<p>下面进行卸载，注意到卸载所使用的命令与挂载不同：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo fusermount -u cephfs/</div></pre></td></tr></table></figure>
<hr>
<h3 id="使用fstab进行挂载"><a href="#使用fstab进行挂载" class="headerlink" title="使用fstab进行挂载"></a>使用fstab进行挂载</h3><p>也就是在/etc/fstab文件中进行配置，这样在开机时就会自动进行挂载。</p>
<p>首先，将密钥保存到一个文件里面：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo vim /etc/ceph/secret.key</div><div class="line"><span class="meta">$</span> sudo cat /etc/ceph/secret.key</div><div class="line"></div><div class="line">AQBxGTVdnr4PAhAAd4KqF0802IwTk0wVzw0cZA==</div></pre></td></tr></table></figure>
<p>修改<code>/etc/fstab</code>：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo vim /etc/fstab</div><div class="line"><span class="meta">$</span> sudo cat /etc/fstab</div><div class="line"></div><div class="line">...</div><div class="line">/dev/mapper/centos-root /                       xfs     defaults        0 0</div><div class="line">UUID=37492c10-b6e6-4905-99ad-36207abe5b00 /boot                   xfs     defaults        0 0</div><div class="line">/dev/mapper/centos-swap swap                    swap    defaults        0 0</div><div class="line"></div><div class="line"><span class="meta">#</span> ceph fs</div><div class="line">192.168.31.203:6789:/  /mnt/mycephfs  ceph  name=admin,secretfile=/etc/ceph/secret.key,noatime,_netdev  0  2</div></pre></td></tr></table></figure>
<p>重启虚拟机：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo reboot</div><div class="line"><span class="meta">$</span> ll /mnt/mycephfs</div><div class="line">total 0</div><div class="line">drwxr-xr-x 1 root root 1 Aug  5 10:03 test</div><div class="line"></div><div class="line"><span class="meta">$</span> ll /mnt/mycephfs/test</div><div class="line">total 196753</div><div class="line">-rw-r--r-- 1 root root 201474919 Aug  5 10:03 11.mp4</div></pre></td></tr></table></figure>
<p>可以看到完成了开机自动挂载。</p>
<hr>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.ceph.com/docs/master/cephfs/" target="_blank" rel="external">CEPH FILESYSTEM</a></p>
]]></content>
    
    <summary type="html">
    
      练习使用CephFS，使用不同方式进行挂载使用
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="centos" scheme="http://yoursite.com/tags/centos/"/>
    
      <category term="ceph" scheme="http://yoursite.com/tags/ceph/"/>
    
      <category term="cephfs" scheme="http://yoursite.com/tags/cephfs/"/>
    
      <category term="nfs" scheme="http://yoursite.com/tags/nfs/"/>
    
  </entry>
  
  <entry>
    <title>ceph-mimic-13.2.5中s3的初步使用</title>
    <link href="http://yoursite.com/2019/08/02/2019-08-02-ceph-s3-use/"/>
    <id>http://yoursite.com/2019/08/02/2019-08-02-ceph-s3-use/</id>
    <published>2019-08-01T16:00:00.000Z</published>
    <updated>2019-08-23T08:13:48.590Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h2><p>有一个<strong>HEALTH_OK</strong>的ceph集群，并且还有剩余的存储空间。</p>
<p>这里是我所搭建的集群：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo ceph -s</div><div class="line">  cluster:</div><div class="line">    id:     a20b153c-c907-41bb-a5b2-753a40e2085c</div><div class="line">    health: HEALTH_OK</div><div class="line"> </div><div class="line">  services:</div><div class="line">    mon: 4 daemons, quorum node1,node2,node3,node4</div><div class="line">    mgr: node2(active), standbys: node3, node1, node4</div><div class="line">    osd: 4 osds: 4 up, 4 in</div><div class="line">    rgw: 1 daemon active</div><div class="line"> </div><div class="line">  data:</div><div class="line">    pools:   6 pools, 48 pgs</div><div class="line">    objects: 198  objects, 3.2 KiB</div><div class="line">    usage:   4.1 GiB used, 46 GiB / 50 GiB avail</div><div class="line">    pgs:     48 active+clean</div></pre></td></tr></table></figure>
<hr>
<h2 id="创建OBJECT-GATEWAY"><a href="#创建OBJECT-GATEWAY" class="headerlink" title="创建OBJECT GATEWAY"></a>创建OBJECT GATEWAY</h2><p>注意到<code>OBJECT GATEWAY</code>不需要是mon节点或者osd节点。</p>
<p>首先，要在节点上安装相关的包，可以使用官网推荐的<code>ceph-deploy install --rgw &lt;gateway-node1&gt; [&lt;gateway-node2&gt; ...]</code>来进行安装，
但是这里由于指定版本、epel包下载容易失败等问题，还是推荐直接使用本地yum源来进行ceph和ceph-radosgw的安装。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo yum install -y ceph-13.2.5 ceph-radosgw-13.2.5</div></pre></td></tr></table></figure>
<p>第二步，将节点设为<strong>admin</strong>节点，我这里直接使用了集群中的node1节点：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">[deploy]$</span> ceph-deploy admin node1</div></pre></td></tr></table></figure>
<p>第三步，创建<code>GATEWAY INSTANCE</code>：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">[deploy]$</span> ceph-deploy rgw create node1</div></pre></td></tr></table></figure>
<p>服务的默认端口为7480，查看当前打开端口，可以看到服务成功建立起来：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">[node1]$</span> netstat -nlpt</div><div class="line"></div><div class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </div><div class="line">tcp        0      0 192.168.31.203:6789     0.0.0.0:*               LISTEN      -                   </div><div class="line">tcp        0      0 192.168.31.203:6800     0.0.0.0:*               LISTEN      -                   </div><div class="line">tcp        0      0 192.168.31.203:6801     0.0.0.0:*               LISTEN      -                   </div><div class="line">tcp        0      0 192.168.31.203:6802     0.0.0.0:*               LISTEN      -                   </div><div class="line">tcp        0      0 192.168.31.203:6803     0.0.0.0:*               LISTEN      -                   </div><div class="line">tcp        0      0 192.168.31.203:6804     0.0.0.0:*               LISTEN      -                   </div><div class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -                   </div><div class="line">tcp        0      0 0.0.0.0:7480            0.0.0.0:*               LISTEN      -                   </div><div class="line">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      -                   </div><div class="line">tcp6       0      0 :::22                   :::*                    LISTEN      -                   </div><div class="line">tcp6       0      0 ::1:25                  :::*                    LISTEN      -</div></pre></td></tr></table></figure>
<p>查看当前pool，应该可以看到相关的pool被创建：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo ceph osd pool ls</div><div class="line"></div><div class="line">default.rgw.meta</div><div class="line">.rgw.root</div><div class="line">default.rgw.control</div><div class="line">default.rgw.log</div><div class="line">default.rgw.buckets.index</div><div class="line">default.rgw.buckets.data</div></pre></td></tr></table></figure>
<hr>
<h2 id="创建RADOSGW-USER"><a href="#创建RADOSGW-USER" class="headerlink" title="创建RADOSGW USER"></a>创建RADOSGW USER</h2><p>s3是一个Web服务接口，自然的，就需要相应的访问权限来与它交互，所以在使用它之前，需要创建用户。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">[node1]$</span> sudo radosgw-admin user create --uid="testuser" --display-name="First User"</div><div class="line"></div><div class="line">&#123;</div><div class="line">        "user_id": "testuser",</div><div class="line">        "display_name": "First User",</div><div class="line">        "email": "",</div><div class="line">        "suspended": 0,</div><div class="line">        "max_buckets": 1000,</div><div class="line">        "subusers": [],</div><div class="line">        "keys": [&#123;</div><div class="line">                "user": "testuser",</div><div class="line">                "access_key": "I0PJDPCIYZ665MW88W9R",</div><div class="line">                "secret_key": "dxaXZ8U90SXydYzyS5ivamEP20hkLSUViiaR+ZDA"</div><div class="line">        &#125;],</div><div class="line">        "swift_keys": [],</div><div class="line">        "caps": [],</div><div class="line">        "op_mask": "read, write, delete",</div><div class="line">        "default_placement": "",</div><div class="line">        "placement_tags": [],</div><div class="line">        "bucket_quota": &#123;</div><div class="line">                "enabled": false,</div><div class="line">                "max_size_kb": -1,</div><div class="line">                "max_objects": -1</div><div class="line">        &#125;,</div><div class="line">        "user_quota": &#123;</div><div class="line">                "enabled": false,</div><div class="line">                "max_size_kb": -1,</div><div class="line">                "max_objects": -1</div><div class="line">        &#125;,</div><div class="line">        "temp_url_keys": []</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这一长串的输出中，别的在现阶段不用管，记住<strong>access_key</strong>和<strong>secret_key</strong>就行。</p>
<p>想再查询<strong>access_key</strong>和<strong>secret_key</strong>，可以使用以下命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// 查询有哪些用户</div><div class="line"><span class="meta">[node1]$</span> sudo radosgw-admin user list</div><div class="line"></div><div class="line">[</div><div class="line">    "testuser"</div><div class="line">]</div><div class="line"></div><div class="line">// 查询用户信息</div><div class="line"><span class="meta">[node1]$</span> sudo radosgw-admin user info --uid=testuser</div><div class="line"></div><div class="line">        ...</div><div class="line">        "keys": [&#123;</div><div class="line">                "user": "testuser",</div><div class="line">                "access_key": "I0PJDPCIYZ665MW88W9R",</div><div class="line">                "secret_key": "dxaXZ8U90SXydYzyS5ivamEP20hkLSUViiaR+ZDA"</div><div class="line">        &#125;],</div><div class="line">        ...</div></pre></td></tr></table></figure>
<hr>
<h2 id="使用S3-Browser（非必须）"><a href="#使用S3-Browser（非必须）" class="headerlink" title="使用S3 Browser（非必须）"></a>使用<code>S3 Browser</code>（非必须）</h2><p>使用<code>S3 Browser</code>来浏览存储，以证明现在服务运行正常，连接正常。</p>
<p><a href="https://s3browser.com/" target="_blank" rel="external">下载S3 Browser</a></p>
<p>运行S3 Browser，它会让你输入你的S3账户：</p>
<p><img src="/images/linux/ceph/s3-browser-1.png" alt="image" title="s3-browser-1"></p>
<p>然后将上面的信息都填上，如下：</p>
<p><img src="/images/linux/ceph/s3-browser-2.png" alt="image" title="s3-browser-2"></p>
<p>连接成功之后，就可以看到当前的bucket情况，也可以使用它进行创建、删除、上传以及下载等：</p>
<p><img src="/images/linux/ceph/s3-browser-3.png" alt="image" title="s3-browser-3"></p>
<p>到目前为止，算是完成了ceph集群方面的准备工作，下面就是写代码方面了。</p>
<hr>
<h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><p>我这里使用的是<strong>idea+java</strong>。</p>
<p>首先创建maven工程（处理依赖会简单很多）：</p>
<p><img src="/images/linux/ceph/s3-maven-1.png" alt="image" title="s3-maven-1"></p>
<p>（注：这里略过了idea中maven配置的相关内容。）</p>
<p>修改pom.xml文件，添加依赖:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></div><div class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-s3 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.amazonaws<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aws-java-sdk-s3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.11.597<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p>接下来最重要的就是参考官方给的<a href="https://github.com/awsdocs/aws-doc-sdk-examples/tree/master/java/example_code/s3/src/main/java" target="_blank" rel="external">代码样例</a>了。</p>
<p>最后我写的类如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> s3;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.amazonaws.auth.AWSStaticCredentialsProvider;</div><div class="line"><span class="keyword">import</span> com.amazonaws.auth.BasicAWSCredentials;</div><div class="line"><span class="keyword">import</span> com.amazonaws.client.builder.AwsClientBuilder;</div><div class="line"><span class="keyword">import</span> com.amazonaws.services.s3.AmazonS3;</div><div class="line"><span class="keyword">import</span> com.amazonaws.services.s3.AmazonS3ClientBuilder;</div><div class="line"><span class="keyword">import</span> com.amazonaws.services.s3.model.*;</div><div class="line"><span class="keyword">import</span> com.amazonaws.util.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * S3操作类，完成一些基本的操作</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> long</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> v0.1</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">S3Template</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ORIGINAL_FOLDER = <span class="string">"video/original"</span>; <span class="comment">// 原始文件目录</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DOWNLOAD_FOLDER = <span class="string">"video/download"</span>; <span class="comment">// 下载文件目录</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TRANSCODING_FOLDER = <span class="string">"video/transcoding"</span>; <span class="comment">// 转码文件目录</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> AmazonS3 s3Client = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MyLogger log = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">S3Template</span><span class="params">(String endPoint, String accessKey, String secretKey)</span> </span>&#123;</div><div class="line">         <span class="keyword">this</span>.s3Client = AmazonS3ClientBuilder.standard()</div><div class="line">                .withCredentials(<span class="keyword">new</span> AWSStaticCredentialsProvider(<span class="keyword">new</span> BasicAWSCredentials(accessKey, secretKey)))</div><div class="line">                .withEndpointConfiguration(<span class="keyword">new</span> AwsClientBuilder.EndpointConfiguration(endPoint, <span class="string">""</span>))</div><div class="line">                .build();</div><div class="line">         log = <span class="keyword">new</span> MyLogger();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listBuckets</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;Bucket&gt; buckets = s3Client.listBuckets();</div><div class="line">        <span class="keyword">for</span> (Bucket bucket : buckets) &#123;</div><div class="line">            log.info(bucket.getName() + <span class="string">"\t"</span> +</div><div class="line">                    StringUtils.fromDate(bucket.getCreationDate()));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createBucket</span><span class="params">(String bucketName)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!s3Client.doesBucketExistV2(bucketName)) &#123;</div><div class="line">            s3Client.createBucket(<span class="keyword">new</span> CreateBucketRequest(bucketName));</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Verify that the bucket was created by retrieving it and checking its location.</span></div><div class="line">        String bucketLocation = s3Client.getBucketLocation(<span class="keyword">new</span> GetBucketLocationRequest(bucketName));</div><div class="line">        log.info(<span class="string">"Bucket location: "</span> + bucketLocation);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteBucket</span><span class="params">(String bucketName)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!s3Client.doesBucketExistV2(bucketName)) &#123;</div><div class="line">            log.info(<span class="string">"Bucket "</span> + bucketName + <span class="string">" does not exist."</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        ObjectListing objectListing = s3Client.listObjects(bucketName);</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            Iterator&lt;S3ObjectSummary&gt; objIter = objectListing.getObjectSummaries().iterator();</div><div class="line">            <span class="keyword">while</span> (objIter.hasNext()) &#123;</div><div class="line">                s3Client.deleteObject(bucketName, objIter.next().getKey());</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (objectListing.isTruncated()) &#123;</div><div class="line">                objectListing = s3Client.listNextBatchOfObjects(objectListing);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        VersionListing versionList = s3Client.listVersions(<span class="keyword">new</span> ListVersionsRequest().withBucketName(bucketName));</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            Iterator&lt;S3VersionSummary&gt; versionIter = versionList.getVersionSummaries().iterator();</div><div class="line">            <span class="keyword">while</span> (versionIter.hasNext()) &#123;</div><div class="line">                S3VersionSummary vs = versionIter.next();</div><div class="line">                s3Client.deleteVersion(bucketName, vs.getKey(), vs.getVersionId());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (versionList.isTruncated()) &#123;</div><div class="line">                versionList = s3Client.listNextBatchOfVersions(versionList);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        s3Client.deleteBucket(bucketName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downFile</span><span class="params">(String bucketName, String key)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        log.info(<span class="string">"Downloading object "</span> + key);</div><div class="line">        S3Object fullObject = <span class="keyword">null</span>;</div><div class="line">        fullObject = s3Client.getObject(<span class="keyword">new</span> GetObjectRequest(bucketName, key));</div><div class="line">        storeFile(fullObject.getObjectContent(), key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String bucketName, String fileObjKeyName, String fileName)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> ( s3Client.doesObjectExist(bucketName, fileObjKeyName) ) &#123;</div><div class="line">            log.info(<span class="string">"The File "</span> + fileName + <span class="string">" already exists."</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Upload a file as a new object with ContentType and title specified.</span></div><div class="line">        log.info(<span class="string">"Upload object "</span> + fileName);</div><div class="line">        PutObjectRequest request = <span class="keyword">new</span> PutObjectRequest(bucketName, fileObjKeyName, <span class="keyword">new</span> File(ORIGINAL_FOLDER + <span class="string">"/"</span> + fileName));</div><div class="line">        ObjectMetadata metadata = <span class="keyword">new</span> ObjectMetadata();</div><div class="line">        metadata.setContentType(<span class="string">"plain/video"</span>);</div><div class="line">        metadata.addUserMetadata(<span class="string">"x-amz-meta-title"</span>, <span class="string">"someTitle"</span>);</div><div class="line">        request.setMetadata(metadata);</div><div class="line">        s3Client.putObject(request);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">storeFile</span><span class="params">(InputStream input, String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        log.info(<span class="string">"Store File "</span> + fileName);</div><div class="line">        <span class="comment">// Read the text input stream one line at a time and display each line.</span></div><div class="line">        BufferedInputStream reader = <span class="keyword">new</span> BufferedInputStream(input);</div><div class="line">        BufferedOutputStream writer = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(DOWNLOAD_FOLDER + <span class="string">"/"</span> + fileName));</div><div class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> ((len = reader.read(buff)) != -<span class="number">1</span>) &#123;</div><div class="line">            writer.write(buff, <span class="number">0</span>, len);</div><div class="line">        &#125;</div><div class="line">        reader.close();</div><div class="line">        writer.close();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>成功上传文件到ceph并将其下载下来：</p>
<p><img src="/images/linux/ceph/s3-maven-2.png" alt="image" title="s3-maven-2"></p>
<p>基本操作练习结束。</p>
<hr>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.ceph.com/docs/master/install/install-ceph-gateway/" target="_blank" rel="external">INSTALL CEPH OBJECT GATEWAY</a></p>
<p><a href="https://github.com/awsdocs/aws-doc-sdk-examples/tree/master/java/example_code/s3/src/main/java" target="_blank" rel="external">aws-doc-sdk-examples</a></p>
]]></content>
    
    <summary type="html">
    
      练习使用ceph的s3接口来存储文件和下载文件
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="centos" scheme="http://yoursite.com/tags/centos/"/>
    
      <category term="ceph" scheme="http://yoursite.com/tags/ceph/"/>
    
      <category term="s3" scheme="http://yoursite.com/tags/s3/"/>
    
  </entry>
  
  <entry>
    <title>centos7中lvm分区的创建与扩展</title>
    <link href="http://yoursite.com/2019/07/23/2019-07-23-centos-lvm-create-extend/"/>
    <id>http://yoursite.com/2019/07/23/2019-07-23-centos-lvm-create-extend/</id>
    <published>2019-07-22T16:00:00.000Z</published>
    <updated>2019-08-23T08:13:55.781Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="创建LVM分区"><a href="#创建LVM分区" class="headerlink" title="创建LVM分区"></a>创建LVM分区</h2><p>首先，挂载虚拟硬盘到虚拟机上，这里挂了2个1T的硬盘。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> lsblk</div><div class="line"></div><div class="line">NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</div><div class="line">sda               8:0    0  100G  0 disk </div><div class="line">├─sda1            8:1    0    1G  0 part /boot</div><div class="line">└─sda2            8:2    0   99G  0 part </div><div class="line">  ├─centos-root 253:0    0   50G  0 lvm  /</div><div class="line">  ├─centos-swap 253:1    0  9.8G  0 lvm  [SWAP]</div><div class="line">  └─centos-home 253:2    0 39.2G  0 lvm  /home</div><div class="line">sdb               8:16   0    1T  0 disk </div><div class="line">sdc               8:32   0    1T  0 disk </div><div class="line">sr0              11:0    1 1024M  0 rom  </div><div class="line"></div><div class="line">// 创建物理卷</div><div class="line"><span class="meta">$</span> sudo pvcreate /dev/sdb</div><div class="line"></div><div class="line">  Physical volume "/dev/sdb" successfully created.</div><div class="line"></div><div class="line">// 创建卷组</div><div class="line"><span class="meta">$</span> sudo vgcreate VG1 /dev/sdb</div><div class="line"></div><div class="line">  Volume group "VG1" successfully created</div><div class="line"></div><div class="line">// 查看卷组剩多少PE</div><div class="line"><span class="meta">$</span> sudo vgdisplay</div><div class="line"></div><div class="line">  ...</div><div class="line">  --- Volume group ---</div><div class="line">  VG Name               VG1</div><div class="line">  System ID             </div><div class="line">  Format                lvm2</div><div class="line">  Metadata Areas        2</div><div class="line">  Metadata Sequence No  7</div><div class="line">  VG Access             read/write</div><div class="line">  VG Status             resizable</div><div class="line">  MAX LV                0</div><div class="line">  Cur LV                1</div><div class="line">  Open LV               0</div><div class="line">  Max PV                0</div><div class="line">  Cur PV                2</div><div class="line">  Act PV                2</div><div class="line">  VG Size               &lt;2.00 TiB</div><div class="line">  PE Size               4.00 MiB</div><div class="line">  Total PE              524286</div><div class="line">  Alloc PE / Size       262143 / &lt;1024.00 GiB</div><div class="line">  Free  PE / Size       262143 / &lt;1024.00 GiB     //剩余空间大小</div><div class="line">  VG UUID               DYPyVN-9ssj-pLxN-bksi-9U0V-m2wQ-aQ3IPe</div><div class="line">  ...</div><div class="line"></div><div class="line">// 将所有剩余空间创建为逻辑卷</div><div class="line"><span class="meta">$</span> sudo lvcreate -l 262143 -n MyLvm0 VG1</div><div class="line"></div><div class="line">  Logical volume "MyLvm0" created.</div><div class="line"></div><div class="line">// 创建完成</div><div class="line"><span class="meta">$</span> lsblk</div><div class="line"></div><div class="line">NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</div><div class="line">sda               8:0    0  100G  0 disk </div><div class="line">├─sda1            8:1    0    1G  0 part /boot</div><div class="line">└─sda2            8:2    0   99G  0 part </div><div class="line">  ├─centos-root 253:0    0   50G  0 lvm  /</div><div class="line">  ├─centos-swap 253:1    0  9.8G  0 lvm  [SWAP]</div><div class="line">  └─centos-home 253:2    0 39.2G  0 lvm  /home</div><div class="line">sdb               8:16   0    1T  0 disk </div><div class="line">└─VG1-MyLvm0    253:3    0 1024G  0 lvm        // 所创建的LVM逻辑卷</div><div class="line">sdc               8:32   0    1T  0 disk </div><div class="line">sr0              11:0    1 1024M  0 rom</div></pre></td></tr></table></figure>
<hr>
<h2 id="扩展LVM分区"><a href="#扩展LVM分区" class="headerlink" title="扩展LVM分区"></a>扩展LVM分区</h2><p>上面使用了一块1T虚拟硬盘，下面将另外一块虚拟硬盘添加到刚才的逻辑卷中，实现扩展。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> lsblk</div><div class="line"></div><div class="line">NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</div><div class="line">sda               8:0    0  100G  0 disk </div><div class="line">├─sda1            8:1    0    1G  0 part /boot</div><div class="line">└─sda2            8:2    0   99G  0 part </div><div class="line">  ├─centos-root 253:0    0   50G  0 lvm  /</div><div class="line">  ├─centos-swap 253:1    0  9.8G  0 lvm  [SWAP]</div><div class="line">  └─centos-home 253:2    0 39.2G  0 lvm  /home</div><div class="line">sdb               8:16   0    1T  0 disk </div><div class="line">└─VG1-MyLvm0    253:3    0 1024G  0 lvm        // 需要扩展的LVM逻辑卷</div><div class="line">sdc               8:32   0    1T  0 disk       // 额外的空间</div><div class="line">sr0              11:0    1 1024M  0 rom  </div><div class="line"></div><div class="line">// 创建物理卷</div><div class="line"><span class="meta">$</span> sudo pvcreate /dev/sdc</div><div class="line"></div><div class="line">  Physical volume "/dev/sdc" successfully created.</div><div class="line"></div><div class="line">// 将它加入到卷组</div><div class="line"><span class="meta">$</span> sudo vgextend VG1 /dev/sdc</div><div class="line"></div><div class="line">  Volume group "VG1" successfully extended</div><div class="line"></div><div class="line">// 扩展逻辑卷MyLvm0</div><div class="line"><span class="meta">$</span> sudo lvextend -l +262142 /dev/VG1/MyLvm0</div><div class="line"></div><div class="line">  Size of logical volume VG1/MyLvm0 changed from 1.00 TiB (262144 extents) to &lt;2.00 TiB (524286 extents).</div><div class="line">  Logical volume VG1/MyLvm0 successfully resized.</div><div class="line"></div><div class="line">// 成功扩展</div><div class="line"><span class="meta">$</span> lsblk</div><div class="line"></div><div class="line">NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</div><div class="line">sda               8:0    0  100G  0 disk </div><div class="line">├─sda1            8:1    0    1G  0 part /boot</div><div class="line">└─sda2            8:2    0   99G  0 part </div><div class="line">  ├─centos-root 253:0    0   50G  0 lvm  /</div><div class="line">  ├─centos-swap 253:1    0  9.8G  0 lvm  [SWAP]</div><div class="line">  └─centos-home 253:2    0 39.2G  0 lvm  /home</div><div class="line">sdb               8:16   0    1T  0 disk </div><div class="line">└─VG1-MyLvm0    253:3    0    2T  0 lvm  </div><div class="line">sdc               8:32   0    1T  0 disk </div><div class="line">└─VG1-MyLvm0    253:3    0    2T  0 lvm  </div><div class="line">sr0              11:0    1 1024M  0 rom</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/youn/p/6079376.html" target="_blank" rel="external">Linux下添加磁盘创建lvm分区</a></p>
<p><a href="https://www.cnblogs.com/weiyiming007/p/9517484.html" target="_blank" rel="external">centos7用lvm扩展xfs文件系统的根分区</a></p>
]]></content>
    
    <summary type="html">
    
      在ceph搭建过程中，会有创建lvm分区的需求
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="centos" scheme="http://yoursite.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>ceph-13.2.5添加mon，删除mon（ceph-deploy）</title>
    <link href="http://yoursite.com/2019/07/22/2019-07-22-ceph-mon-add-destroy/"/>
    <id>http://yoursite.com/2019/07/22/2019-07-22-ceph-mon-add-destroy/</id>
    <published>2019-07-21T16:00:00.000Z</published>
    <updated>2019-08-23T08:14:03.976Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在集群搭建完毕之后，一共有三个host，每个host都是mon节点，这时新创建一个虚拟机，想要让它加入到mon节点，
就需要学习如何添加mon节点。</p>
<h2 id="添加mon节点"><a href="#添加mon节点" class="headerlink" title="添加mon节点"></a>添加mon节点</h2><p>这里添加的节点叫做<strong>node4</strong>。</p>
<p>由于这里使用的是ceph-deploy工具，所以首先要进行ssh免密登录的设置，然后再进行ntp设置。
当然，还需要对hosts文件进行修改。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">// 先添加集群用户</div><div class="line"><span class="meta">[node4]$</span> useradd -d /home/&#123;username&#125; -m &#123;username&#125;</div><div class="line"><span class="meta">[node4]$</span> echo "&#123;username&#125; ALL = (root) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/&#123;username&#125;</div><div class="line"><span class="meta">[node4]$</span> sudo chmod 0440 /etc/sudoers.d/&#123;username&#125;</div><div class="line"></div><div class="line">// 修改hosts文件</div><div class="line"><span class="meta">[deploy]$</span> sudo vim /etc/hosts</div><div class="line"><span class="meta">[deploy]$</span> cat /etc/hosts</div><div class="line"></div><div class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</div><div class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</div><div class="line"></div><div class="line">192.168.31.203 node1</div><div class="line">192.168.31.204 node2</div><div class="line">192.168.31.205 node3</div><div class="line">192.168.31.207 node4</div><div class="line"></div><div class="line">// 其它所有节点拷贝hosts文件（不知道是不是必须的，反正我是做了这一步）</div><div class="line"><span class="meta">[node1]$</span> sudo scp ming@192.168.31.202:/etc/hosts /etc/hosts</div><div class="line"><span class="meta">[node2]$</span> sudo scp ming@192.168.31.202:/etc/hosts /etc/hosts</div><div class="line"><span class="meta">[node3]$</span> sudo scp ming@192.168.31.202:/etc/hosts /etc/hosts</div><div class="line"><span class="meta">[node4]$</span> sudo scp ming@192.168.31.202:/etc/hosts /etc/hosts</div><div class="line"></div><div class="line"></div><div class="line">// ssh免密登录设置</div><div class="line"><span class="meta">[deploy]$</span> vim ~/.ssh/config</div><div class="line"><span class="meta">[deploy]$</span> cat ~/.ssh/config</div><div class="line"></div><div class="line">Host node1</div><div class="line">	HostName 192.168.31.203</div><div class="line">	User ming</div><div class="line">Host node2</div><div class="line">	HostName 192.168.31.204</div><div class="line">	User ming</div><div class="line">Host node3</div><div class="line">	HostName 192.168.31.205</div><div class="line">	User ming</div><div class="line">Host node4</div><div class="line">	HostName 192.168.31.207</div><div class="line">	User ming</div><div class="line"></div><div class="line"><span class="meta">[deploy]$</span> ssh-copy-id &#123;username&#125;@node4</div><div class="line"></div><div class="line">// ntp设置</div><div class="line"><span class="meta">[node4]$</span> sudo yum install -y ntp</div><div class="line"><span class="meta">[node4]$</span> sudo systemctl start ntpd</div><div class="line"><span class="meta">[node4]$</span> sudo systemctl enable ntpd</div><div class="line"><span class="meta">[node4]$</span> sudo vim /etc/ntp.conf</div><div class="line"><span class="meta">[node4]$</span> cat /etc/ntp.conf</div><div class="line"></div><div class="line">...</div><div class="line"><span class="meta">#</span> Use public servers from the pool.ntp.org project.</div><div class="line"><span class="meta">#</span> Please consider joining the pool (http://www.pool.ntp.org/join.html).</div><div class="line">server 192.168.31.202 prefer</div><div class="line">server 0.centos.pool.ntp.org iburst</div><div class="line">server 1.centos.pool.ntp.org iburst</div><div class="line">server 2.centos.pool.ntp.org iburst</div><div class="line">server 3.centos.pool.ntp.org iburst</div><div class="line">...</div></pre></td></tr></table></figure>
<p>完成上面的准备工作之后，开始进行mon的添加，</p>
<p><strong>注意：</strong>我这里使用的本地源来安装ceph，所以即使不装epel也无所谓，因为所需依赖包都在本地了，
具体可以参考之前的博客<a href="http://longrm.com/2019/07/18/2019-07-18-ceph-install/" target="_blank" rel="external">centos7上的ceph指定版本安装方法</a>。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">// 安装ceph</div><div class="line"><span class="meta">[node4]$</span> sudo yum install -y ceph</div><div class="line"></div><div class="line">// 修改ceph.conf配置。</div><div class="line">// 这里在mon_initial_members、mon_host上的修改可能并不是必须的（经本人测试），但感觉还是加上好一点。</div><div class="line">// 一定要增加public_network字段的配置，否则大概率会出现"admin_socket: exception getting command descriptions file ..."的错误。</div><div class="line"><span class="meta">[deploy]$</span> vim ceph.conf</div><div class="line"><span class="meta">[deploy]$</span> cat ceph.conf</div><div class="line"></div><div class="line">[global]</div><div class="line">fsid = a20b153c-c907-41bb-a5b2-753a40e2085c</div><div class="line">mon_initial_members = node1, node2, node3, node4</div><div class="line">mon_host = 192.168.31.203,192.168.31.204,192.168.31.205,192.168.31.207</div><div class="line">auth_cluster_required = cephx</div><div class="line">auth_service_required = cephx</div><div class="line">auth_client_required = cephx</div><div class="line">public_network = 192.168.31.0/24</div><div class="line"></div><div class="line">// 将这个配置发送到其它节点</div><div class="line"><span class="meta">[deploy]$</span> ceph-deploy --overwrite-conf config push node1 node2 node3 node4</div><div class="line"></div><div class="line">// 添加mon节点</div><div class="line"><span class="meta">[deploy]$</span> ceph-deploy mon add node4</div><div class="line"></div><div class="line"><span class="meta">[deploy]$</span> ssh node1 sudo ceph -s</div><div class="line"></div><div class="line">  ...</div><div class="line">  services:</div><div class="line">    mon: 4 daemons, quorum node1,node2,node3,node4</div><div class="line">    mgr: node1(active), standbys: node2, node3</div><div class="line">    osd: 0 osds: 0 up, 0 in</div><div class="line">  ...</div></pre></td></tr></table></figure>
<p>这样就完成了mon节点的添加，注意到其中的<strong>关键在于public_network字段的添加</strong>。</p>
<h2 id="删除mon节点"><a href="#删除mon节点" class="headerlink" title="删除mon节点"></a>删除mon节点</h2><p>直接destroy就可以了：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">[deploy]$</span> ceph-deploy mon destroy node4</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://docs.ceph.com/docs/master/start/quick-ceph-deploy/" target="_blank" rel="external">STORAGE CLUSTER QUICK START</a></p>
<p><a href="https://www.cnblogs.com/aguncn/p/7352393.html" target="_blank" rel="external">ceph在扩展mon节点时，要注意的问题</a></p>
]]></content>
    
    <summary type="html">
    
      搭建好集群之后，该如何添加mon，删除mon
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="centos" scheme="http://yoursite.com/tags/centos/"/>
    
      <category term="ceph" scheme="http://yoursite.com/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title>ceph-13.2.5删除osd，新建osd</title>
    <link href="http://yoursite.com/2019/07/19/2019-07-19-ceph-osd-create-remove/"/>
    <id>http://yoursite.com/2019/07/19/2019-07-19-ceph-osd-create-remove/</id>
    <published>2019-07-18T16:00:00.000Z</published>
    <updated>2019-08-23T08:14:11.568Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在搭建集群的时候，在node2上挂了一个lvm格式的osd（VG1/MyLvm），10G大小，想着既然是lvm，那就可以直接扩容，
所以又加了一个10G的虚拟硬盘，并扩容进了VG1/MyLvm，结果就是：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> lsblk</div><div class="line"></div><div class="line">NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</div><div class="line">sda               8:0    0   20G  0 disk </div><div class="line">├─sda1            8:1    0    1G  0 part /boot</div><div class="line">└─sda2            8:2    0   19G  0 part </div><div class="line">  ├─centos-root 253:0    0   17G  0 lvm  /</div><div class="line">  └─centos-swap 253:1    0    2G  0 lvm  [SWAP]</div><div class="line">sdb               8:16   0   10G  0 disk </div><div class="line">└─sdb1            8:17   0   10G  0 part </div><div class="line">  └─VG1-MyLvm   253:2    0   20G  0 lvm  </div><div class="line">sdc               8:32   0   10G  0 disk </div><div class="line">└─sdc1            8:33   0   10G  0 part </div><div class="line">  └─VG1-MyLvm   253:2    0   20G  0 lvm  </div><div class="line">sr0              11:0    1 1024M  0 rom </div><div class="line"></div><div class="line"><span class="meta">$</span> sudo vgdisplay</div><div class="line"></div><div class="line">  --- Volume group ---</div><div class="line">  VG Name               centos</div><div class="line">  System ID             </div><div class="line">  Format                lvm2</div><div class="line">  Metadata Areas        1</div><div class="line">  Metadata Sequence No  3</div><div class="line">  VG Access             read/write</div><div class="line">  VG Status             resizable</div><div class="line">  MAX LV                0</div><div class="line">  Cur LV                2</div><div class="line">  Open LV               2</div><div class="line">  Max PV                0</div><div class="line">  Cur PV                1</div><div class="line">  Act PV                1</div><div class="line">  VG Size               &lt;19.00 GiB</div><div class="line">  PE Size               4.00 MiB</div><div class="line">  Total PE              4863</div><div class="line">  Alloc PE / Size       4863 / &lt;19.00 GiB</div><div class="line">  Free  PE / Size       0 / 0   </div><div class="line">  VG UUID               fEJqFf-qaqN-ZeZe-3FG1-Jeya-SyAi-WCtB0u</div><div class="line">   </div><div class="line">  --- Volume group ---</div><div class="line">  VG Name               VG1</div><div class="line">  System ID             </div><div class="line">  Format                lvm2</div><div class="line">  Metadata Areas        2</div><div class="line">  Metadata Sequence No  39</div><div class="line">  VG Access             read/write</div><div class="line">  VG Status             resizable</div><div class="line">  MAX LV                0</div><div class="line">  Cur LV                1</div><div class="line">  Open LV               1</div><div class="line">  Max PV                0</div><div class="line">  Cur PV                2</div><div class="line">  Act PV                2</div><div class="line">  VG Size               19.99 GiB</div><div class="line">  PE Size               4.00 MiB</div><div class="line">  Total PE              5118</div><div class="line">  Alloc PE / Size       5118 / 19.99 GiB</div><div class="line">  Free  PE / Size       0 / 0   </div><div class="line">  VG UUID               OMx43d-hsd1-80vh-DCvO-870t-zPSn-123yoU</div></pre></td></tr></table></figure>
<p>首先可以看到逻辑卷MyLvm的确变成了20G大小。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo ceph osd df tree</div><div class="line"></div><div class="line">ID CLASS WEIGHT  REWEIGHT SIZE   USE     AVAIL   %USE  VAR  PGS TYPE NAME      </div><div class="line">-1       0.02939        - 40 GiB  13 GiB  27 GiB 33.56 1.00   - root default   </div><div class="line">-3       0.00980        - 10 GiB 1.1 GiB 8.9 GiB 11.42 0.34   -     host node1 </div><div class="line"> 0   hdd 0.00980  1.00000 10 GiB 1.1 GiB 8.9 GiB 11.42 0.34  68         osd.0  </div><div class="line">-5       0.00980        - 20 GiB  11 GiB 8.9 GiB 55.71 1.66   -     host node2 </div><div class="line"> 1   hdd 0.00980  1.00000 20 GiB  11 GiB 8.9 GiB 55.71 1.66   0         osd.1  </div><div class="line">-7       0.00980        - 10 GiB 1.1 GiB 8.9 GiB 11.42 0.34   -     host node3 </div><div class="line"> 2   hdd 0.00980  1.00000 10 GiB 1.1 GiB 8.9 GiB 11.42 0.34  68         osd.2  </div><div class="line">                    TOTAL 40 GiB  13 GiB  27 GiB 33.56</div></pre></td></tr></table></figure>
<p>可以看到<code>osd.1</code>的容量的确变成了20G，<strong>但是</strong>已经用了<strong>11G</strong>？？？
<strong>刚挂上去的10G空间全部被标记为使用？？？</strong></p>
<p>不明白这是什么原理，可能这样去扩容是不对的，为了把这10G空间夺取回来，
决定先删除osd.1，清空lvm卷，再把它加回来。</p>
<hr>
<h2 id="删除osd"><a href="#删除osd" class="headerlink" title="删除osd"></a>删除osd</h2><p>这里直接参考官方教程<a href="http://docs.ceph.com/docs/master/rados/operations/add-or-rm-osds/" target="_blank" rel="external">ADDING/REMOVING OSDS</a></p>
<p>步骤即：</p>
<ol>
<li>将osd设置为out。</li>
<li>关闭正在运行的osd进程。</li>
<li>从<code>crush map</code>中删除它。</li>
<li>删除<code>OSD authentication key</code>。</li>
<li>删除osd。</li>
</ol>
<p>命令如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo ceph osd out osd.1</div><div class="line"></div><div class="line">marked out osd.1.</div><div class="line"></div><div class="line"><span class="meta">$</span> sudo systemctl stop ceph-osd@1</div><div class="line"></div><div class="line"><span class="meta">$</span> sudo ceph osd crush remove osd.1</div><div class="line"></div><div class="line">removed item id 1 name 'osd.1' from crush map</div><div class="line"></div><div class="line"><span class="meta">$</span> sudo ceph auth del osd.1</div><div class="line"></div><div class="line">updated</div><div class="line"></div><div class="line"><span class="meta">$</span> sudo ceph osd rm 1</div><div class="line"></div><div class="line">removed osd.1</div></pre></td></tr></table></figure>
<p>查看集群状态：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo ceph -s</div><div class="line"></div><div class="line">  cluster:</div><div class="line">    id:     082d1625-1d68-4261-82c8-3fe9fe3ef489</div><div class="line">    health: HEALTH_WARN</div><div class="line">            Degraded data redundancy: 256/768 objects degraded (33.333%), 32 pgs degraded, 68 pgs undersized</div><div class="line"> </div><div class="line">  services:</div><div class="line">    mon: 3 daemons, quorum node1,node2,node3</div><div class="line">    mgr: node1(active), standbys: node3, node2</div><div class="line">    mds: fs_test-1/1/1 up  &#123;0=node1=up:active&#125;</div><div class="line">    osd: 2 osds: 2 up, 2 in</div><div class="line">    rgw: 1 daemon active</div><div class="line"> </div><div class="line">  data:</div><div class="line">    pools:   8 pools, 68 pgs</div><div class="line">    objects: 256  objects, 136 MiB</div><div class="line">    usage:   2.3 GiB used, 18 GiB / 20 GiB avail</div><div class="line">    pgs:     256/768 objects degraded (33.333%)</div><div class="line">             36 active+undersized</div><div class="line">             32 active+undersized+degraded</div><div class="line"></div><div class="line"><span class="meta">$</span> sudo ceph osd df tree</div><div class="line"></div><div class="line">ID CLASS WEIGHT  REWEIGHT SIZE   USE     AVAIL   %USE  VAR  PGS TYPE NAME      </div><div class="line">-1       0.01959        - 10 GiB 1.1 GiB 8.8 GiB     0    0   - root default   </div><div class="line">-3       0.00980        - 10 GiB 1.1 GiB 8.8 GiB 11.48 1.00   -     host node1 </div><div class="line"> 0   hdd 0.00980  1.00000 10 GiB 1.1 GiB 8.8 GiB 11.48 1.00  68         osd.0  </div><div class="line">-5             0        -    0 B     0 B     0 B     0    0   -     host node2 </div><div class="line">-7       0.00980        - 10 GiB 1.1 GiB 8.8 GiB 11.48 1.00   -     host node3 </div><div class="line"> 2   hdd 0.00980  1.00000 10 GiB 1.1 GiB 8.8 GiB 11.48 1.00  68         osd.2  </div><div class="line">                    TOTAL 20 GiB 2.3 GiB  18 GiB 11.48</div></pre></td></tr></table></figure>
<p>可以看到<code>osd.1</code>已经删除，这里的WARN是因为只有两个osd节点造成的。</p>
<hr>
<h2 id="创建osd"><a href="#创建osd" class="headerlink" title="创建osd"></a>创建osd</h2><hr>
<p><strong>方法一：使用ceph-deploy。</strong></p>
<p>因为这里相当于是撤下来的盘，所以先将它里面的内容擦除，借助<code>ceph-volume</code>来进行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo ceph-volume lvm zap VG1/MyLvm</div><div class="line"></div><div class="line"><span class="meta">--&gt;</span> Zapping: /dev/VG1/MyLvm</div><div class="line"><span class="meta">--&gt;</span> Unmounting /var/lib/ceph/osd/ceph-1</div><div class="line">Running command: /bin/umount -v /var/lib/ceph/osd/ceph-1</div><div class="line"> stderr: umount: /var/lib/ceph/osd/ceph-1 (tmpfs) unmounted</div><div class="line">Running command: /usr/sbin/wipefs --all /dev/VG1/MyLvm</div><div class="line">Running command: /bin/dd if=/dev/zero of=/dev/VG1/MyLvm bs=1M count=10</div><div class="line">Running command: /usr/sbin/lvchange --deltag ceph.type=block /dev/VG1/MyLvm</div><div class="line"> stdout: Logical volume VG1/MyLvm changed.</div><div class="line">Running command: /usr/sbin/lvchange --deltag ceph.osd_id=1 /dev/VG1/MyLvm</div><div class="line"> stdout: Logical volume VG1/MyLvm changed.</div><div class="line">Running command: /usr/sbin/lvchange --deltag ceph.cluster_fsid=082d1625-1d68-4261-82c8-3fe9fe3ef489 /dev/VG1/MyLvm</div><div class="line"> stdout: Logical volume VG1/MyLvm changed.</div><div class="line">Running command: /usr/sbin/lvchange --deltag ceph.cluster_name=ceph /dev/VG1/MyLvm</div><div class="line"> stdout: Logical volume VG1/MyLvm changed.</div><div class="line">Running command: /usr/sbin/lvchange --deltag ceph.osd_fsid=a59044b3-ff4c-4a99-978f-1336ff4504a0 /dev/VG1/MyLvm</div><div class="line"> stdout: Logical volume VG1/MyLvm changed.</div><div class="line">Running command: /usr/sbin/lvchange --deltag ceph.encrypted=0 /dev/VG1/MyLvm</div><div class="line"> stdout: Logical volume VG1/MyLvm changed.</div><div class="line">Running command: /usr/sbin/lvchange --deltag ceph.cephx_lockbox_secret= /dev/VG1/MyLvm</div><div class="line"> stdout: Logical volume VG1/MyLvm changed.</div><div class="line">Running command: /usr/sbin/lvchange --deltag ceph.block_uuid=B553Ss-LYdv-3FEW-q5u9-XKph-qn2v-y3ecu0 /dev/VG1/MyLvm</div><div class="line"> stdout: Logical volume VG1/MyLvm changed.</div><div class="line">Running command: /usr/sbin/lvchange --deltag ceph.block_device=/dev/VG1/MyLvm /dev/VG1/MyLvm</div><div class="line"> stdout: Logical volume VG1/MyLvm changed.</div><div class="line">Running command: /usr/sbin/lvchange --deltag ceph.vdo=0 /dev/VG1/MyLvm</div><div class="line"> stdout: Logical volume VG1/MyLvm changed.</div><div class="line">Running command: /usr/sbin/lvchange --deltag ceph.crush_device_class=None /dev/VG1/MyLvm</div><div class="line"> stdout: Logical volume VG1/MyLvm changed.</div><div class="line"><span class="meta">--&gt;</span> Zapping successful for: &lt;LV: /dev/VG1/MyLvm&gt;</div></pre></td></tr></table></figure>
<p>使用ceph-delpoy创建osd：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ceph-deploy osd create --data VG1/MyLvm node2</div><div class="line"></div><div class="line">......</div><div class="line">......</div><div class="line">[node2][DEBUG ] --&gt; ceph-volume lvm activate successful for osd ID: 1</div><div class="line">[node2][DEBUG ] --&gt; ceph-volume lvm create successful for: VG1/MyLvm</div><div class="line">[node2][INFO  ] checking OSD status...</div><div class="line">[node2][DEBUG ] find the location of an executable</div><div class="line">[node2][INFO  ] Running command: sudo /bin/ceph --cluster=ceph osd stat --format=json</div><div class="line">[ceph_deploy.osd][DEBUG ] Host node2 is now ready for osd use.</div></pre></td></tr></table></figure>
<p>查询集群状态：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo ceph -s</div><div class="line">  cluster:</div><div class="line">    id:     082d1625-1d68-4261-82c8-3fe9fe3ef489</div><div class="line">    health: HEALTH_OK</div><div class="line"> </div><div class="line">  services:</div><div class="line">    mon: 3 daemons, quorum node1,node2,node3</div><div class="line">    mgr: node1(active), standbys: node3, node2</div><div class="line">    mds: fs_test-1/1/1 up  &#123;0=node1=up:active&#125;</div><div class="line">    osd: 3 osds: 3 up, 3 in</div><div class="line">    rgw: 1 daemon active</div><div class="line"> </div><div class="line">  data:</div><div class="line">    pools:   8 pools, 68 pgs</div><div class="line">    objects: 256  objects, 136 MiB</div><div class="line">    usage:   3.5 GiB used, 37 GiB / 40 GiB avail</div><div class="line">    pgs:     68 active+clean</div><div class="line"> </div><div class="line"><span class="meta">$</span> sudo ceph osd df tree</div><div class="line">ID CLASS WEIGHT  REWEIGHT SIZE   USE     AVAIL   %USE  VAR  PGS TYPE NAME      </div><div class="line">-1       0.03908        - 40 GiB 3.3 GiB  37 GiB  8.34 1.00   - root default   </div><div class="line">-3       0.00980        - 10 GiB 1.1 GiB 8.8 GiB 11.49 1.38   -     host node1 </div><div class="line"> 0   hdd 0.00980  1.00000 10 GiB 1.1 GiB 8.8 GiB 11.49 1.38  68         osd.0  </div><div class="line">-5       0.01949        - 20 GiB 1.0 GiB  19 GiB  5.20 0.62   -     host node2 </div><div class="line"> 1   hdd 0.01949  1.00000 20 GiB 1.0 GiB  19 GiB  5.20 0.62  55         osd.1  </div><div class="line">-7       0.00980        - 10 GiB 1.1 GiB 8.8 GiB 11.49 1.38   -     host node3 </div><div class="line"> 2   hdd 0.00980  1.00000 10 GiB 1.1 GiB 8.8 GiB 11.49 1.38  68         osd.2  </div><div class="line">                    TOTAL 40 GiB 3.3 GiB  37 GiB  8.34                         </div><div class="line">MIN/MAX VAR: 0.62/1.38  STDDEV: 3.14</div></pre></td></tr></table></figure>
<p>可以看到集群现在就健康了，并且osd.1就有19G可用了。</p>
<hr>
<p><strong>方法二：手动创建。</strong></p>
<p><strong>尝试官方教程失败，如下：</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo mount -o user_xattr /dev/VG1/MyLvm /var/lib/ceph/osd/ceph-1</div><div class="line"></div><div class="line">mount: wrong fs type, bad option, bad superblock on /dev/mapper/VG1-MyLvm,</div><div class="line">       missing codepage or helper program, or other error</div><div class="line"></div><div class="line">       In some cases useful info is found in syslog - try</div><div class="line">       dmesg | tail or so.</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">$</span> sudo mount /dev/VG1/MyLvm /var/lib/ceph/osd/ceph-1</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">$</span> sudo ceph-osd -i 1 --mkfs --mkkey</div><div class="line"></div><div class="line">2019-07-19 16:54:52.691 7efc821c7d80 -1 auth: unable to find a keyring on /var/lib/ceph/osd/ceph-1/keyring: (2) No such file or directory</div><div class="line">2019-07-19 16:54:52.691 7efc821c7d80 -1 monclient: ERROR: missing keyring, cannot use cephx for authentication</div><div class="line">failed to fetch mon config (--no-mon-config to skip)</div></pre></td></tr></table></figure>
<p><strong>暂时放弃手动。</strong></p>
<hr>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://docs.ceph.com/docs/master/rados/operations/add-or-rm-osds/" target="_blank" rel="external">ADDING/REMOVING OSDS</a></p>
]]></content>
    
    <summary type="html">
    
      搭建好集群之后，该如何删除osd，新建osd
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="centos" scheme="http://yoursite.com/tags/centos/"/>
    
      <category term="ceph" scheme="http://yoursite.com/tags/ceph/"/>
    
  </entry>
  
</feed>
